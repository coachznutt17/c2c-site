import React from 'react';
import { Target, Heart, Users, Award } from 'lucide-react';

const About: React.FC = () => {
  const values = [
    {
      icon: Target,
      title: 'Coach-Focused',
      description: 'Every feature is designed with coaches in mind, from upload tools to payout systems'
    },
    {
      icon: Heart,
      title: 'Community Driven',
      description: 'We believe in the power of coaches helping coaches succeed and grow together'
    },
    {
      icon: Users,
      title: 'Quality First',
      description: 'All resources are reviewed to ensure they meet our high standards for coaching excellence'
    },
    {
      icon: Award,
      title: 'Fair Compensation',
      description: 'Coaches deserve to be rewarded fairly for sharing their expertise and knowledge'
    }
  ];

  return (
    <section id="about" className="py-20 bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold text-slate-900 mb-6">
              About <span className="text-emerald-600">Coach2Coach</span>
            </h2>
            <p className="text-xl text-gray-600 leading-relaxed">
              Born from the understanding that great coaching knowledge should be shared, not hoarded. 
              We created the first marketplace designed specifically for coaches to monetize their expertise 
              while helping others achieve success.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-12 mb-16">
            <div>
              <h3 className="text-2xl font-bold text-slate-900 mb-4">Our Mission</h3>
              <p className="text-gray-700 leading-relaxed mb-6">
                To empower coaches at every level by providing a platform where they can share their knowledge, 
                build their brand, and create sustainable income streams. We believe that when coaches succeed, 
                athletes and teams everywhere benefit.
              </p>
              <p className="text-gray-700 leading-relaxed">
                Whether you're a youth coach with innovative drills or a professional coach with championship 
                strategies, Coach2Coach gives you the tools to reach coaches worldwide and get fairly compensated 
                for your expertise.
              </p>
            </div>

            <div>
              <h3 className="text-2xl font-bold text-slate-900 mb-4">Our Story</h3>
              <p className="text-gray-700 leading-relaxed mb-6">
                Founded by coaches who experienced firsthand the challenge of finding quality resources and 
                the frustration of not being able to monetize their hard-earned knowledge. We saw successful 
                models in education and knew coaches deserved the same opportunities.
              </p>
              <p className="text-gray-700 leading-relaxed">
                Today, Coach2Coach connects thousands of coaches across all sports and levels, creating a 
                thriving ecosystem where knowledge flows freely and creators are rewarded for their contributions.
              </p>
            </div>
          </div>

          {/* Values */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {values.map((value, index) => {
              const IconComponent = value.icon;
              return (
                <div key={index} className="text-center">
                  <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <IconComponent className="w-8 h-8 text-emerald-600" />
                  </div>
                  <h4 className="text-xl font-bold text-slate-900 mb-2">{value.title}</h4>
                  <p className="text-gray-600">{value.description}</p>
                </div>
              );
            })}
          </div>

        </div>
      </div>
    </section>
  );
};

export default About;
import React from 'react';
import { User, Crown, Users, Gift, Settings, CreditCard } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import MembershipPanel from './MembershipPanel';
import ReferralProgress from './ReferralProgress';

const AccountPage: React.FC = () => {
  const { user } = useAuth();

  // Mock user data - in real app, this would come from Supabase
  const userData = {
    membershipStatus: 'TRIAL' as const,
    referralQualifiedCount: 2,
    referralDiscountActive: false,
    referralDiscountExpiresAt: undefined,
    stripeConnectAccountId: null,
    membershipCurrentPeriodEnd: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString()
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Please Sign In</h2>
          <p className="text-gray-600">You need to be signed in to view your account.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Account Settings</h1>
              <p className="text-gray-600">Manage your membership, referrals, and account preferences</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Profile Overview */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
          <div className="flex items-center">
            <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mr-4">
              <User className="w-8 h-8 text-gray-600" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-slate-900">
                {user.firstName} {user.lastName}
              </h2>
              <p className="text-gray-600">{user.email}</p>
              <p className="text-sm text-gray-500">
                Member since {new Date(user.createdAt).toLocaleDateString()}
              </p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Membership Panel */}
          <MembershipPanel />

          {/* Referral Progress */}
          <ReferralProgress
            qualifiedCount={userData.referralQualifiedCount}
            discountActive={userData.referralDiscountActive}
            discountExpiresAt={userData.referralDiscountExpiresAt}
            userId={user.id}
          />
        </div>

        {/* Additional Account Settings */}
        <div className="mt-8 bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-slate-900 mb-6">Account Settings</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                <input
                  type="text"
                  value={user.firstName}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  readOnly
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                <input
                  type="text"
                  value={user.lastName}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  readOnly
                />
              </div>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                <input
                  type="email"
                  value={user.email}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  readOnly
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Member Since</label>
                <input
                  type="text"
                  value={new Date(user.createdAt).toLocaleDateString()}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50"
                  readOnly
                />
              </div>
            </div>
          </div>

          <div className="mt-6 pt-6 border-t border-gray-200">
            <button className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
              Update Profile
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AccountPage;
import React, { useState } from 'react';
import { 
  Users, 
  FileText, 
  DollarSign, 
  AlertTriangle, 
  TrendingUp,
  Eye,
  CheckCircle,
  XCircle,
  Ban,
  Search,
  Filter,
  Download,
  Mail,
  Calendar,
  BarChart3,
  Shield,
  Settings,
  Flag,
  Award,
  MessageSquare
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { profileStorage, resourceStorage, userStorage } from '../lib/localStorage';

const AdminDashboard: React.FC = () => {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState('overview');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [adminStats, setAdminStats] = useState({
    pendingModeration: 3,
    openDisputes: 1,
    pendingVerification: 2,
    openReports: 0
  });

  // Get data from localStorage
  const allUsers = userStorage.getUsers();
  const allProfiles = profileStorage.getProfiles();
  const allResources = resourceStorage.getResources();

  // Calculate stats
  const stats = {
    totalUsers: allUsers.length,
    totalCoaches: allProfiles.length,
    totalResources: allResources.length,
    pendingResources: allResources.filter(r => r.status === 'pending').length,
    activeResources: allResources.filter(r => r.status === 'active').length,
    totalRevenue: allResources.reduce((sum, r) => sum + (r.price * r.downloads), 0),
    monthlyRevenue: allResources.reduce((sum, r) => sum + (r.price * r.downloads * 0.3), 0), // Mock monthly data
  };

  // Filter resources based on search and status
  const filteredResources = allResources.filter(resource => {
    const matchesSearch = searchTerm === '' || 
      resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      resource.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = filterStatus === 'all' || resource.status === filterStatus;
    
    return matchesSearch && matchesStatus;
  });

  const handleResourceAction = (resourceId: string, action: 'approve' | 'reject' | 'suspend') => {
    const resource = allResources.find(r => r.id === resourceId);
    if (resource) {
      const updatedResource = {
        ...resource,
        status: action === 'approve' ? 'active' : action === 'reject' ? 'rejected' : 'inactive'
      };
      resourceStorage.saveResource(updatedResource);
      // In a real app, this would trigger a re-render
      window.location.reload();
    }
  };

  // Check if user is admin (in a real app, this would be a proper role check)
  const isAdmin = user?.email === 'admin@coach2coachnetwork.com' || user?.email === 'zach@coach2coachnetwork.com';

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <Shield className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Access Denied</h2>
          <p className="text-gray-600">You don't have permission to access the admin dashboard.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Admin Dashboard</h1>
              <p className="text-gray-600">Platform Management & Analytics</p>
            </div>
            <div className="flex items-center space-x-4">
              <button className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold flex items-center">
                <Download className="w-4 h-4 mr-2" />
                Export Data
              </button>
              <button className="border border-gray-300 hover:bg-gray-50 px-4 py-2 rounded-lg font-semibold flex items-center">
                <Settings className="w-4 h-4 mr-2" />
                Settings
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Users className="w-6 h-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Total Users</p>
                <p className="text-2xl font-bold text-slate-900">{stats.totalUsers}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-emerald-100 rounded-lg">
                <Users className="w-6 h-6 text-emerald-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Active Coaches</p>
                <p className="text-2xl font-bold text-slate-900">{stats.totalCoaches}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <FileText className="w-6 h-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Total Resources</p>
                <p className="text-2xl font-bold text-slate-900">{stats.totalResources}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <DollarSign className="w-6 h-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Total Revenue</p>
                <p className="text-2xl font-bold text-slate-900">${stats.totalRevenue.toLocaleString()}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Pending Actions Alert */}
        {stats.pendingResources > 0 && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-8">
            <div className="flex items-center">
              <AlertTriangle className="w-5 h-5 text-yellow-600 mr-3" />
              <div>
                <h3 className="text-sm font-semibold text-yellow-800">Action Required</h3>
                <p className="text-sm text-yellow-700">
                  {stats.pendingResources} resource{stats.pendingResources !== 1 ? 's' : ''} pending review
                </p>
              </div>
              <button 
                onClick={() => setActiveTab('resources')}
                className="ml-auto bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg text-sm font-semibold"
              >
                Review Now
              </button>
            </div>
          </div>
        )}

        {/* Tabs */}
        <div className="bg-white rounded-xl shadow-sm mb-8">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8 px-6">
              {[
                { id: 'overview', label: 'Overview', icon: BarChart3 },
                { id: 'users', label: 'Users', icon: Users },
                { id: 'moderation', label: 'Moderation', icon: Shield, badge: adminStats.pendingModeration },
                { id: 'disputes', label: 'Disputes', icon: AlertTriangle, badge: adminStats.openDisputes },
                { id: 'verification', label: 'Verification', icon: Award, badge: adminStats.pendingVerification },
                { id: 'reports', label: 'Reports', icon: Flag, badge: adminStats.openReports },
                { id: 'revenue', label: 'Revenue', icon: DollarSign },
                { id: 'analytics', label: 'Analytics', icon: TrendingUp }
              ].map((tab) => {
                const IconComponent = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm relative ${
                      activeTab === tab.id
                        ? 'border-emerald-500 text-emerald-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <IconComponent className="w-4 h-4 mr-2" />
                    {tab.label}
                    {tab.badge && tab.badge > 0 && (
                      <span className="ml-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                        {tab.badge}
                      </span>
                    )}
                    {tab.badge && tab.badge > 0 && (
                      <span className="ml-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                        {tab.badge}
                      </span>
                    )}
                  </button>
                );
              })}
            </nav>
          </div>

          <div className="p-6">
            {/* Overview Tab */}
            {activeTab === 'overview' && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Recent Activity */}
                  <div>
                    <h3 className="text-lg font-semibold text-slate-900 mb-4">Recent Activity</h3>
                    <div className="space-y-3">
                      <div className="flex items-center p-3 bg-gray-50 rounded-lg">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                          <Users className="w-4 h-4 text-blue-600" />
                        </div>
                        <div>
                          <p className="text-sm font-medium text-slate-900">New user registered</p>
                          <p className="text-xs text-gray-600">2 hours ago</p>
                        </div>
                      </div>
                      <div className="flex items-center p-3 bg-gray-50 rounded-lg">
                        <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                          <FileText className="w-4 h-4 text-emerald-600" />
                        </div>
                        <div>
                          <p className="text-sm font-medium text-slate-900">Resource uploaded for review</p>
                          <p className="text-xs text-gray-600">4 hours ago</p>
                        </div>
                      </div>
                      <div className="flex items-center p-3 bg-gray-50 rounded-lg">
                        <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                          <DollarSign className="w-4 h-4 text-green-600" />
                        </div>
                        <div>
                          <p className="text-sm font-medium text-slate-900">New purchase completed</p>
                          <p className="text-xs text-gray-600">6 hours ago</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Quick Stats */}
                  <div>
                    <h3 className="text-lg font-semibold text-slate-900 mb-4">Platform Health</h3>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                        <span className="text-sm font-medium text-green-800">Active Resources</span>
                        <span className="text-lg font-bold text-green-900">{stats.activeResources}</span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                        <span className="text-sm font-medium text-yellow-800">Pending Review</span>
                        <span className="text-lg font-bold text-yellow-900">{stats.pendingResources}</span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                        <span className="text-sm font-medium text-blue-800">Monthly Revenue</span>
                        <span className="text-lg font-bold text-blue-900">${stats.monthlyRevenue.toLocaleString()}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Users Tab */}
            {activeTab === 'users' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-slate-900">User Management</h3>
                  <div className="flex space-x-2">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      <input
                        type="text"
                        placeholder="Search users..."
                        className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                      />
                    </div>
                  </div>
                </div>

                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b border-gray-200">
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">User</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Email</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Role</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Joined</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Status</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {allUsers.map((user) => {
                        const profile = allProfiles.find(p => p.userId === user.id);
                        return (
                          <tr key={user.id} className="border-b border-gray-100 hover:bg-gray-50">
                            <td className="py-4 px-4">
                              <div className="flex items-center">
                                <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center mr-3">
                                  <span className="text-xs font-semibold text-gray-600">
                                    {user.firstName[0]}{user.lastName[0]}
                                  </span>
                                </div>
                                <div>
                                  <div className="font-medium text-slate-900">{user.firstName} {user.lastName}</div>
                                </div>
                              </div>
                            </td>
                            <td className="py-4 px-4 text-slate-900">{user.email}</td>
                            <td className="py-4 px-4">
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                profile ? 'bg-emerald-100 text-emerald-800' : 'bg-gray-100 text-gray-800'
                              }`}>
                                {profile ? 'Coach' : 'User'}
                              </span>
                            </td>
                            <td className="py-4 px-4 text-slate-900">
                              {new Date(user.createdAt).toLocaleDateString()}
                            </td>
                            <td className="py-4 px-4">
                              <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Active
                              </span>
                            </td>
                            <td className="py-4 px-4">
                              <div className="flex space-x-2">
                                <button className="p-1 text-gray-600 hover:text-blue-600">
                                  <Eye className="w-4 h-4" />
                                </button>
                                <button className="p-1 text-gray-600 hover:text-red-600">
                                  <Ban className="w-4 h-4" />
                                </button>
                              </div>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Moderation Tab */}
            {activeTab === 'moderation' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-slate-900">Content Moderation</h3>
                  <div className="flex space-x-2">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      <input
                        type="text"
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        placeholder="Search pending resources..."
                        className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                      />
                    </div>
                    <select
                      value={filterStatus}
                      onChange={(e) => setFilterStatus(e.target.value)}
                      className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    >
                      <option value="pending">Pending</option>
                      <option value="approved">Approved</option>
                      <option value="rejected">Rejected</option>
                      <option value="high_risk">High Risk</option>
                    </select>
                  </div>
                </div>

                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b border-gray-200">
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Resource</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Coach</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Risk Score</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Flags</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Price</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Status</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Uploaded</th>
                        <th className="text-left py-3 px-4 font-semibold text-gray-700">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredResources.map((resource) => {
                        const profile = allProfiles.find(p => p.id === resource.coachId);
                        const riskScore = Math.floor(Math.random() * 100); // Mock risk score
                        const flags = riskScore > 50 ? ['copyright_phrases'] : [];
                        return (
                          <tr key={resource.id} className="border-b border-gray-100 hover:bg-gray-50">
                            <td className="py-4 px-4">
                              <div>
                                <div className="font-medium text-slate-900">{resource.title}</div>
                                <div className="text-sm text-gray-600">{resource.sports.join(', ')}</div>
                              </div>
                            </td>
                            <td className="py-4 px-4 text-slate-900">
                              {profile ? `${profile.firstName} ${profile.lastName}` : 'Unknown'}
                            </td>
                            <td className="py-4 px-4">
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                riskScore >= 75 ? 'bg-red-100 text-red-800' :
                                riskScore >= 50 ? 'bg-yellow-100 text-yellow-800' :
                                riskScore >= 25 ? 'bg-blue-100 text-blue-800' :
                                'bg-green-100 text-green-800'
                              }`}>
                                {riskScore}
                              </span>
                            </td>
                            <td className="py-4 px-4">
                              {flags.length > 0 ? (
                                <div className="flex flex-wrap gap-1">
                                  {flags.map((flag, index) => (
                                    <span key={index} className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">
                                      {flag.replace('_', ' ')}
                                    </span>
                                  ))}
                                </div>
                              ) : (
                                <span className="text-gray-400 text-sm">None</span>
                              )}
                            </td>
                            <td className="py-4 px-4 text-slate-900">${resource.price}</td>
                            <td className="py-4 px-4">
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                resource.status === 'approved' ? 'bg-green-100 text-green-800' :
                                resource.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                resource.status === 'rejected' ? 'bg-red-100 text-red-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {resource.status}
                              </span>
                            </td>
                            <td className="py-4 px-4 text-slate-900">
                              {new Date(resource.createdAt).toLocaleDateString()}
                            </td>
                            <td className="py-4 px-4">
                              <div className="flex space-x-2">
                                <button className="p-1 text-gray-600 hover:text-blue-600">
                                  <Eye className="w-4 h-4" />
                                </button>
                                {resource.status === 'pending' && (
                                  <>
                                    <button 
                                      onClick={() => handleResourceAction(resource.id, 'approve')}
                                      className="p-1 text-gray-600 hover:text-green-600"
                                    >
                                      <CheckCircle className="w-4 h-4" />
                                    </button>
                                    <button 
                                      onClick={() => handleResourceAction(resource.id, 'reject')}
                                      className="p-1 text-gray-600 hover:text-red-600"
                                    >
                                      <XCircle className="w-4 h-4" />
                                    </button>
                                  </>
                                )}
                                {resource.status === 'approved' && (
                                  <button 
                                    onClick={() => handleResourceAction(resource.id, 'suspend')}
                                    className="p-1 text-gray-600 hover:text-red-600"
                                  >
                                    <Ban className="w-4 h-4" />
                                  </button>
                                )}
                              </div>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Disputes Tab */}
            {activeTab === 'disputes' && (
              <div className="text-center py-12">
                <AlertTriangle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-slate-900 mb-2">Dispute Management</h3>
                <p className="text-gray-600">Handle refund requests and purchase disputes.</p>
                <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <p className="text-yellow-800 text-sm">
                    💡 <strong>Coming Soon:</strong> Full dispute resolution workflow with Stripe refund integration
                  </p>
                </div>
              </div>
            )}

            {/* Verification Tab */}
            {activeTab === 'verification' && (
              <div className="text-center py-12">
                <Award className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-slate-900 mb-2">Coach Verification</h3>
                <p className="text-gray-600">Review and approve coach verification requests.</p>
                <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <p className="text-blue-800 text-sm">
                    🏆 <strong>Verification Benefits:</strong> Verified badge, search ranking boost, increased trust
                  </p>
                </div>
              </div>
            )}

            {/* Reports Tab */}
            {activeTab === 'reports' && (
              <div className="text-center py-12">
                <Flag className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-slate-900 mb-2">User Reports</h3>
                <p className="text-gray-600">Review user reports for inappropriate content.</p>
                <div className="mt-6 bg-red-50 border border-red-200 rounded-lg p-4">
                  <p className="text-red-800 text-sm">
                    🚨 <strong>Report Types:</strong> Copyright, spam, low quality, malware, inappropriate content
                  </p>
                </div>
              </div>
            )}
            {/* Revenue Tab */}
            {activeTab === 'revenue' && (
              <div className="text-center py-12">
                <DollarSign className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-slate-900 mb-2">Revenue Analytics</h3>
                <p className="text-gray-600">Detailed revenue reports and analytics coming soon.</p>
              </div>
            )}

            {/* Analytics Tab */}
            {activeTab === 'analytics' && (
              <div className="text-center py-12">
                <TrendingUp className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-slate-900 mb-2">Platform Reports</h3>
                <p className="text-gray-600">Comprehensive platform reports and insights coming soon.</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard;
// Advanced filters panel for search
import React, { useState } from 'react';
import { Filter, X, DollarSign, Star, Calendar, FileText, ChevronDown, ChevronUp } from 'lucide-react';
import { SearchFilters } from '../lib/search/types';

interface AdvancedFiltersProps {
  filters: SearchFilters;
  onFiltersChange: (filters: SearchFilters) => void;
  facets?: {
    sports: { [key: string]: number };
    levels: { [key: string]: number };
    file_types: { [key: string]: number };
    price_ranges: { [key: string]: number };
  };
  className?: string;
}

const AdvancedFilters: React.FC<AdvancedFiltersProps> = ({
  filters,
  onFiltersChange,
  facets,
  className = ""
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['sports', 'levels']));

  const sports = [
    'Basketball', 'Football', 'Baseball', 'Soccer', 'Volleyball', 
    'Tennis', 'Track & Field', 'Swimming', 'Wrestling', 'Golf',
    'Softball', 'Cross Country', 'Lacrosse', 'Hockey'
  ];

  const levels = [
    'Youth (Ages 6-12)', 'Middle School', 'High School', 
    'Travel/Club', 'Collegiate', 'Professional', 'Adult Recreation'
  ];

  const fileTypes = [
    { value: 'pdf', label: 'PDF Documents', icon: '📄' },
    { value: 'video', label: 'Video Files', icon: '🎥' },
    { value: 'pptx', label: 'Presentations', icon: '📊' },
    { value: 'docx', label: 'Word Documents', icon: '📝' },
    { value: 'xlsx', label: 'Spreadsheets', icon: '📈' },
    { value: 'image', label: 'Images', icon: '🖼️' }
  ];

  const priceRanges = [
    { min: 0, max: 499, label: 'Under $5' },
    { min: 500, max: 999, label: '$5 - $10' },
    { min: 1000, max: 1999, label: '$10 - $20' },
    { min: 2000, max: 4999, label: '$20 - $50' },
    { min: 5000, max: 999999, label: '$50+' }
  ];

  const updateFilters = (updates: Partial<SearchFilters>) => {
    onFiltersChange({ ...filters, ...updates });
  };

  const toggleArrayFilter = (array: string[] = [], value: string, key: keyof SearchFilters) => {
    const newArray = array.includes(value) 
      ? array.filter(item => item !== value)
      : [...array, value];
    updateFilters({ [key]: newArray });
  };

  const toggleSection = (section: string) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(section)) {
      newExpanded.delete(section);
    } else {
      newExpanded.add(section);
    }
    setExpandedSections(newExpanded);
  };

  const clearAllFilters = () => {
    onFiltersChange({});
  };

  const activeFilterCount = (filters.sports?.length || 0) + 
                          (filters.levels?.length || 0) + 
                          (filters.file_types?.length || 0) + 
                          (filters.price_min !== undefined || filters.price_max !== undefined ? 1 : 0) +
                          (filters.rating_min ? 1 : 0);

  const FilterSection: React.FC<{ 
    title: string; 
    sectionKey: string; 
    children: React.ReactNode;
    count?: number;
  }> = ({ title, sectionKey, children, count }) => {
    const isOpen = expandedSections.has(sectionKey);
    
    return (
      <div className="border-b border-gray-200 last:border-b-0">
        <button
          onClick={() => toggleSection(sectionKey)}
          className="w-full flex items-center justify-between py-4 px-6 text-left hover:bg-gray-50"
        >
          <div className="flex items-center">
            <span className="font-medium text-gray-900">{title}</span>
            {count !== undefined && count > 0 && (
              <span className="ml-2 px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                {count}
              </span>
            )}
          </div>
          {isOpen ? (
            <ChevronUp className="w-4 h-4 text-gray-500" />
          ) : (
            <ChevronDown className="w-4 h-4 text-gray-500" />
          )}
        </button>
        
        {isOpen && (
          <div className="px-6 pb-4">
            {children}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className={`bg-white rounded-xl shadow-sm border border-gray-200 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between p-6 border-b border-gray-200">
        <div className="flex items-center">
          <Filter className="w-5 h-5 text-gray-600 mr-2" />
          <h3 className="text-lg font-semibold text-slate-900">Filters</h3>
          {activeFilterCount > 0 && (
            <span className="ml-2 px-2 py-1 bg-emerald-100 text-emerald-800 text-sm rounded-full">
              {activeFilterCount}
            </span>
          )}
        </div>
        
        {activeFilterCount > 0 && (
          <button
            onClick={clearAllFilters}
            className="text-sm text-emerald-600 hover:text-emerald-700 font-medium"
          >
            Clear all
          </button>
        )}
      </div>

      {/* Filter Sections */}
      <div>
        {/* Sports */}
        <FilterSection 
          title="Sports" 
          sectionKey="sports"
          count={filters.sports?.length}
        >
          <div className="grid grid-cols-2 gap-2">
            {sports.map(sport => {
              const count = facets?.sports?.[sport];
              return (
                <button
                  key={sport}
                  onClick={() => toggleArrayFilter(filters.sports, sport, 'sports')}
                  className={`flex items-center justify-between px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    filters.sports?.includes(sport)
                      ? 'bg-emerald-100 text-emerald-800 border border-emerald-300'
                      : 'bg-gray-50 text-gray-700 border border-gray-200 hover:bg-gray-100'
                  }`}
                >
                  <span>{sport}</span>
                  {count !== undefined && (
                    <span className="text-xs text-gray-500">({count})</span>
                  )}
                </button>
              );
            })}
          </div>
        </FilterSection>

        {/* Levels */}
        <FilterSection 
          title="Coaching Levels" 
          sectionKey="levels"
          count={filters.levels?.length}
        >
          <div className="space-y-2">
            {levels.map(level => {
              const count = facets?.levels?.[level];
              return (
                <button
                  key={level}
                  onClick={() => toggleArrayFilter(filters.levels, level, 'levels')}
                  className={`w-full flex items-center justify-between px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    filters.levels?.includes(level)
                      ? 'bg-blue-100 text-blue-800 border border-blue-300'
                      : 'bg-gray-50 text-gray-700 border border-gray-200 hover:bg-gray-100'
                  }`}
                >
                  <span>{level}</span>
                  {count !== undefined && (
                    <span className="text-xs text-gray-500">({count})</span>
                  )}
                </button>
              );
            })}
          </div>
        </FilterSection>

        {/* File Types */}
        <FilterSection 
          title="File Types" 
          sectionKey="file_types"
          count={filters.file_types?.length}
        >
          <div className="space-y-2">
            {fileTypes.map(fileType => {
              const count = facets?.file_types?.[fileType.value];
              return (
                <button
                  key={fileType.value}
                  onClick={() => toggleArrayFilter(filters.file_types, fileType.value, 'file_types')}
                  className={`w-full flex items-center justify-between px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    filters.file_types?.includes(fileType.value)
                      ? 'bg-purple-100 text-purple-800 border border-purple-300'
                      : 'bg-gray-50 text-gray-700 border border-gray-200 hover:bg-gray-100'
                  }`}
                >
                  <div className="flex items-center">
                    <span className="mr-2">{fileType.icon}</span>
                    <span>{fileType.label}</span>
                  </div>
                  {count !== undefined && (
                    <span className="text-xs text-gray-500">({count})</span>
                  )}
                </button>
              );
            })}
          </div>
        </FilterSection>

        {/* Price Range */}
        <FilterSection title="Price Range" sectionKey="price">
          <div className="space-y-3">
            <div className="grid grid-cols-2 gap-3">
              <div>
                <label className="block text-xs font-medium text-gray-600 mb-1">Min Price</label>
                <div className="relative">
                  <DollarSign className="absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <input
                    type="number"
                    min="0"
                    step="0.01"
                    value={filters.price_min ? (filters.price_min / 100).toFixed(2) : ''}
                    onChange={(e) => updateFilters({ 
                      price_min: e.target.value ? Math.round(parseFloat(e.target.value) * 100) : undefined 
                    })}
                    placeholder="0.00"
                    className="w-full pl-7 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-sm"
                  />
                </div>
              </div>
              <div>
                <label className="block text-xs font-medium text-gray-600 mb-1">Max Price</label>
                <div className="relative">
                  <DollarSign className="absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <input
                    type="number"
                    min="0"
                    step="0.01"
                    value={filters.price_max ? (filters.price_max / 100).toFixed(2) : ''}
                    onChange={(e) => updateFilters({ 
                      price_max: e.target.value ? Math.round(parseFloat(e.target.value) * 100) : undefined 
                    })}
                    placeholder="100.00"
                    className="w-full pl-7 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-sm"
                  />
                </div>
              </div>
            </div>
            
            <div className="space-y-1">
              <label className="block text-xs font-medium text-gray-600">Quick Select</label>
              <div className="flex flex-wrap gap-2">
                {priceRanges.map(range => (
                  <button
                    key={`${range.min}-${range.max}`}
                    onClick={() => updateFilters({ 
                      price_min: range.min, 
                      price_max: range.max === 999999 ? undefined : range.max 
                    })}
                    className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
                      filters.price_min === range.min && 
                      (filters.price_max === range.max || (range.max === 999999 && !filters.price_max))
                        ? 'bg-emerald-100 text-emerald-800 border border-emerald-300'
                        : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'
                    }`}
                  >
                    {range.label}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </FilterSection>

        {/* Rating */}
        <FilterSection title="Minimum Rating" sectionKey="rating">
          <div className="space-y-2">
            {[4, 3, 2, 1].map(rating => (
              <button
                key={rating}
                onClick={() => updateFilters({ 
                  rating_min: filters.rating_min === rating ? undefined : rating 
                })}
                className={`w-full flex items-center p-2 rounded-lg text-sm transition-colors ${
                  filters.rating_min === rating
                    ? 'bg-yellow-50 border border-yellow-300'
                    : 'hover:bg-gray-50 border border-gray-200'
                }`}
              >
                <div className="flex items-center">
                  {[1, 2, 3, 4, 5].map(star => (
                    <Star
                      key={star}
                      className={`w-4 h-4 ${
                        star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'
                      }`}
                    />
                  ))}
                  <span className="ml-2 text-gray-700">{rating}+ stars</span>
                </div>
              </button>
            ))}
          </div>
        </FilterSection>

        {/* Upload Date */}
        <FilterSection title="Upload Date" sectionKey="date">
          <div className="space-y-2">
            {[
              { value: 'week', label: 'Past Week' },
              { value: 'month', label: 'Past Month' },
              { value: '3months', label: 'Past 3 Months' },
              { value: 'year', label: 'Past Year' }
            ].map(period => {
              const isSelected = filters.uploaded_from === period.value;
              return (
                <button
                  key={period.value}
                  onClick={() => {
                    if (isSelected) {
                      updateFilters({ uploaded_from: undefined, uploaded_to: undefined });
                    } else {
                      const now = new Date();
                      let fromDate: Date;
                      
                      switch (period.value) {
                        case 'week':
                          fromDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                          break;
                        case 'month':
                          fromDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                          break;
                        case '3months':
                          fromDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
                          break;
                        case 'year':
                          fromDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
                          break;
                        default:
                          fromDate = new Date(0);
                      }
                      
                      updateFilters({ 
                        uploaded_from: fromDate.toISOString(),
                        uploaded_to: now.toISOString()
                      });
                    }
                  }}
                  className={`w-full flex items-center p-2 rounded-lg text-sm transition-colors ${
                    isSelected
                      ? 'bg-blue-50 border border-blue-300 text-blue-800'
                      : 'hover:bg-gray-50 border border-gray-200 text-gray-700'
                  }`}
                >
                  <Calendar className="w-4 h-4 mr-2" />
                  {period.label}
                </button>
              );
            })}
          </div>
        </FilterSection>
      </div>
    </div>
  );
};

export default AdvancedFilters;
import React, { useState, useEffect } from 'react';
import { 
  BarChart3, 
  TrendingUp, 
  DollarSign, 
  Users, 
  Target,
  Clock,
  ArrowUpRight,
  ArrowDownRight,
  RefreshCw
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface MetricCard {
  title: string;
  value: string;
  change: number;
  icon: React.ComponentType<any>;
  color: string;
}

const AnalyticsDashboard: React.FC = () => {
  const { user } = useAuth();
  const [timeRange, setTimeRange] = useState<'7d' | '30d' | '90d'>('30d');
  const [loading, setLoading] = useState(false);
  const [metrics, setMetrics] = useState<MetricCard[]>([]);

  useEffect(() => {
    loadAnalytics();
  }, [timeRange]);

  const loadAnalytics = async () => {
    setLoading(true);
    
    try {
      // Mock analytics data for demo
      const mockMetrics: MetricCard[] = [
        {
          title: 'Total Revenue',
          value: '$12,847',
          change: 23.5,
          icon: DollarSign,
          color: 'text-green-600'
        },
        {
          title: 'Active Users',
          value: '1,247',
          change: 12.3,
          icon: Users,
          color: 'text-blue-600'
        },
        {
          title: 'Conversion Rate',
          value: '3.2%',
          change: -2.1,
          icon: Target,
          color: 'text-purple-600'
        },
        {
          title: 'Avg. Session Duration',
          value: '4m 32s',
          change: 8.7,
          icon: Clock,
          color: 'text-orange-600'
        }
      ];

      setMetrics(mockMetrics);
    } catch (error) {
      console.error('Error loading analytics:', error);
    } finally {
      setLoading(false);
    }
  };

  const getTrendIcon = (change: number) => {
    return change > 0 ? (
      <ArrowUpRight className="w-4 h-4 text-green-500" />
    ) : (
      <ArrowDownRight className="w-4 h-4 text-red-500" />
    );
  };

  const getTrendColor = (change: number) => {
    return change > 0 ? 'text-green-600' : 'text-red-600';
  };

  // Check if user is admin
  const isAdmin = user?.email === 'admin@coach2coachnetwork.com' || user?.email === 'zach@coach2coachnetwork.com';

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <BarChart3 className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Access Denied</h2>
          <p className="text-gray-600">You don't have permission to access the analytics dashboard.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Analytics Dashboard</h1>
              <p className="text-gray-600">Platform performance and optimization insights</p>
            </div>
            <div className="flex items-center space-x-4">
              <select
                value={timeRange}
                onChange={(e) => setTimeRange(e.target.value as any)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option value="7d">Last 7 days</option>
                <option value="30d">Last 30 days</option>
                <option value="90d">Last 90 days</option>
              </select>
              <button 
                onClick={loadAnalytics}
                disabled={loading}
                className="flex items-center px-4 py-2 bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white rounded-lg font-semibold transition-colors"
              >
                <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                Refresh
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {metrics.map((metric, index) => {
            const IconComponent = metric.icon;
            return (
              <div key={index} className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">{metric.title}</p>
                    <p className="text-2xl font-bold text-slate-900">{metric.value}</p>
                    <div className="flex items-center mt-1">
                      {getTrendIcon(metric.change)}
                      <span className={`text-sm ml-1 ${getTrendColor(metric.change)}`}>
                        {metric.change > 0 ? '+' : ''}{metric.change.toFixed(1)}%
                      </span>
                    </div>
                  </div>
                  <div className="p-3 rounded-lg bg-gray-100">
                    <IconComponent className={`w-6 h-6 ${metric.color}`} />
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {/* Conversion Funnel */}
        <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
          <h3 className="text-lg font-semibold text-slate-900 mb-6">Conversion Funnel</h3>
          <div className="space-y-4">
            {[
              { step: 'Visits', count: 12450, rate: 100 },
              { step: 'Previews', count: 3890, rate: 31.2 },
              { step: 'Checkouts', count: 456, rate: 11.7 },
              { step: 'Subscriptions', count: 234, rate: 51.3 },
              { step: 'Purchases', count: 89, rate: 38.0 }
            ].map((step, index) => (
              <div key={step.step}>
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium text-slate-900">{step.step}</span>
                  <div className="text-right">
                    <span className="text-lg font-bold text-slate-900">{step.count.toLocaleString()}</span>
                    <span className="text-sm text-gray-600 ml-2">({step.rate}%)</span>
                  </div>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div
                    className="bg-emerald-500 h-3 rounded-full transition-all duration-300"
                    style={{ width: `${step.rate}%` }}
                  ></div>
                </div>
                {index < 4 && (
                  <div className="flex justify-center my-2">
                    <ArrowDownRight className="w-4 h-4 text-gray-400" />
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Top Resources */}
        <div className="bg-white rounded-xl shadow-sm p-6">
          <h3 className="text-lg font-semibold text-slate-900 mb-6">Top Performing Resources</h3>
          <div className="space-y-4">
            {[
              { title: 'Advanced Ball Handling Drills', revenue: 2847, conversions: 89, views: 1456 },
              { title: 'Team Defense Strategies', revenue: 1923, conversions: 67, views: 1234 },
              { title: 'Youth Soccer Fundamentals', revenue: 1456, conversions: 52, views: 987 }
            ].map((resource, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center">
                  <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                    <span className="text-sm font-bold text-emerald-600">#{index + 1}</span>
                  </div>
                  <div>
                    <p className="font-medium text-slate-900">{resource.title}</p>
                    <div className="flex items-center space-x-3 text-xs text-gray-600">
                      <span>{resource.conversions} conversions</span>
                      <span>•</span>
                      <span>{resource.views} views</span>
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <p className="font-semibold text-emerald-600">${resource.revenue.toLocaleString()}</p>
                  <p className="text-xs text-gray-600">
                    {((resource.conversions / resource.views) * 100).toFixed(1)}% CVR
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AnalyticsDashboard;
import { useState, useEffect } from 'react';
import { X } from 'lucide-react';
import { Link } from 'react-router-dom';

const ANNOUNCEMENT_KEY = 'announcement_dismissed';

export default function AnnouncementBar() {
  const [visible, setVisible] = useState(false);

  useEffect(() => {
    const dismissed = localStorage.getItem(ANNOUNCEMENT_KEY);
    if (!dismissed) {
      setVisible(true);
    }
  }, []);

  function handleDismiss() {
    localStorage.setItem(ANNOUNCEMENT_KEY, 'true');
    setVisible(false);
  }

  if (!visible) return null;

  return (
    <div className="bg-emerald-600 text-white py-2 px-4 relative">
      <div className="max-w-7xl mx-auto flex items-center justify-center text-center">
        <p className="text-sm font-medium">
          <span className="font-semibold">New:</span> Sell your resources on Coach2Coach — creators keep 85%.{' '}
          <Link to="/become-seller" className="underline hover:text-emerald-100">
            Learn more
          </Link>
        </p>
        <button
          onClick={handleDismiss}
          className="absolute right-4 p-1 hover:bg-emerald-700 rounded transition-colors"
          aria-label="Dismiss announcement"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
}

import React, { useState } from 'react';
import { X, Mail, Lock, User, AlertCircle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  defaultMode?: 'signin' | 'signup';
}

const AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose, defaultMode = 'signin' }) => {
  const [mode, setMode] = useState<'signin' | 'signup'>('signin');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [title, setTitle] = useState('');
  const [location, setLocation] = useState('');
  const [referrer, setReferrer] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [retryMessage, setRetryMessage] = useState('');

  const { signIn, signUp } = useAuth();

  // Update mode when modal opens with different defaultMode
  React.useEffect(() => {
    if (isOpen) {
      setMode(defaultMode);
      // Reset form when modal opens
     // Don't reset form immediately, let user see what they're typing
     setTimeout(() => {
       setEmail('');
       setPassword('');
       setConfirmPassword('');
       setFirstName('');
       setLastName('');
       setTitle('');
       setLocation('');
      setReferrer('');
     }, 100);
      setError('');
    }
  }, [isOpen, defaultMode]);

  if (!isOpen) return null;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setRetryMessage('');
    setLoading(true);

    const timeoutId = setTimeout(() => {
      if (loading) {
        setRetryMessage('Request is taking longer than expected. Retrying...');
      }
    }, 5000);

    try {
      if (mode === 'signup') {
        if (password.length < 8) {
          setError('Password must be at least 8 characters long');
          setLoading(false);
          clearTimeout(timeoutId);
          return;
        }

        if (password !== confirmPassword) {
          setError('Passwords do not match');
          setLoading(false);
          clearTimeout(timeoutId);
          return;
        }

        console.log('[AuthModal] Starting signup submission...');
        const result = await signUp(email, password, {
          first_name: firstName,
          last_name: lastName,
          title: title,
          location: location,
          referrer: referrer
        });

        clearTimeout(timeoutId);
        console.log('[AuthModal] Signup result:', result);

        if (result.error) {
          console.error('[AuthModal] Signup error:', result.error);
          const errorMsg = result.error.message || 'Failed to create account';

          if (errorMsg.includes('User already registered')) {
            setError('This email is already registered. Please sign in instead.');
          } else if (errorMsg.includes('Email') || errorMsg.includes('confirm')) {
            setError('Account created! Please check your email to confirm your account before signing in.');
          } else if (errorMsg.includes('fetch') || errorMsg.includes('network') || errorMsg.includes('timeout')) {
            setError('Network issue detected. The signup system is retrying automatically. Please wait...');
          } else {
            setError(errorMsg);
          }
        } else {
          console.log('[AuthModal] Signup successful!');
          alert('Account created successfully!');
          onClose();
        }
      } else {
        console.log('[AuthModal] Starting signin...');
        const { error } = await signIn(email, password);

        clearTimeout(timeoutId);

        if (error) {
          console.error('[AuthModal] Signin error:', error);
          setError(error.message);
        } else {
          console.log('[AuthModal] Signin successful!');
          onClose();
        }
      }
    } catch (err: any) {
      clearTimeout(timeoutId);
      console.error('[AuthModal] Unexpected error:', err);
      setError('An unexpected error occurred: ' + (err.message || 'Unknown error'));
    } finally {
      setLoading(false);
      setRetryMessage('');
    }
  };


  const switchMode = () => {
    setMode(mode === 'signin' ? 'signup' : 'signin');
    // Reset form when switching modes
    setEmail('');
    setPassword('');
    setConfirmPassword('');
    setFirstName('');
    setLastName('');
    setTitle('');
    setLocation('');
    setReferrer('');
    setError('');
  };

  return (
    <div 
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
      onClick={(e) => {
        if (e.target === e.currentTarget) {
          onClose();
        }
      }}
    >
      <div className="bg-white rounded-xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-slate-900">
              {mode === 'signin' ? 'Welcome Back' : 'Sign Up'}
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors flex items-center justify-center"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Error Message */}
          {error && (
            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center">
              <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
              <span className="text-red-700 text-sm">{error}</span>
            </div>
          )}

          {/* Retry Message */}
          {retryMessage && (
            <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg flex items-center">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500 mr-2"></div>
              <span className="text-blue-700 text-sm">{retryMessage}</span>
            </div>
          )}

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-4">
            {mode === 'signup' && (
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    First Name
                  </label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <input
                      type="text"
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                     placeholder="Enter your first name"
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 bg-white"
                      required
                     autoComplete="given-name"
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Last Name
                  </label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <input
                      type="text"
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                     placeholder="Enter your last name"
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 bg-white"
                      required
                     autoComplete="family-name"
                    />
                  </div>
                </div>
              </div>
            )}

            {mode === 'signup' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Coaching Title
                  </label>
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="e.g., Basketball Coach, Soccer Trainer"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 bg-white"
                   autoComplete="organization-title"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Location
                  </label>
                  <input
                    type="text"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                    placeholder="City, State"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 bg-white"
                   autoComplete="address-level2"
                  />
                </div>
              </>
            )}

            {mode === 'signup' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Referral Code (Optional)
                </label>
                <input
                  type="text"
                  value={referrer}
                  onChange={(e) => setReferrer(e.target.value)}
                  placeholder="Enter referrer's email or username"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 bg-white"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Know someone who referred you? Enter their info to help them earn rewards!
                </p>
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Email Address
              </label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                 placeholder="Enter your email address"
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 bg-white"
                  required
                 autoComplete="email"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Password
              </label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                 placeholder="Create a password (min 8 characters)"
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 bg-white"
                  required
                  minLength={8}
                 autoComplete="new-password"
                />
              </div>
            </div>

            {mode === 'signup' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Confirm Password
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                   placeholder="Confirm your password"
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-gray-900 bg-white"
                    required
                    minLength={8}
                   autoComplete="new-password"
                  />
                </div>
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
            >
              {loading && (
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
              )}
              {loading ? 'Please wait...' : (mode === 'signin' ? 'Sign In' : 'Create Account')}
            </button>
          </form>

          {/* Switch Mode */}
          <div className="mt-6 text-center">
            <p className="text-gray-600">
              {mode === 'signin' ? "Don't have an account?" : 'Already have an account?'}
              <button
                onClick={switchMode}
                className="ml-2 text-emerald-600 hover:text-emerald-700 font-semibold"
              >
                {mode === 'signin' ? 'Sign Up' : 'Sign In'}
              </button>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AuthModal;
import React from 'react';
import { Link } from 'react-router-dom';
import { Upload, DollarSign, Users, TrendingUp, CheckCircle, ArrowRight, User } from 'lucide-react';

const BecomeSeller: React.FC = () => {
  const steps = [
    {
      icon: Users,
      title: 'Create Your Profile',
      description: 'Set up your coaching profile with your experience, specialties, and credentials'
    },
    {
      icon: Upload,
      title: 'Upload Resources',
      description: 'Share your best drills, playbooks, training programs, and coaching materials'
    },
    {
      icon: CheckCircle,
      title: 'Get Approved',
      description: 'Our team reviews your content to ensure quality for the coaching community'
    },
    {
      icon: DollarSign,
      title: 'Start Earning',
      description: 'Earn up to 90% commission on every sale with our transparent payout system'
    }
  ];

  const benefits = [
    'Keep 85% of every sale',
    'Reach coaches worldwide',
    'Build your coaching brand',
    'Unlimited uploads',
    'Detailed sales analytics',
    'Marketing support included',
    'Access to subscriber base',
    'Monthly revenue sharing'
  ];

  return (
    <section id="become-seller" className="py-20 bg-slate-900 text-white relative overflow-hidden">
      {/* Background Pattern */}
      <div className="absolute inset-0 opacity-5">
        <div className="absolute top-10 left-10 text-8xl font-bold">→</div>
        <div className="absolute top-20 right-20 text-6xl font-bold">X</div>
        <div className="absolute bottom-20 left-20 text-6xl font-bold">O</div>
        <div className="absolute bottom-10 right-10 text-8xl font-bold">↗</div>
        
        {/* CTA Button moved up */}
        <div className="text-center mb-16">
          <Link 
            to="/create-profile"
            className="inline-flex items-center bg-emerald-600 hover:bg-emerald-700 px-8 py-4 rounded-lg font-bold text-lg transition-all transform hover:scale-105 text-white no-underline"
          >
            Create Your Coach Profile
            <ArrowRight className="ml-2 w-5 h-5" />
          </Link>
        </div>
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-6xl font-bold mb-6">
            Turn Your <span className="text-emerald-400">Expertise</span><br />
            Into <span className="text-emerald-400">Income</span>
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto mb-8">
            Join thousands of coaches who are monetizing their knowledge and helping others succeed. 
            Share what you know and get rewarded for it.
          </p>
          
          {/* CTA Button moved up */}
          <div className="text-center mb-16">
            <Link 
              to="/create-profile"
              className="inline-flex items-center bg-emerald-600 hover:bg-emerald-700 px-8 py-4 rounded-lg font-bold text-lg transition-all transform hover:scale-105 text-white no-underline"
            >
              Create Your Coach Profile
              <ArrowRight className="ml-2 w-5 h-5" />
            </Link>
          </div>
        </div>

        {/* Steps */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16">
          {steps.map((step, index) => {
            const IconComponent = step.icon;
            return (
              <div key={index} className="text-center">
                <div className="relative mb-6">
                  <div className="w-20 h-20 bg-emerald-600 rounded-full flex items-center justify-center mx-auto">
                    <IconComponent className="w-10 h-10" />
                  </div>
                  <div className="absolute -top-2 -right-2 w-8 h-8 bg-white text-slate-900 rounded-full flex items-center justify-center font-bold">
                    {index + 1}
                  </div>
                </div>
                <h3 className="text-xl font-bold mb-3">{step.title}</h3>
                <p className="text-gray-300">{step.description}</p>
              </div>
            );
          })}
        </div>

        {/* Benefits & CTA */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          <div>
            <h3 className="text-3xl font-bold mb-6">Why Coaches Choose Our Platform</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {benefits.map((benefit, index) => (
                <div key={index} className="flex items-center">
                  <CheckCircle className="w-5 h-5 text-emerald-400 mr-3 flex-shrink-0" />
                  <span>{benefit}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-slate-800 rounded-2xl p-8">
            <h3 className="text-2xl font-bold mb-4">Ready to Get Started?</h3>
            <p className="text-gray-300 mb-6">
              Create your coach profile in just a few minutes and start sharing your expertise with coaches worldwide.
            </p>
            <Link 
              to="/create-profile"
              className="w-full bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors flex items-center justify-center no-underline"
            >
              <User className="w-4 h-4 mr-2" />
              Create Your Profile Now
            </Link>
            <p className="text-sm text-gray-400 mt-3 text-center">
              Free to create • Start earning immediately
            </p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default BecomeSeller;
import React, { useState, useMemo, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Search, Filter, SlidersHorizontal, Grid2x2 as Grid, List, Star, TrendingUp, Clock, Award, Loader } from 'lucide-react';
import { resourceStorage } from '../lib/localStorage';
import { useMembership } from '../hooks/useMembership';
import { canDownloadFull, isInTrial } from '../lib/membership';
import ResourceCard from './ResourceCard';
import SearchBar from './SearchBar';
import AdvancedFilters from './AdvancedFilters';
import SearchResults from './SearchResults';
import { SearchFilters, SearchResult } from '../lib/search/types';

const BrowseResources: React.FC = () => {
  const { membership } = useMembership();
  const [searchParams, setSearchParams] = useSearchParams();
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [showFilters, setShowFilters] = useState(false);
  const [searchQuery, setSearchQuery] = useState(searchParams.get('q') || '');
  const [filters, setFilters] = useState<SearchFilters>({});
  const [sortBy, setSortBy] = useState('relevance');
  const [currentPage, setCurrentPage] = useState(1);
  const [searchResult, setSearchResult] = useState<SearchResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Initialize search from URL params
  useEffect(() => {
    const urlQuery = searchParams.get('q');
    if (urlQuery && urlQuery !== searchQuery) {
      setSearchQuery(urlQuery);
    }
  }, [searchParams]);
  // Featured categories for quick filtering
  const featuredCategories = [
    { name: 'Practice Plans', icon: '📋', count: 45 },
    { name: 'Drill Collections', icon: '🏃', count: 32 },
    { name: 'Playbooks', icon: '📖', count: 28 },
    { name: 'Training Programs', icon: '💪', count: 19 }
  ];

  // Get resources from localStorage
  const allResources = resourceStorage.getActiveResources();
  
  // Check user access level
  const canDownload = membership ? canDownloadFull(membership) : false;
  const inTrial = membership ? isInTrial(membership) : false;
  
  // Perform search when query or filters change
  useEffect(() => {
    performSearch();
  }, [searchQuery, filters, sortBy, currentPage]);

  const performSearch = async () => {
    setLoading(true);
    setError('');

    try {
      // Build query params
      const params = new URLSearchParams();
      if (searchQuery) params.set('search', searchQuery);
      if (filters.sport) params.set('sport', filters.sport);
      if (filters.level) params.set('level', filters.level);
      if (filters.category) params.set('category', filters.category);
      params.set('limit', '20');
      params.set('offset', String((currentPage - 1) * 20));

      const response = await fetch(`/api/resources?${params.toString()}`);
      const result = await response.json();

      if (result.data) {
        // Transform to SearchResult format
        const searchResult: SearchResult = {
          hits: result.data.map((resource: any) => ({
            id: resource.id,
            title: resource.title,
            description: resource.description,
            sport: resource.sports?.[0] || '',
            level: resource.levels?.[0] || '',
            file_type: 'pdf',
            price_cents: Math.round(resource.price * 100),
            rating: resource.rating || 0,
            purchase_count: resource.downloads || 0,
            view_count: (resource.downloads || 0) * 2,
            uploaded_at: resource.created_at,
            coach_name: `${resource.first_name || ''} ${resource.last_name || ''}`.trim() || 'Coach',
            coach_id: resource.coach_id
          })),
          totalHits: result.data.length,
          page: currentPage,
          totalPages: Math.ceil(result.data.length / 20),
          processingTimeMS: 0
        };
        setSearchResult(searchResult);
      } else {
        throw new Error('No data returned');
      }
    } catch (err) {
      console.error('Search error:', err);
      setError('Unable to load resources. Please try again.');
      setSearchResult(null);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (query: string) => {
    setSearchQuery(query);
    setCurrentPage(1);
    // Update URL params
    const newParams = new URLSearchParams(searchParams);
    if (query) {
      newParams.set('q', query);
    } else {
      newParams.delete('q');
    }
    setSearchParams(newParams);
  };

  const handleFiltersChange = (newFilters: SearchFilters) => {
    setFilters(newFilters);
    setCurrentPage(1);
  };

  const handleSortChange = (newSort: string) => {
    setSortBy(newSort);
    setCurrentPage(1);
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleResourceClick = async (resourceId: string, query?: string) => {
    // Track click for analytics
    try {
      await fetch('/api/search/track-click', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: query || searchQuery,
          resourceId,
          sessionId: `session_${Date.now()}`
        })
      });
    } catch (error) {
      console.error('Failed to track click:', error);
    }
    
    // Navigate to resource page
    window.location.href = `/resource/${resourceId}`;
  };

  const handleQuickFilter = (sport: string) => {
    const newSports = filters.sports?.includes(sport) 
      ? filters.sports.filter(s => s !== sport)
      : [...(filters.sports || []), sport];
    
    setFilters(prev => ({ ...prev, sports: newSports }));
  };

  const clearAllFilters = () => {
    setFilters({});
    setSearchQuery('');
    setCurrentPage(1);
    // Clear URL params
    setSearchParams(new URLSearchParams());
  };

  return (
    <section id="browse" className="py-20 bg-gray-50 min-h-screen">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold text-slate-900 mb-4">
            Browse <span className="text-emerald-600">Coaching Resources</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Discover game-changing resources created by coaches, for coaches across all sports and levels
          </p>
        </div>

        {/* Quick Search Bar */}
        <SearchBar
          value={searchQuery}
          onChange={setSearchQuery}
          onSearch={handleSearch}
          className="max-w-2xl mx-auto mb-8"
        />

        {/* Featured Categories */}
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-slate-900 mb-4">Popular Categories</h3>
          <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-sm text-blue-800">
              🎯 <strong>Try this:</strong> Click categories below, search "basketball" or "soccer", or sign in and create your own profile to upload resources!
            </p>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {featuredCategories.map((category) => (
              <button
                key={category.name}
                onClick={() => handleQuickFilter(category.name.split(' ')[0])}
                className={`p-4 rounded-xl border-2 transition-all hover:scale-105 ${
                  filters.sports?.includes(category.name.split(' ')[0])
                    ? 'border-emerald-500 bg-emerald-50 text-emerald-800'
                    : 'border-gray-200 bg-white hover:border-gray-300'
                }`}
              >
                <div className="text-2xl mb-2">{category.icon}</div>
                <div className="font-semibold text-sm">{category.name}</div>
                <div className="text-xs text-gray-500">{category.count} resources</div>
              </button>
            ))}
          </div>
        </div>

        {/* Filters & View Controls */}
        <div className="bg-white rounded-xl shadow-sm p-4 mb-8">
          <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowFilters(!showFilters)}
                className={`flex items-center px-4 py-2 rounded-lg font-medium transition-colors ${
                  showFilters || Object.values(filters).some(v => Array.isArray(v) ? v.length > 0 : v !== undefined)
                    ? 'bg-emerald-100 text-emerald-800 border border-emerald-300'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <SlidersHorizontal className="w-4 h-4 mr-2" />
                Filters
              </button>
              
              <select
                value={sortBy}
                onChange={(e) => handleSortChange(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option value="relevance">Most Relevant</option>
                <option value="newest">Newest First</option>
                <option value="trending">Trending</option>
                <option value="price-low">Price: Low to High</option>
                <option value="price-high">Price: High to Low</option>
                <option value="rating">Highest Rated</option>
                <option value="popular">Most Downloads</option>
              </select>

              {(searchQuery || Object.values(filters).some(v => Array.isArray(v) ? v.length > 0 : v !== undefined)) && (
                <button
                  onClick={clearAllFilters}
                  className="text-emerald-600 hover:text-emerald-700 font-medium text-sm"
                >
                  Clear all
                </button>
              )}
            </div>

            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-600">
                {loading ? 'Searching...' : `${searchResult?.totalHits || 0} resources`}
              </span>
              <div className="flex border border-gray-300 rounded-lg overflow-hidden">
                <button
                  onClick={() => setViewMode('grid')}
                  className={`p-2 ${viewMode === 'grid' ? 'bg-emerald-100 text-emerald-600' : 'text-gray-600 hover:bg-gray-100'}`}
                >
                  <Grid className="w-4 h-4" />
                </button>
                <button
                  onClick={() => setViewMode('list')}
                  className={`p-2 ${viewMode === 'list' ? 'bg-emerald-100 text-emerald-600' : 'text-gray-600 hover:bg-gray-100'}`}
                >
                  <List className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Advanced Filters Panel */}
        {showFilters && (
          <AdvancedFilters 
            filters={filters}
            onFiltersChange={handleFiltersChange}
            facets={searchResult?.facets}
            className="mb-8"
          />
        )}

        {/* Loading State */}
        {loading && (
          <div className="text-center py-16">
            <Loader className="w-8 h-8 text-emerald-600 mx-auto mb-4 animate-spin" />
            <p className="text-gray-600">Searching resources...</p>
          </div>
        )}

        {/* Error State */}
        {error && !loading && (
          <div className="text-center py-16">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Search className="w-8 h-8 text-red-600" />
            </div>
            <h3 className="text-xl font-bold text-slate-900 mb-2">Search Error</h3>
            <p className="text-gray-600 mb-4">{error}</p>
            <button 
              onClick={performSearch}
              className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              Try Again
            </button>
          </div>
        )}

        {/* Search Results */}
        {!loading && !error && searchResult && (
          <SearchResults
            searchResult={searchResult}
            onPageChange={handlePageChange}
            onResourceClick={handleResourceClick}
            viewMode={viewMode}
          />
        )}

        {/* Empty State for No Search */}
        {!loading && !error && !searchResult && (
          <div className="text-center py-16">
            <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <Search className="w-12 h-12 text-gray-400" />
            </div>
            <h3 className="text-2xl font-bold text-slate-900 mb-4">
              Start Your Search
            </h3>
            <p className="text-gray-600 mb-6">
              Search for coaching resources by sport, level, or keyword
            </p>
            <div className="space-y-2 text-sm text-gray-500">
              <p>💡 <strong>Try:</strong> "basketball drills", "football playbook", "soccer training"</p>
              <p>🏷️ <strong>Filter by:</strong> Sport, level, or file type</p>
            </div>
          </div>
        )}

        {/* Trending & Featured Section */}
        {!searchQuery && !Object.values(filters).some(v => Array.isArray(v) ? v.length > 0 : v !== undefined) && (
          <div className="mt-16">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Trending Resources */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center mb-4">
                  <TrendingUp className="w-5 h-5 text-orange-500 mr-2" />
                  <h3 className="text-lg font-semibold text-slate-900">Trending Now</h3>
                </div>
                <div className="space-y-3">
                  {allResources.slice(0, 3).map((resource, index) => (
                    <div key={resource.id} className="flex items-center space-x-3">
                      <span className="text-orange-500 font-bold text-sm">#{index + 1}</span>
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-slate-900 truncate">{resource.title}</p>
                        <p className="text-sm text-gray-500">{resource.downloads} downloads</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Top Rated */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center mb-4">
                  <Star className="w-5 h-5 text-yellow-500 mr-2" />
                  <h3 className="text-lg font-semibold text-slate-900">Top Rated</h3>
                </div>
                <div className="space-y-3">
                  {[...allResources].sort((a, b) => b.rating - a.rating).slice(0, 3).map((resource) => (
                    <div key={resource.id} className="flex items-center space-x-3">
                      <div className="flex items-center">
                        <Star className="w-4 h-4 text-yellow-400 mr-1" />
                        <span className="text-sm font-medium">{resource.rating}</span>
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-slate-900 truncate">{resource.title}</p>
                        <p className="text-sm text-gray-500">${resource.price}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Recently Added */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center mb-4">
                  <Clock className="w-5 h-5 text-blue-500 mr-2" />
                  <h3 className="text-lg font-semibold text-slate-900">Recently Added</h3>
                </div>
                <div className="space-y-3">
                  {[...allResources].sort((a, b) => 
                    new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
                  ).slice(0, 3).map((resource) => (
                    <div key={resource.id} className="flex items-center space-x-3">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-slate-900 truncate">{resource.title}</p>
                        <p className="text-sm text-gray-500">
                          {Math.floor((new Date().getTime() - new Date(resource.createdAt).getTime()) / (1000 * 60 * 60 * 24))} days ago
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default BrowseResources;
import React, { useState } from 'react';
import { ShoppingCart, CreditCard, Loader, Lock, Crown, Eye } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { useMembership } from '../hooks/useMembership';
import { canPurchase, canDownloadFull, isInTrial, needsUpgrade } from '../lib/membership';
import { api } from '../lib/api';
import CheckoutModal from './CheckoutModal';
import MembershipGate from './MembershipGate';

interface CheckoutButtonProps {
  resource: {
    id: string;
    coachId: string;
    title: string;
    description: string;
    price: number;
    sports: string[];
    levels: string[];
    rating: number;
    downloads: number;
  };
  className?: string;
  variant?: 'primary' | 'secondary';
}

const CheckoutButton: React.FC<CheckoutButtonProps> = ({
  resource,
  className = '',
  variant = 'primary'
}) => {
  const { user } = useAuth();
  const { membership } = useMembership();
  const [showCheckoutModal, setShowCheckoutModal] = useState(false);
  const [loading, setLoading] = useState(false);

  if (!user || !membership) {
    return (
      <button
        onClick={() => alert('Please sign in to purchase resources')}
        className={`${baseClasses} ${variantClasses[variant]} ${className}`}
      >
        <CreditCard className="w-4 h-4 mr-2" />
        Sign In to Purchase
      </button>
    );
  }

  const canBuy = canPurchase(membership);
  const canDownload = canDownloadFull(membership);
  const inTrial = isInTrial(membership);

  const handlePurchase = async () => {
    if (!canBuy) {
      // Show upgrade prompt
      alert('Active membership required to purchase resources. Please upgrade to continue.');
      return;
    }

    setLoading(true);
    
    try {
      const result = await api.purchaseResource(resource.id);
      
      if (result.success && result.data?.checkoutUrl) {
        window.location.href = result.data.checkoutUrl;
      } else {
        throw new Error(result.error || 'Failed to create checkout');
      }
    } catch (error) {
      console.error('Checkout error:', error);
      alert('Failed to start checkout. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const baseClasses = "flex items-center justify-center px-6 py-3 rounded-lg font-semibold transition-all transform hover:scale-105 disabled:transform-none disabled:opacity-50";
  
  const variantClasses = {
    primary: "bg-emerald-600 hover:bg-emerald-700 text-white",
    secondary: "border-2 border-emerald-600 text-emerald-600 hover:bg-emerald-600 hover:text-white"
  };

  // Show different button based on membership status
  if (!canBuy) {
    return (
      <button
        onClick={() => alert('Active membership required to purchase resources')}
        className={`${baseClasses} bg-gray-400 text-white cursor-not-allowed ${className}`}
        disabled
      >
        <Lock className="w-4 h-4 mr-2" />
        {inTrial ? 'Upgrade to Purchase' : 'Membership Required'}
      </button>
    );
  }

  return (
    <>
      <button
        onClick={handlePurchase}
        disabled={loading}
        className={`${baseClasses} ${variantClasses[variant]} ${loading ? 'opacity-50' : ''} ${className}`}
      >
        {loading ? (
          'Processing...'
        ) : (
          <>
            <CreditCard className="w-4 h-4 mr-2" />
            Purchase ${resource.price}
          </>
        )}
      </button>
      
      {/* Checkout Modal */}
      <CheckoutModal
        isOpen={showCheckoutModal}
        onClose={() => setShowCheckoutModal(false)}
        resource={resource}
      />
    </>
  );
};

export default CheckoutButton;
import React, { useState } from 'react';
import { X, CreditCard, Lock, Shield, Star, User, CheckCircle, AlertCircle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { profileStorage } from '../lib/localStorage';
import { calculateCommission } from '../lib/stripe';

interface CheckoutModalProps {
  isOpen: boolean;
  onClose: () => void;
  resource: {
    id: string;
    coachId: string;
    title: string;
    description: string;
    price: number;
    sports: string[];
    levels: string[];
    rating: number;
    downloads: number;
  };
}

const CheckoutModal: React.FC<CheckoutModalProps> = ({ isOpen, onClose, resource }) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [step, setStep] = useState<'details' | 'payment' | 'processing' | 'success'>('details');
  
  const [paymentData, setPaymentData] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    name: '',
    email: user?.email || '',
    country: 'US'
  });

  const profile = profileStorage.getProfileById(resource.coachId);
  const userTier = 'free'; // Mock user tier
  const commission = calculateCommission(resource.price, userTier);

  if (!isOpen) return null;

  const handlePayment = async () => {
    setLoading(true);
    setError('');
    setStep('processing');

    try {
      // Simulate payment processing
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock success
      setStep('success');
      
      // Auto-close after success
      setTimeout(() => {
        onClose();
        setStep('details');
      }, 3000);
    } catch (err) {
      setError('Payment failed. Please try again.');
      setStep('payment');
    } finally {
      setLoading(false);
    }
  };

  const formatCardNumber = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    if (parts.length) {
      return parts.join(' ');
    } else {
      return v;
    }
  };

  const formatExpiryDate = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    if (v.length >= 2) {
      return v.substring(0, 2) + '/' + v.substring(2, 4);
    }
    return v;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-slate-900">
            {step === 'details' && 'Purchase Resource'}
            {step === 'payment' && 'Payment Details'}
            {step === 'processing' && 'Processing Payment'}
            {step === 'success' && 'Purchase Complete!'}
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Step 1: Resource Details */}
          {step === 'details' && (
            <div className="space-y-6">
              {/* Resource Info */}
              <div className="bg-gray-50 rounded-lg p-6">
                <div className="flex items-start space-x-4">
                  <div className="w-16 h-16 bg-emerald-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <CreditCard className="w-8 h-8 text-emerald-600" />
                  </div>
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-slate-900 mb-2">{resource.title}</h3>
                    <p className="text-gray-600 mb-3">{resource.description}</p>
                    
                    <div className="flex items-center space-x-4 text-sm text-gray-500 mb-3">
                      <div className="flex items-center">
                        <Star className="w-4 h-4 text-yellow-400 mr-1" />
                        <span>{resource.rating}</span>
                      </div>
                      <span>•</span>
                      <span>{resource.downloads} downloads</span>
                    </div>

                    <div className="flex flex-wrap gap-2">
                      {resource.sports.slice(0, 3).map((sport, index) => (
                        <span key={index} className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                          {sport}
                        </span>
                      ))}
                      {resource.levels.slice(0, 2).map((level, index) => (
                        <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                          {level}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              {/* Coach Info */}
              {profile && (
                <div className="bg-blue-50 rounded-lg p-4">
                  <div className="flex items-center">
                    <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center mr-3">
                      <User className="w-6 h-6 text-gray-600" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-slate-900">
                        {profile.firstName} {profile.lastName}
                      </h4>
                      <p className="text-sm text-gray-600">{profile.title}</p>
                      <p className="text-xs text-gray-500">{profile.location}</p>
                    </div>
                  </div>
                </div>
              )}

              {/* Price Breakdown */}
              <div className="bg-slate-50 rounded-lg p-6">
                <h4 className="font-semibold text-slate-900 mb-4">Order Summary</h4>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Resource Price</span>
                    <span className="font-semibold">${resource.price.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Platform Fee</span>
                    <span className="text-sm text-gray-500">Included</span>
                  </div>
                  <div className="border-t pt-3">
                    <div className="flex justify-between items-center">
                      <span className="text-lg font-bold text-slate-900">Total</span>
                      <span className="text-2xl font-bold text-emerald-600">${resource.price.toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Security Notice */}
              <div className="flex items-center p-4 bg-green-50 border border-green-200 rounded-lg">
                <Shield className="w-5 h-5 text-green-600 mr-3" />
                <div>
                  <p className="text-sm font-semibold text-green-800">Secure Payment</p>
                  <p className="text-xs text-green-700">Your payment information is encrypted and secure</p>
                </div>
              </div>

              {/* Continue Button */}
              <button
                onClick={() => setStep('payment')}
                className="w-full bg-emerald-600 hover:bg-emerald-700 text-white py-4 rounded-lg font-semibold text-lg transition-colors flex items-center justify-center"
              >
                <Lock className="w-5 h-5 mr-2" />
                Continue to Payment
              </button>
            </div>
          )}

          {/* Step 2: Payment Form */}
          {step === 'payment' && (
            <div className="space-y-6">
              {/* Error Message */}
              {error && (
                <div className="p-4 bg-red-50 border border-red-200 rounded-lg flex items-center">
                  <AlertCircle className="w-5 h-5 text-red-500 mr-3" />
                  <span className="text-red-700">{error}</span>
                </div>
              )}

              {/* Payment Form */}
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Card Number</label>
                  <input
                    type="text"
                    value={paymentData.cardNumber}
                    onChange={(e) => setPaymentData({
                      ...paymentData,
                      cardNumber: formatCardNumber(e.target.value)
                    })}
                    placeholder="1234 5678 9012 3456"
                    maxLength={19}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Expiry Date</label>
                    <input
                      type="text"
                      value={paymentData.expiryDate}
                      onChange={(e) => setPaymentData({
                        ...paymentData,
                        expiryDate: formatExpiryDate(e.target.value)
                      })}
                      placeholder="MM/YY"
                      maxLength={5}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">CVV</label>
                    <input
                      type="text"
                      value={paymentData.cvv}
                      onChange={(e) => setPaymentData({
                        ...paymentData,
                        cvv: e.target.value.replace(/\D/g, '').slice(0, 4)
                      })}
                      placeholder="123"
                      maxLength={4}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Cardholder Name</label>
                  <input
                    type="text"
                    value={paymentData.name}
                    onChange={(e) => setPaymentData({...paymentData, name: e.target.value})}
                    placeholder="John Doe"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                  <input
                    type="email"
                    value={paymentData.email}
                    onChange={(e) => setPaymentData({...paymentData, email: e.target.value})}
                    placeholder="john@example.com"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
              </div>

              {/* Order Summary (Compact) */}
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="flex justify-between items-center">
                  <span className="font-medium text-slate-900">{resource.title}</span>
                  <span className="font-bold text-emerald-600">${resource.price.toFixed(2)}</span>
                </div>
              </div>

              {/* Payment Buttons */}
              <div className="flex space-x-4">
                <button
                  onClick={() => setStep('details')}
                  className="flex-1 border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors"
                >
                  Back
                </button>
                <button
                  onClick={handlePayment}
                  disabled={loading}
                  className="flex-1 bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
                >
                  <CreditCard className="w-5 h-5 mr-2" />
                  {loading ? 'Processing...' : `Pay $${resource.price.toFixed(2)}`}
                </button>
              </div>
            </div>
          )}

          {/* Step 3: Processing */}
          {step === 'processing' && (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse">
                <CreditCard className="w-8 h-8 text-emerald-600" />
              </div>
              <h3 className="text-xl font-bold text-slate-900 mb-2">Processing Your Payment</h3>
              <p className="text-gray-600">Please wait while we process your payment securely...</p>
              <div className="mt-6">
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div className="bg-emerald-600 h-2 rounded-full animate-pulse" style={{ width: '60%' }}></div>
                </div>
              </div>
            </div>
          )}

          {/* Step 4: Success */}
          {step === 'success' && (
            <div className="text-center py-12">
              <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <CheckCircle className="w-12 h-12 text-green-600" />
              </div>
              <h3 className="text-2xl font-bold text-slate-900 mb-2">Payment Successful!</h3>
              <p className="text-gray-600 mb-6">
                You now have access to <strong>{resource.title}</strong>
              </p>
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                <p className="text-sm text-green-800">
                  A download link has been sent to your email address.
                </p>
              </div>
              <button
                onClick={onClose}
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors"
              >
                Continue
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CheckoutModal;
import React, { useState } from 'react';
import { UserPlus, UserCheck, Users, Star, MapPin, Award, Bell, BellOff } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { profileStorage } from '../lib/localStorage';

interface FollowingRelationship {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: string;
  notifications: boolean;
}

interface CoachFollowingProps {
  coachId?: string;
  showFollowButton?: boolean;
}

const CoachFollowing: React.FC<CoachFollowingProps> = ({ 
  coachId, 
  showFollowButton = true 
}) => {
  const { user } = useAuth();
  
  // Mock following relationships - in real app, this would come from your backend
  const [followingRelationships, setFollowingRelationships] = useState<FollowingRelationship[]>([
    {
      id: '1',
      followerId: 'current-user',
      followingId: 'coach1',
      createdAt: '2024-01-15T10:00:00Z',
      notifications: true
    }
  ]);

  const [followedCoaches, setFollowedCoaches] = useState<string[]>(['coach1']);
  const [loading, setLoading] = useState(false);

  // Get all coach profiles for display
  const allProfiles = profileStorage.getProfiles();
  
  // Mock featured coaches to follow
  const featuredCoaches = [
    {
      id: 'coach1',
      firstName: 'Mike',
      lastName: 'Johnson',
      title: 'Basketball Skills Trainer',
      location: 'Atlanta, GA',
      followers: 1247,
      resources: 23,
      rating: 4.9,
      specialties: ['Ball Handling', 'Shooting', 'Player Development'],
      recentActivity: 'Uploaded new drill collection 2 days ago'
    },
    {
      id: 'coach2',
      firstName: 'Sarah',
      lastName: 'Williams',
      title: 'High School Soccer Coach',
      location: 'Austin, TX',
      followers: 892,
      resources: 18,
      rating: 4.8,
      specialties: ['Team Strategy', 'Conditioning', 'Mental Training'],
      recentActivity: 'Published practice plan template 1 week ago'
    },
    {
      id: 'coach3',
      firstName: 'Tom',
      lastName: 'Davis',
      title: 'Youth Football Coach',
      location: 'Denver, CO',
      followers: 634,
      resources: 15,
      rating: 4.7,
      specialties: ['Fundamentals', 'Team Building', 'Safety'],
      recentActivity: 'Shared new playbook 3 days ago'
    }
  ];

  const isFollowing = (coachId: string) => {
    return followedCoaches.includes(coachId);
  };

  const handleFollow = async (targetCoachId: string) => {
    if (!user) return;
    
    setLoading(true);
    
    try {
      if (isFollowing(targetCoachId)) {
        // Unfollow
        setFollowedCoaches(prev => prev.filter(id => id !== targetCoachId));
        setFollowingRelationships(prev => 
          prev.filter(rel => !(rel.followerId === user.id && rel.followingId === targetCoachId))
        );
      } else {
        // Follow
        setFollowedCoaches(prev => [...prev, targetCoachId]);
        const newRelationship: FollowingRelationship = {
          id: Date.now().toString(),
          followerId: user.id,
          followingId: targetCoachId,
          createdAt: new Date().toISOString(),
          notifications: true
        };
        setFollowingRelationships(prev => [...prev, newRelationship]);
      }
    } catch (error) {
      console.error('Error updating follow status:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleNotifications = (targetCoachId: string) => {
    setFollowingRelationships(prev =>
      prev.map(rel => {
        if (rel.followerId === user?.id && rel.followingId === targetCoachId) {
          return { ...rel, notifications: !rel.notifications };
        }
        return rel;
      })
    );
  };

  const getNotificationStatus = (targetCoachId: string) => {
    const relationship = followingRelationships.find(
      rel => rel.followerId === user?.id && rel.followingId === targetCoachId
    );
    return relationship?.notifications || false;
  };

  if (!user) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 text-center">
        <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-slate-900 mb-2">Join the Coach Community</h3>
        <p className="text-gray-600">Sign in to follow coaches and get updates on their latest resources</p>
      </div>
    );
  }

  // Single coach follow button
  if (coachId && showFollowButton) {
    const coach = featuredCoaches.find(c => c.id === coachId);
    if (!coach) return null;

    return (
      <div className="flex items-center space-x-2">
        <button
          onClick={() => handleFollow(coachId)}
          disabled={loading}
          className={`flex items-center px-4 py-2 rounded-lg font-semibold transition-colors ${
            isFollowing(coachId)
              ? 'bg-emerald-100 text-emerald-800 hover:bg-emerald-200'
              : 'bg-emerald-600 text-white hover:bg-emerald-700'
          }`}
        >
          {isFollowing(coachId) ? (
            <>
              <UserCheck className="w-4 h-4 mr-2" />
              Following
            </>
          ) : (
            <>
              <UserPlus className="w-4 h-4 mr-2" />
              Follow
            </>
          )}
        </button>
        
        {isFollowing(coachId) && (
          <button
            onClick={() => toggleNotifications(coachId)}
            className={`p-2 rounded-lg transition-colors ${
              getNotificationStatus(coachId)
                ? 'text-emerald-600 hover:bg-emerald-50'
                : 'text-gray-400 hover:bg-gray-50'
            }`}
            title={getNotificationStatus(coachId) ? 'Notifications on' : 'Notifications off'}
          >
            {getNotificationStatus(coachId) ? (
              <Bell className="w-4 h-4" />
            ) : (
              <BellOff className="w-4 h-4" />
            )}
          </button>
        )}
      </div>
    );
  }

  // Full coach discovery component
  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h2 className="text-2xl font-bold text-slate-900">Discover Coaches</h2>
            <p className="text-gray-600">Follow coaches to get updates on their latest resources</p>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-slate-900">{followedCoaches.length}</div>
            <div className="text-sm text-gray-600">Following</div>
          </div>
        </div>
      </div>

      {/* Featured Coaches */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {featuredCoaches.map((coach) => (
          <div key={coach.id} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
            <div className="p-6">
              {/* Coach Header */}
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center">
                  <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center mr-3">
                    <Users className="w-6 h-6 text-gray-600" />
                  </div>
                  <div>
                    <h3 className="font-bold text-slate-900">{coach.firstName} {coach.lastName}</h3>
                    <p className="text-sm text-emerald-600 font-medium">{coach.title}</p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-1">
                  <button
                    onClick={() => handleFollow(coach.id)}
                    disabled={loading}
                    className={`flex items-center px-3 py-1 rounded-lg text-sm font-semibold transition-colors ${
                      isFollowing(coach.id)
                        ? 'bg-emerald-100 text-emerald-800 hover:bg-emerald-200'
                        : 'bg-emerald-600 text-white hover:bg-emerald-700'
                    }`}
                  >
                    {isFollowing(coach.id) ? (
                      <>
                        <UserCheck className="w-3 h-3 mr-1" />
                        Following
                      </>
                    ) : (
                      <>
                        <UserPlus className="w-3 h-3 mr-1" />
                        Follow
                      </>
                    )}
                  </button>
                  
                  {isFollowing(coach.id) && (
                    <button
                      onClick={() => toggleNotifications(coach.id)}
                      className={`p-1 rounded transition-colors ${
                        getNotificationStatus(coach.id)
                          ? 'text-emerald-600 hover:bg-emerald-50'
                          : 'text-gray-400 hover:bg-gray-50'
                      }`}
                    >
                      {getNotificationStatus(coach.id) ? (
                        <Bell className="w-3 h-3" />
                      ) : (
                        <BellOff className="w-3 h-3" />
                      )}
                    </button>
                  )}
                </div>
              </div>

              {/* Location */}
              <div className="flex items-center text-sm text-gray-600 mb-3">
                <MapPin className="w-4 h-4 mr-1" />
                {coach.location}
              </div>

              {/* Stats */}
              <div className="grid grid-cols-3 gap-4 mb-4 text-center">
                <div>
                  <div className="font-bold text-slate-900">{coach.followers}</div>
                  <div className="text-xs text-gray-600">Followers</div>
                </div>
                <div>
                  <div className="font-bold text-slate-900">{coach.resources}</div>
                  <div className="text-xs text-gray-600">Resources</div>
                </div>
                <div>
                  <div className="flex items-center justify-center">
                    <Star className="w-3 h-3 text-yellow-400 mr-1" />
                    <span className="font-bold text-slate-900">{coach.rating}</span>
                  </div>
                  <div className="text-xs text-gray-600">Rating</div>
                </div>
              </div>

              {/* Specialties */}
              <div className="mb-4">
                <div className="flex flex-wrap gap-1">
                  {coach.specialties.slice(0, 2).map((specialty, index) => (
                    <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                      {specialty}
                    </span>
                  ))}
                  {coach.specialties.length > 2 && (
                    <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                      +{coach.specialties.length - 2}
                    </span>
                  )}
                </div>
              </div>

              {/* Recent Activity */}
              <div className="text-xs text-gray-500 bg-gray-50 rounded-lg p-3">
                <div className="flex items-center">
                  <Award className="w-3 h-3 mr-1" />
                  {coach.recentActivity}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Following List */}
      {followedCoaches.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-slate-900 mb-4">Coaches You Follow</h3>
          <div className="space-y-3">
            {followedCoaches.map((coachId) => {
              const coach = featuredCoaches.find(c => c.id === coachId);
              if (!coach) return null;
              
              return (
                <div key={coachId} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center">
                    <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center mr-3">
                      <Users className="w-4 h-4 text-gray-600" />
                    </div>
                    <div>
                      <div className="font-medium text-slate-900">{coach.firstName} {coach.lastName}</div>
                      <div className="text-sm text-gray-600">{coach.title}</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => toggleNotifications(coachId)}
                      className={`p-2 rounded-lg transition-colors ${
                        getNotificationStatus(coachId)
                          ? 'text-emerald-600 hover:bg-emerald-50'
                          : 'text-gray-400 hover:bg-gray-50'
                      }`}
                    >
                      {getNotificationStatus(coachId) ? (
                        <Bell className="w-4 h-4" />
                      ) : (
                        <BellOff className="w-4 h-4" />
                      )}
                    </button>
                    
                    <button
                      onClick={() => handleFollow(coachId)}
                      className="text-sm text-red-600 hover:text-red-700 font-medium"
                    >
                      Unfollow
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};

export default CoachFollowing;
import React, { useState } from 'react';
import { MessageCircle, Users, TrendingUp, Award, Bell, Search, Filter } from 'lucide-react';
import MessagingCenter from './MessagingCenter';
import DiscussionBoards from './DiscussionBoards';
import CoachFollowing from './CoachFollowing';

const CommunityHub: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'discussions' | 'messages' | 'following'>('discussions');

  const tabs = [
    {
      id: 'discussions' as const,
      label: 'Discussion Boards',
      icon: MessageCircle,
      description: 'Join coaching discussions and share knowledge'
    },
    {
      id: 'messages' as const,
      label: 'Direct Messages',
      icon: Users,
      description: 'Private conversations with other coaches'
    },
    {
      id: 'following' as const,
      label: 'Following',
      icon: Bell,
      description: 'Coaches you follow and community updates'
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Community Hub</h1>
              <p className="text-gray-600">Connect, learn, and grow with the coaching community</p>
            </div>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8">
            {tabs.map((tab) => {
              const IconComponent = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? 'border-emerald-500 text-emerald-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <IconComponent className="w-4 h-4 mr-2" />
                  {tab.label}
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* Tab Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'discussions' && <DiscussionBoards />}
        {activeTab === 'messages' && <MessagingCenter />}
        {activeTab === 'following' && <CoachFollowing />}
      </div>

      {/* Community Stats */}
      <div className="bg-white border-t border-gray-200 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 text-center">
            <div>
              <div className="text-2xl font-bold text-slate-900">1,247</div>
              <div className="text-sm text-gray-600">Active Coaches</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-slate-900">3,892</div>
              <div className="text-sm text-gray-600">Discussion Posts</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-slate-900">12,456</div>
              <div className="text-sm text-gray-600">Messages Sent</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-slate-900">567</div>
              <div className="text-sm text-gray-600">Resources Shared</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CommunityHub;
import React from 'react';
import { Link } from 'react-router-dom';

export default function ConfirmEmailPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center">
        <div className="mb-6">
          <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-blue-100">
            <svg
              className="h-8 w-8 text-blue-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
              />
            </svg>
          </div>
        </div>

        <h2 className="text-3xl font-bold text-gray-900 mb-4">Check Your Email</h2>

        <p className="text-gray-600 mb-6">
          We've sent a verification link to your email address. Please check your inbox and click
          the link to verify your account.
        </p>

        <div className="bg-blue-50 border border-blue-200 rounded-md p-4 mb-6">
          <p className="text-sm text-blue-800">
            <strong>Didn't receive the email?</strong>
            <br />
            Check your spam folder or wait a few minutes and try signing up again.
          </p>
        </div>

        <div className="space-y-3">
          <p className="text-sm text-gray-600">Already verified your email?</p>
          <Link
            to="/login"
            className="inline-flex justify-center w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Sign In
          </Link>

          <Link
            to="/"
            className="inline-flex justify-center w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Go to Home
          </Link>
        </div>
      </div>
    </div>
  );
}

import React, { useState } from 'react';
import { Mail, Phone, MessageCircle, ChevronDown, ChevronUp } from 'lucide-react';

const ContactFAQ: React.FC = () => {
  const [openFAQ, setOpenFAQ] = useState<number | null>(null);

  const faqs = [
    {
      question: 'How do I start selling on Coach2Coach?',
      answer: 'Simply create an account, set up your seller profile, and start uploading your coaching resources. Our team will review your content to ensure quality, and once approved, your resources will be available for purchase.'
    },
    {
      question: 'What commission rates do you charge?',
      answer: 'Our commission rates vary by membership tier: Free accounts pay 50%, Premium members pay 20%, and Pro members pay only 10% commission on sales.'
    },
    {
      question: 'What types of resources can I sell?',
      answer: 'You can sell any coaching-related content including practice plans, drill guides, playbooks, training videos, strategy documents, player development programs, and more.'
    },
    {
      question: 'How and when do I get paid?',
      answer: 'Payments are processed monthly via your preferred method (PayPal, direct deposit, etc.). You can track your earnings in real-time through your seller dashboard.'
    },
    {
      question: 'Is there a review process for uploaded content?',
      answer: 'Yes, all content goes through our quality review process to ensure it meets our standards and provides value to coaches. This typically takes 1-3 business days.'
    },
    {
      question: 'Can I offer both free and paid resources?',
      answer: 'Absolutely! Many coaches use free resources to build their following and showcase their expertise, then offer premium paid content for deeper value.'
    },
    {
      question: 'What support do you provide to sellers?',
      answer: 'We provide comprehensive seller support including marketing assistance, best practice guides, community forums, and dedicated customer service for Premium and Pro members.'
    },
    {
      question: 'Can I customize my seller profile?',
      answer: 'Yes! You can customize your profile with your bio, coaching experience, school/team branding, colors, and images to build your coaching brand.'
    }
  ];

  const toggleFAQ = (index: number) => {
    setOpenFAQ(openFAQ === index ? null : index);
  };

  return (
    <section className="py-20 bg-white">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-16">
          {/* Contact Section */}
          <div id="contact">
            <h2 className="text-4xl font-bold text-slate-900 mb-8">
              Get in <span className="text-emerald-600">Touch</span>
            </h2>
            <p className="text-xl text-gray-600 mb-8">
              Have questions about selling, buying, or using our platform? We're here to help you succeed.
            </p>

            <div className="space-y-6 mb-8">
              <div className="flex items-center">
                <div className="w-12 h-12 bg-emerald-100 rounded-full flex items-center justify-center mr-4">
                  <Mail className="w-6 h-6 text-emerald-600" />
                </div>
                <div>
                  <h4 className="font-semibold text-slate-900">Email Us</h4>
                  <a href="mailto:zach@coach2coachnetwork.com" className="text-emerald-600 hover:text-emerald-700">
                    zach@coach2coachnetwork.com
                  </a>
                </div>
              </div>

              <div className="flex items-center">
                <div className="w-12 h-12 bg-emerald-100 rounded-full flex items-center justify-center mr-4">
                  <Phone className="w-6 h-6 text-emerald-600" />
                </div>
                <div>
                  <h4 className="font-semibold text-slate-900">Call Us</h4>
                  <a href="tel:6783435084" className="text-emerald-600 hover:text-emerald-700">
                    678-343-5084
                  </a>
                </div>
              </div>

              <div className="flex items-center">
                <div className="w-12 h-12 bg-emerald-100 rounded-full flex items-center justify-center mr-4">
                  <MessageCircle className="w-6 h-6 text-emerald-600" />
                </div>
                <div>
                  <h4 className="font-semibold text-slate-900">Live Chat</h4>
                  <p className="text-gray-600">Available Mon-Fri 9AM-6PM EST</p>
                </div>
              </div>
            </div>

            {/* Contact Form */}
            <div className="bg-gray-50 rounded-xl p-6">
              <h3 className="text-xl font-semibold text-slate-900 mb-4">Send us a message</h3>
              <form className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <input 
                    type="text" 
                    placeholder="First Name"
                    className="px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                  <input 
                    type="text" 
                    placeholder="Last Name"
                    className="px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <input 
                  type="email" 
                  placeholder="Email Address"
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
                <textarea 
                  placeholder="Your Message"
                  rows={4}
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-emerald-500"
                ></textarea>
                <button className="w-full bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
                  Send Message
                </button>
              </form>
            </div>
          </div>

          {/* FAQ Section */}
          <div>
            <h2 className="text-4xl font-bold text-slate-900 mb-8">
              Frequently Asked <span className="text-emerald-600">Questions</span>
            </h2>

            <div className="space-y-4">
              {faqs.map((faq, index) => (
                <div key={index} className="border border-gray-200 rounded-lg">
                  <button
                    onClick={() => toggleFAQ(index)}
                    className="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-gray-50 transition-colors"
                  >
                    <span className="font-semibold text-slate-900">{faq.question}</span>
                    {openFAQ === index ? (
                      <ChevronUp className="w-5 h-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="w-5 h-5 text-gray-500" />
                    )}
                  </button>
                  {openFAQ === index && (
                    <div className="px-6 pb-4">
                      <p className="text-gray-600">{faq.answer}</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ContactFAQ;
import React, { useState } from 'react';
import { 
  Eye, 
  CheckCircle, 
  XCircle, 
  AlertTriangle, 
  Clock, 
  User, 
  Calendar,
  FileText,
  Download,
  Flag,
  MessageSquare
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { resourceStorage, profileStorage } from '../lib/localStorage';

interface ModerationItem {
  id: string;
  resourceId: string;
  title: string;
  description: string;
  coachName: string;
  coachId: string;
  uploadDate: string;
  status: 'pending' | 'approved' | 'rejected';
  price: number;
  category: string;
  sports: string[];
  levels: string[];
  flagReason?: string;
  reviewNotes?: string;
}

const ContentModerationQueue: React.FC = () => {
  const { user } = useAuth();
  const [selectedItem, setSelectedItem] = useState<ModerationItem | null>(null);
  const [filter, setFilter] = useState<'all' | 'pending' | 'flagged'>('pending');
  const [reviewNotes, setReviewNotes] = useState('');

  // Get pending resources for moderation
  const allResources = resourceStorage.getResources();
  const pendingResources = allResources.filter(r => r.status === 'pending');

  // Mock moderation items
  const moderationItems: ModerationItem[] = pendingResources.map(resource => {
    const profile = profileStorage.getProfileById(resource.coachId);
    return {
      id: `mod_${resource.id}`,
      resourceId: resource.id,
      title: resource.title,
      description: resource.description,
      coachName: profile ? `${profile.firstName} ${profile.lastName}` : 'Unknown Coach',
      coachId: resource.coachId,
      uploadDate: resource.createdAt,
      status: 'pending',
      price: resource.price,
      category: resource.category,
      sports: resource.sports,
      levels: resource.levels
    };
  });

  // Check if user is admin
  const isAdmin = user?.email === 'admin@coach2coachnetwork.com' || user?.email === 'zach@coach2coachnetwork.com';

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Access Denied</h2>
          <p className="text-gray-600">You don't have permission to access the moderation queue.</p>
        </div>
      </div>
    );
  }

  const handleApprove = (itemId: string) => {
    const item = moderationItems.find(i => i.id === itemId);
    if (item) {
      const resource = allResources.find(r => r.id === item.resourceId);
      if (resource) {
        const updatedResource = { ...resource, status: 'active' as const };
        resourceStorage.saveResource(updatedResource);
        alert(`✅ Resource "${item.title}" has been approved and is now live!`);
        window.location.reload();
      }
    }
  };

  const handleReject = (itemId: string) => {
    const item = moderationItems.find(i => i.id === itemId);
    if (item) {
      const reason = prompt('Reason for rejection (will be sent to coach):');
      if (reason) {
        const resource = allResources.find(r => r.id === item.resourceId);
        if (resource) {
          const updatedResource = { ...resource, status: 'rejected' as const };
          resourceStorage.saveResource(updatedResource);
          alert(`❌ Resource "${item.title}" has been rejected. Coach will be notified.`);
          window.location.reload();
        }
      }
    }
  };

  const filteredItems = moderationItems.filter(item => {
    if (filter === 'pending') return item.status === 'pending';
    if (filter === 'flagged') return item.flagReason;
    return true;
  });

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Content Moderation</h1>
              <p className="text-gray-600">Review and approve coaching resources</p>
            </div>
            <div className="flex items-center space-x-4">
              <select
                value={filter}
                onChange={(e) => setFilter(e.target.value as any)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option value="all">All Items</option>
                <option value="pending">Pending Review</option>
                <option value="flagged">Flagged Content</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <Clock className="w-6 h-6 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Pending Review</p>
                <p className="text-2xl font-bold text-slate-900">
                  {moderationItems.filter(i => i.status === 'pending').length}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Approved Today</p>
                <p className="text-2xl font-bold text-slate-900">0</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-red-100 rounded-lg">
                <XCircle className="w-6 h-6 text-red-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Rejected Today</p>
                <p className="text-2xl font-bold text-slate-900">0</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <Flag className="w-6 h-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Flagged Items</p>
                <p className="text-2xl font-bold text-slate-900">0</p>
              </div>
            </div>
          </div>
        </div>

        {/* Moderation Queue */}
        <div className="bg-white rounded-xl shadow-sm">
          {filteredItems.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-gray-200">
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Resource</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Coach</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Category</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Price</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Uploaded</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Status</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredItems.map((item) => (
                    <tr key={item.id} className="border-b border-gray-100 hover:bg-gray-50">
                      <td className="py-4 px-6">
                        <div className="flex items-start">
                          <div className="w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center mr-4">
                            <FileText className="w-6 h-6 text-emerald-600" />
                          </div>
                          <div>
                            <h3 className="font-semibold text-slate-900">{item.title}</h3>
                            <p className="text-sm text-gray-600 line-clamp-2">{item.description}</p>
                            <div className="flex flex-wrap gap-1 mt-2">
                              {item.sports.slice(0, 2).map((sport, index) => (
                                <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                                  {sport}
                                </span>
                              ))}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="py-4 px-6">
                        <div className="flex items-center">
                          <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center mr-2">
                            <User className="w-4 h-4 text-gray-600" />
                          </div>
                          <span className="text-slate-900">{item.coachName}</span>
                        </div>
                      </td>
                      <td className="py-4 px-6 text-slate-900">{item.category}</td>
                      <td className="py-4 px-6 text-slate-900">${item.price}</td>
                      <td className="py-4 px-6">
                        <div className="flex items-center text-sm text-gray-600">
                          <Calendar className="w-4 h-4 mr-1" />
                          {new Date(item.uploadDate).toLocaleDateString()}
                        </div>
                      </td>
                      <td className="py-4 px-6">
                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                          item.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                          item.status === 'approved' ? 'bg-green-100 text-green-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {item.status}
                        </span>
                      </td>
                      <td className="py-4 px-6">
                        <div className="flex space-x-2">
                          <button
                            onClick={() => setSelectedItem(item)}
                            className="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                            title="Review"
                          >
                            <Eye className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleApprove(item.id)}
                            className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                            title="Approve"
                          >
                            <CheckCircle className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleReject(item.id)}
                            className="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                            title="Reject"
                          >
                            <XCircle className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="text-center py-16">
              <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
              <h3 className="text-2xl font-bold text-slate-900 mb-4">All Caught Up!</h3>
              <p className="text-gray-600">No resources pending review at this time.</p>
            </div>
          )}
        </div>

        {/* Review Modal */}
        {selectedItem && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-2xl font-bold text-slate-900">Review Resource</h2>
                  <button
                    onClick={() => setSelectedItem(null)}
                    className="p-2 hover:bg-gray-100 rounded-lg"
                  >
                    <XCircle className="w-5 h-5" />
                  </button>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  {/* Resource Details */}
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-xl font-bold text-slate-900 mb-2">{selectedItem.title}</h3>
                      <p className="text-gray-700">{selectedItem.description}</p>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-sm font-medium text-gray-600">Category</label>
                        <p className="text-slate-900">{selectedItem.category}</p>
                      </div>
                      <div>
                        <label className="text-sm font-medium text-gray-600">Price</label>
                        <p className="text-slate-900">${selectedItem.price}</p>
                      </div>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-600">Sports & Levels</label>
                      <div className="flex flex-wrap gap-2 mt-1">
                        {selectedItem.sports.map((sport, index) => (
                          <span key={index} className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                            {sport}
                          </span>
                        ))}
                        {selectedItem.levels.map((level, index) => (
                          <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                            {level}
                          </span>
                        ))}
                      </div>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-600">Coach</label>
                      <div className="flex items-center mt-1">
                        <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center mr-2">
                          <User className="w-4 h-4 text-gray-600" />
                        </div>
                        <span className="text-slate-900">{selectedItem.coachName}</span>
                      </div>
                    </div>
                  </div>

                  {/* Review Actions */}
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Review Notes</label>
                      <textarea
                        value={reviewNotes}
                        onChange={(e) => setReviewNotes(e.target.value)}
                        placeholder="Add notes about this review (optional)..."
                        rows={4}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                      />
                    </div>

                    <div className="space-y-3">
                      <button
                        onClick={() => handleApprove(selectedItem.id)}
                        className="w-full bg-green-600 hover:bg-green-700 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
                      >
                        <CheckCircle className="w-5 h-5 mr-2" />
                        Approve Resource
                      </button>
                      
                      <button
                        onClick={() => handleReject(selectedItem.id)}
                        className="w-full bg-red-600 hover:bg-red-700 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
                      >
                        <XCircle className="w-5 h-5 mr-2" />
                        Reject Resource
                      </button>
                      
                      <button className="w-full border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors flex items-center justify-center">
                        <MessageSquare className="w-5 h-5 mr-2" />
                        Message Coach
                      </button>
                    </div>

                    {/* Quick Actions */}
                    <div className="pt-4 border-t border-gray-200">
                      <h4 className="font-semibold text-slate-900 mb-3">Quick Actions</h4>
                      <div className="space-y-2">
                        <button className="w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex items-center">
                          <Download className="w-4 h-4 text-gray-600 mr-3" />
                          <span className="text-sm">Download for Review</span>
                        </button>
                        <button className="w-full text-left p-3 hover:bg-gray-50 rounded-lg transition-colors flex items-center">
                          <Flag className="w-4 h-4 text-gray-600 mr-3" />
                          <span className="text-sm">Flag for Further Review</span>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ContentModerationQueue;
import React from 'react';
import { Shield, AlertTriangle, CheckCircle, XCircle, Mail, FileText } from 'lucide-react';

const CopyrightPolicy: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Header */}
          <div className="text-center mb-12">
            <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Shield className="w-8 h-8 text-emerald-600" />
            </div>
            <h1 className="text-4xl font-bold text-slate-900 mb-4">Copyright Policy</h1>
            <p className="text-xl text-gray-600">Coach2Coach Platform</p>
          </div>

          {/* Introduction */}
          <div className="mb-8 p-6 bg-emerald-50 rounded-lg border border-emerald-200">
            <p className="text-gray-700 leading-relaxed text-lg">
              Coach2Coach is a marketplace built on trust and originality. We take copyright law seriously 
              and require all sellers to upload only content they have created or have legal permission to distribute.
            </p>
          </div>

          {/* As a Seller Section */}
          <div className="mb-8">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
                <CheckCircle className="w-6 h-6 text-blue-600" />
              </div>
              <h2 className="text-3xl font-bold text-slate-900">As a Seller, You Agree That:</h2>
            </div>

            <div className="space-y-4 ml-16">
              <div className="flex items-start p-4 bg-green-50 rounded-lg border border-green-200">
                <CheckCircle className="w-6 h-6 text-green-600 mr-3 mt-1 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-green-800 mb-1">You created the content</h3>
                  <p className="text-green-700">The coaching materials, drills, playbooks, or resources are your original work</p>
                </div>
              </div>

              <div className="text-center text-gray-500 font-bold text-lg">OR</div>

              <div className="flex items-start p-4 bg-blue-50 rounded-lg border border-blue-200">
                <FileText className="w-6 h-6 text-blue-600 mr-3 mt-1 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-blue-800 mb-1">You have a license to use and sell the content</h3>
                  <p className="text-blue-700">You have written permission or legal rights to distribute and monetize the materials</p>
                </div>
              </div>

              <div className="flex items-start p-4 bg-red-50 rounded-lg border border-red-200">
                <XCircle className="w-6 h-6 text-red-600 mr-3 mt-1 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-red-800 mb-1">You are NOT uploading copyrighted material from:</h3>
                  <ul className="text-red-700 mt-2 space-y-1">
                    <li className="flex items-center">
                      <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                      Textbooks or published manuals
                    </li>
                    <li className="flex items-center">
                      <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                      Commercial websites or platforms
                    </li>
                    <li className="flex items-center">
                      <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                      Third-party platforms (e.g., Hudl, MaxPreps, TpT)
                    </li>
                    <li className="flex items-center">
                      <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                      Any other copyrighted materials without permission
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

          {/* We Reserve the Right Section */}
          <div className="mb-8">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mr-4">
                <AlertTriangle className="w-6 h-6 text-red-600" />
              </div>
              <h2 className="text-3xl font-bold text-slate-900">We Reserve the Right To:</h2>
            </div>

            <div className="space-y-4 ml-16">
              <div className="flex items-start p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                <AlertTriangle className="w-6 h-6 text-yellow-600 mr-3 mt-1 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-yellow-800 mb-1">Remove infringing content</h3>
                  <p className="text-yellow-700">We can remove any infringing or suspicious content without prior notice</p>
                </div>
              </div>

              <div className="flex items-start p-4 bg-red-50 rounded-lg border border-red-200">
                <XCircle className="w-6 h-6 text-red-600 mr-3 mt-1 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-red-800 mb-1">Suspend or ban repeat offenders</h3>
                  <p className="text-red-700">Accounts that repeatedly violate copyright will be permanently removed</p>
                </div>
              </div>

              <div className="flex items-start p-4 bg-gray-50 rounded-lg border border-gray-200">
                <Shield className="w-6 h-6 text-gray-600 mr-3 mt-1 flex-shrink-0" />
                <div>
                  <h3 className="font-semibold text-gray-800 mb-1">Cooperate with authorities</h3>
                  <p className="text-gray-700">We will work with copyright holders and legal authorities as required by law</p>
                </div>
              </div>
            </div>
          </div>

          {/* Important Notice */}
          <div className="bg-slate-900 text-white rounded-xl p-6 mb-8">
            <div className="flex items-start">
              <AlertTriangle className="w-8 h-8 text-yellow-400 mr-4 mt-1 flex-shrink-0" />
              <div>
                <h3 className="text-xl font-bold mb-2">Important Notice</h3>
                <p className="text-gray-300 leading-relaxed">
                  Copyright infringement is a serious matter. If you're unsure about your rights to use or sell 
                  certain content, consult with a legal professional before uploading. When in doubt, only upload 
                  content you have personally created.
                </p>
              </div>
            </div>
          </div>

          {/* Contact Section */}
          <div className="text-center p-6 bg-emerald-50 rounded-lg border border-emerald-200">
            <div className="flex items-center justify-center mb-4">
              <Mail className="w-6 h-6 text-emerald-600 mr-2" />
              <h3 className="text-xl font-bold text-emerald-800">Questions About Copyright?</h3>
            </div>
            <p className="text-emerald-700 mb-4">
              If you have questions about copyright or need to report infringement, contact us:
            </p>
            <a 
              href="mailto:zach@coach2coachnetwork.com" 
              className="inline-flex items-center bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              <Mail className="w-4 h-4 mr-2" />
              zach@coach2coachnetwork.com
            </a>
          </div>

          {/* Footer */}
          <div className="mt-8 pt-6 border-t border-gray-200 text-center">
            <p className="text-sm text-gray-500">
              This policy helps protect the intellectual property rights of all coaches and creators on our platform.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CopyrightPolicy;
import React, { useState } from 'react';
import { User, Camera, MapPin, Award, Plus, X, ArrowRight, ArrowLeft } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { db } from '../lib/supabase';
import { useNavigate } from 'react-router-dom';

const CreateSellerProfile: React.FC = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({
    // Basic Info
    firstName: user?.firstName || '',
    lastName: user?.lastName || '',
    email: user?.email || '',
    phone: '',
    location: '',
    
    // Professional Info
    title: '',
    yearsExperience: '',
    bio: '',
    
    // Specialties & Sports
    sports: [] as string[],
    levels: [] as string[],
    specialties: [] as string[],
    
    // Achievements
    achievements: [''],
    
    // Social Links
    website: '',
    twitter: '',
    instagram: '',
    linkedin: ''
  });

  const totalSteps = 4;

  const sportsOptions = [
    'Basketball', 'Football', 'Baseball', 'Soccer', 'Volleyball', 
    'Tennis', 'Track & Field', 'Swimming', 'Wrestling', 'Golf',
    'Softball', 'Cross Country', 'Lacrosse', 'Hockey'
  ];

  const levelOptions = [
    'Youth (Ages 6-12)', 'Middle School', 'High School', 
    'Travel/Club', 'Collegiate', 'Professional', 'Adult Recreation'
  ];

  const specialtyOptions = [
    'Player Development', 'Team Strategy', 'Skill Training', 
    'Conditioning', 'Mental Training', 'Leadership', 'Recruiting',
    'Game Planning', 'Practice Planning', 'Injury Prevention'
  ];

  const handleArrayToggle = (array: string[], value: string, field: keyof typeof formData) => {
    const newArray = array.includes(value) 
      ? array.filter(item => item !== value)
      : [...array, value];
    setFormData({ ...formData, [field]: newArray });
  };

  const addAchievement = () => {
    setFormData({
      ...formData,
      achievements: [...formData.achievements, '']
    });
  };

  const updateAchievement = (index: number, value: string) => {
    const newAchievements = [...formData.achievements];
    newAchievements[index] = value;
    setFormData({ ...formData, achievements: newAchievements });
  };

  const removeAchievement = (index: number) => {
    const newAchievements = formData.achievements.filter((_, i) => i !== index);
    setFormData({ ...formData, achievements: newAchievements });
  };

  const nextStep = () => {
    if (currentStep < totalSteps) setCurrentStep(currentStep + 1);
  };

  const prevStep = () => {
    if (currentStep > 1) setCurrentStep(currentStep - 1);
  };

  const handleSubmit = async () => {
    if (!user) {
      setError('You must be logged in to create a profile');
      return;
    }

    if (!formData.firstName.trim() || !formData.lastName.trim() || !formData.title.trim() ||
        !formData.bio.trim() || !formData.location.trim() || !formData.yearsExperience) {
      setError('Please fill in all required fields');
      return;
    }

    if (formData.sports.length === 0) {
      setError('Please select at least one sport you coach');
      return;
    }

    if (formData.levels.length === 0) {
      setError('Please select at least one coaching level');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const profileData = {
        user_id: user.id,
        email: user.email,
        first_name: formData.firstName.trim(),
        last_name: formData.lastName.trim(),
        title: formData.title.trim(),
        bio: formData.bio.trim(),
        location: formData.location.trim(),
        years_experience: formData.yearsExperience,
        sports: formData.sports,
        levels: formData.levels,
        specialties: formData.specialties,
        achievements: formData.achievements.filter(a => a.trim() !== ''),
        website: formData.website.trim(),
        social_links: {
          twitter: formData.twitter.trim(),
          instagram: formData.instagram.trim(),
          linkedin: formData.linkedin.trim()
        }
      };

      console.log('Creating profile for:', formData.firstName, formData.lastName);

      try {
        const result = await db.createCoachProfile(profileData);

        if (!result || !result.data) {
          throw new Error('Profile creation returned no data');
        }

        console.log('SUCCESS! Profile created:', result.data);
        alert('Profile created successfully!');
        navigate('/profile');
      } catch (dbError: any) {
        if (dbError.message?.includes('duplicate') || dbError.code === '23505') {
          setError('You already have a profile. Redirecting...');
          setTimeout(() => navigate('/profile'), 2000);
        } else {
          throw dbError;
        }
      }
    } catch (error: any) {
      console.error('Error saving profile:', error);
      setError(error.message || 'Failed to create profile. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-3xl font-bold text-slate-900">Complete Your Coach Profile</h1>
            <span className="text-sm text-gray-600">Step {currentStep} of {totalSteps}</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-emerald-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(currentStep / totalSteps) * 100}%` }}
            ></div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Error Message */}
          {error && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-700">{error}</p>
            </div>
          )}

          {/* Step 1: Basic Information */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <div className="w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                  <User className="w-12 h-12 text-gray-400" />
                </div>
                <button className="text-emerald-600 hover:text-emerald-700 flex items-center mx-auto">
                  <Camera className="w-4 h-4 mr-2" />
                  Upload Profile Photo
                </button>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">First Name *</label>
                  <input
                    type="text"
                    value={formData.firstName}
                    onChange={(e) => setFormData({...formData, firstName: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Last Name *</label>
                  <input
                    type="text"
                    value={formData.lastName}
                    onChange={(e) => setFormData({...formData, lastName: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Email Address *</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  placeholder="Enter your email address"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  required
                />
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Phone Number</label>
                  <input
                    type="tel"
                    value={formData.phone}
                    onChange={(e) => setFormData({...formData, phone: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Location *</label>
                  <input
                    type="text"
                    value={formData.location}
                    onChange={(e) => setFormData({...formData, location: e.target.value})}
                    placeholder="City, State"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    required
                  />
                </div>
              </div>
            </div>
          )}

          {/* Step 2: Professional Information */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-slate-900 mb-6">Professional Information</h2>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Professional Title *</label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => setFormData({...formData, title: e.target.value})}
                  placeholder="e.g., Basketball Coach & Skills Trainer"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Years of Coaching Experience *</label>
                <select
                  value={formData.yearsExperience}
                  onChange={(e) => setFormData({...formData, yearsExperience: e.target.value})}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  required
                >
                  <option value="">Select experience level</option>
                  <option value="1-2">1-2 years</option>
                  <option value="3-5">3-5 years</option>
                  <option value="6-10">6-10 years</option>
                  <option value="11-15">11-15 years</option>
                  <option value="16-20">16-20 years</option>
                  <option value="20+">20+ years</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Bio *</label>
                <textarea
                  value={formData.bio}
                  onChange={(e) => setFormData({...formData, bio: e.target.value})}
                  placeholder="Tell other coaches about your background, coaching philosophy, and what makes you unique..."
                  rows={5}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  required
                />
                <p className="text-sm text-gray-500 mt-1">This will be displayed on your public profile</p>
              </div>
            </div>
          )}

          {/* Step 3: Specialties & Expertise */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-slate-900 mb-6">Your Coaching Expertise</h2>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Sports You Coach *</label>
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                  {sportsOptions.map((sport) => (
                    <label key={sport} className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.sports.includes(sport)}
                        onChange={() => handleArrayToggle(formData.sports, sport, 'sports')}
                        className="sr-only"
                      />
                      <div className={`px-3 py-2 rounded-lg border text-sm font-medium transition-colors ${
                        formData.sports.includes(sport)
                          ? 'bg-emerald-100 border-emerald-500 text-emerald-800'
                          : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}>
                        {sport}
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Levels You Coach *</label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {levelOptions.map((level) => (
                    <label key={level} className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.levels.includes(level)}
                        onChange={() => handleArrayToggle(formData.levels, level, 'levels')}
                        className="sr-only"
                      />
                      <div className={`px-3 py-2 rounded-lg border text-sm font-medium transition-colors ${
                        formData.levels.includes(level)
                          ? 'bg-emerald-100 border-emerald-500 text-emerald-800'
                          : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}>
                        {level}
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Coaching Specialties</label>
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                  {specialtyOptions.map((specialty) => (
                    <label key={specialty} className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.specialties.includes(specialty)}
                        onChange={() => handleArrayToggle(formData.specialties, specialty, 'specialties')}
                        className="sr-only"
                      />
                      <div className={`px-3 py-2 rounded-lg border text-sm font-medium transition-colors ${
                        formData.specialties.includes(specialty)
                          ? 'bg-emerald-100 border-emerald-500 text-emerald-800'
                          : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}>
                        {specialty}
                      </div>
                    </label>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Step 4: Achievements & Social Links */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-slate-900 mb-6">Achievements & Links</h2>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Achievements & Accomplishments</label>
                <div className="space-y-3">
                  {formData.achievements.map((achievement, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <input
                        type="text"
                        value={achievement}
                        onChange={(e) => updateAchievement(index, e.target.value)}
                        placeholder="e.g., State Championship Winner 2023"
                        className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                      />
                      {formData.achievements.length > 1 && (
                        <button
                          onClick={() => removeAchievement(index)}
                          className="p-2 text-red-500 hover:bg-red-50 rounded-lg"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  ))}
                  <button
                    onClick={addAchievement}
                    className="flex items-center text-emerald-600 hover:text-emerald-700"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add Achievement
                  </button>
                </div>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Website</label>
                  <input
                    type="url"
                    value={formData.website}
                    onChange={(e) => setFormData({...formData, website: e.target.value})}
                    placeholder="https://yourwebsite.com"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Twitter</label>
                  <input
                    type="text"
                    value={formData.twitter}
                    onChange={(e) => setFormData({...formData, twitter: e.target.value})}
                    placeholder="@yourusername"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Instagram</label>
                  <input
                    type="text"
                    value={formData.instagram}
                    onChange={(e) => setFormData({...formData, instagram: e.target.value})}
                    placeholder="@yourusername"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">LinkedIn</label>
                  <input
                    type="url"
                    value={formData.linkedin}
                    onChange={(e) => setFormData({...formData, linkedin: e.target.value})}
                    placeholder="https://linkedin.com/in/yourprofile"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
              </div>
            </div>
          )}

          {/* Navigation Buttons */}
          <div className="flex justify-between pt-8 border-t border-gray-200">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`flex items-center px-6 py-3 rounded-lg font-semibold transition-colors ${
                currentStep === 1
                  ? 'text-gray-400 cursor-not-allowed'
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Previous
            </button>

            {currentStep < totalSteps ? (
              <button
                onClick={nextStep}
                className="flex items-center px-6 py-3 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg font-semibold transition-colors"
              >
                Next
                <ArrowRight className="w-4 h-4 ml-2" />
              </button>
            ) : (
              <button
                onClick={handleSubmit}
                disabled={loading}
                className="flex items-center px-6 py-3 bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white rounded-lg font-semibold transition-colors"
              >
                {loading ? 'Creating Profile...' : 'Create Profile'}
                <ArrowRight className="w-4 h-4 ml-2" />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateSellerProfile;
import React, { useState, useEffect } from 'react';
import { 
  MessageSquare, 
  Plus, 
  Search, 
  Filter, 
  Pin, 
  Lock, 
  ThumbsUp, 
  ThumbsDown,
  Reply,
  User,
  Calendar,
  Eye,
  TrendingUp,
  Clock,
  Award,
  Tag
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { discussions, DiscussionBoard, DiscussionPost, DiscussionReply, initializeMessagingData } from '../lib/messaging';
import { profileStorage, userStorage } from '../lib/localStorage';

const DiscussionBoards: React.FC = () => {
  const { user } = useAuth();
  const [boards, setBoards] = useState<DiscussionBoard[]>([]);
  const [selectedBoard, setSelectedBoard] = useState<DiscussionBoard | null>(null);
  const [posts, setPosts] = useState<DiscussionPost[]>([]);
  const [selectedPost, setSelectedPost] = useState<DiscussionPost | null>(null);
  const [replies, setReplies] = useState<DiscussionReply[]>([]);
  const [view, setView] = useState<'boards' | 'posts' | 'post'>('boards');
  const [showNewBoard, setShowNewBoard] = useState(false);
  const [showNewPost, setShowNewPost] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');

  useEffect(() => {
    initializeMessagingData();
    loadBoards();
  }, []);

  useEffect(() => {
    if (selectedBoard) {
      loadPosts(selectedBoard.id);
    }
  }, [selectedBoard]);

  useEffect(() => {
    if (selectedPost) {
      loadReplies(selectedPost.id);
    }
  }, [selectedPost]);

  const loadBoards = async () => {
    try {
      const boardsData = await discussions.getBoards();
      setBoards(boardsData);
    } catch (error) {
      console.error('Error loading boards:', error);
    }
  };

  const loadPosts = async (boardId: string) => {
    try {
      const postsData = await discussions.getPosts(boardId);
      setPosts(postsData);
    } catch (error) {
      console.error('Error loading posts:', error);
    }
  };

  const loadReplies = async (postId: string) => {
    try {
      const repliesData = await discussions.getReplies(postId);
      setReplies(repliesData);
    } catch (error) {
      console.error('Error loading replies:', error);
    }
  };

  const getAuthorName = (authorId: string) => {
    const profile = profileStorage.getProfileByUserId(authorId);
    const userProfile = userStorage.getUserById(authorId);
    
    if (profile) {
      return `${profile.firstName} ${profile.lastName}`;
    }
    if (userProfile) {
      return `${userProfile.firstName} ${userProfile.lastName}`;
    }
    return 'Coach';
  };

  const getAuthorTitle = (authorId: string) => {
    const profile = profileStorage.getProfileByUserId(authorId);
    return profile?.title || 'Coach';
  };

  const formatTimeAgo = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours}h ago`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays}d ago`;
    
    return date.toLocaleDateString();
  };

  const categories = ['General', 'Sport Specific', 'Age Group', 'Strategy', 'Training', 'Equipment'];

  const filteredBoards = boards.filter(board => {
    const matchesSearch = searchTerm === '' || 
      board.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      board.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = categoryFilter === 'all' || board.category === categoryFilter;
    
    return matchesSearch && matchesCategory;
  });

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <MessageSquare className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Discussion Boards</h2>
          <p className="text-gray-600">Sign in to join coaching discussions and share knowledge.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Discussion Boards</h1>
              <p className="text-gray-600">Connect with coaches, share knowledge, and learn from the community</p>
            </div>
            
            {view === 'boards' && (
              <button
                onClick={() => setShowNewBoard(true)}
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold flex items-center transition-colors"
              >
                <Plus className="w-4 h-4 mr-2" />
                New Board
              </button>
            )}
            
            {view === 'posts' && selectedBoard && (
              <button
                onClick={() => setShowNewPost(true)}
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold flex items-center transition-colors"
              >
                <Plus className="w-4 h-4 mr-2" />
                New Post
              </button>
            )}
          </div>
        </div>

        {/* Breadcrumb Navigation */}
        {view !== 'boards' && (
          <div className="mb-6">
            <nav className="flex items-center space-x-2 text-sm">
              <button
                onClick={() => {
                  setView('boards');
                  setSelectedBoard(null);
                  setSelectedPost(null);
                }}
                className="text-emerald-600 hover:text-emerald-700"
              >
                Discussion Boards
              </button>
              {selectedBoard && (
                <>
                  <span className="text-gray-400">/</span>
                  <button
                    onClick={() => {
                      setView('posts');
                      setSelectedPost(null);
                    }}
                    className="text-emerald-600 hover:text-emerald-700"
                  >
                    {selectedBoard.title}
                  </button>
                </>
              )}
              {selectedPost && (
                <>
                  <span className="text-gray-400">/</span>
                  <span className="text-gray-600">{selectedPost.title}</span>
                </>
              )}
            </nav>
          </div>
        )}

        {/* Boards View */}
        {view === 'boards' && (
          <div>
            {/* Search and Filters */}
            <div className="bg-white rounded-xl shadow-sm p-4 mb-8">
              <div className="flex flex-col lg:flex-row gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <input
                      type="text"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      placeholder="Search discussion boards..."
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                </div>
                
                <select
                  value={categoryFilter}
                  onChange={(e) => setCategoryFilter(e.target.value)}
                  className="px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                >
                  <option value="all">All Categories</option>
                  {categories.map(category => (
                    <option key={category} value={category}>{category}</option>
                  ))}
                </select>
              </div>
            </div>

            {/* Boards Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredBoards.map((board) => (
                <div
                  key={board.id}
                  onClick={() => {
                    setSelectedBoard(board);
                    setView('posts');
                  }}
                  className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-all cursor-pointer hover:scale-[1.02]"
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        {board.isPinned && <Pin className="w-4 h-4 text-emerald-600 mr-2" />}
                        {board.isLocked && <Lock className="w-4 h-4 text-red-600 mr-2" />}
                        <h3 className="text-lg font-bold text-slate-900">{board.title}</h3>
                      </div>
                      <p className="text-gray-600 text-sm mb-3 line-clamp-2">{board.description}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="flex flex-wrap gap-1">
                      <span className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                        {board.category}
                      </span>
                      {board.sport && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                          {board.sport}
                        </span>
                      )}
                      {board.level && (
                        <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">
                          {board.level}
                        </span>
                      )}
                    </div>
                    
                    <div className="text-right">
                      <div className="text-lg font-bold text-slate-900">{board.postCount}</div>
                      <div className="text-xs text-gray-600">posts</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Posts View */}
        {view === 'posts' && selectedBoard && (
          <div>
            <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h2 className="text-2xl font-bold text-slate-900">{selectedBoard.title}</h2>
                  <p className="text-gray-600">{selectedBoard.description}</p>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-slate-900">{posts.length}</div>
                  <div className="text-sm text-gray-600">posts</div>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              {posts.map((post) => (
                <div
                  key={post.id}
                  onClick={() => {
                    setSelectedPost(post);
                    setView('post');
                  }}
                  className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-all cursor-pointer"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        {post.isPinned && <Pin className="w-4 h-4 text-emerald-600 mr-2" />}
                        <h3 className="text-lg font-bold text-slate-900">{post.title}</h3>
                        <span className={`ml-2 px-2 py-1 text-xs rounded-full ${
                          post.postType === 'question' ? 'bg-blue-100 text-blue-800' :
                          post.postType === 'resource_share' ? 'bg-purple-100 text-purple-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {post.postType}
                        </span>
                      </div>
                      
                      <p className="text-gray-600 mb-3 line-clamp-2">{post.content}</p>
                      
                      <div className="flex items-center space-x-4 text-sm text-gray-500">
                        <div className="flex items-center">
                          <User className="w-4 h-4 mr-1" />
                          <span>{getAuthorName(post.authorId)}</span>
                        </div>
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-1" />
                          <span>{formatTimeAgo(post.createdAt)}</span>
                        </div>
                        <div className="flex items-center">
                          <Reply className="w-4 h-4 mr-1" />
                          <span>{post.replyCount} replies</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2 ml-4">
                      <div className="flex items-center">
                        <ThumbsUp className="w-4 h-4 text-green-600 mr-1" />
                        <span className="text-sm text-gray-600">{post.upvotes}</span>
                      </div>
                      <div className="flex items-center">
                        <ThumbsDown className="w-4 h-4 text-red-600 mr-1" />
                        <span className="text-sm text-gray-600">{post.downvotes}</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Individual Post View */}
        {view === 'post' && selectedPost && (
          <div className="space-y-6">
            {/* Post Content */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center mb-2">
                    {selectedPost.isPinned && <Pin className="w-4 h-4 text-emerald-600 mr-2" />}
                    <h1 className="text-2xl font-bold text-slate-900">{selectedPost.title}</h1>
                    <span className={`ml-3 px-2 py-1 text-xs rounded-full ${
                      selectedPost.postType === 'question' ? 'bg-blue-100 text-blue-800' :
                      selectedPost.postType === 'resource_share' ? 'bg-purple-100 text-purple-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {selectedPost.postType}
                    </span>
                  </div>
                  
                  <div className="flex items-center space-x-4 text-sm text-gray-500 mb-4">
                    <div className="flex items-center">
                      <User className="w-4 h-4 mr-1" />
                      <span>{getAuthorName(selectedPost.authorId)}</span>
                    </div>
                    <div className="flex items-center">
                      <Calendar className="w-4 h-4 mr-1" />
                      <span>{formatTimeAgo(selectedPost.createdAt)}</span>
                    </div>
                  </div>
                  
                  <div className="prose max-w-none">
                    <p className="text-gray-700 leading-relaxed">{selectedPost.content}</p>
                  </div>
                </div>
                
                <div className="flex flex-col items-center space-y-2 ml-6">
                  <button className="flex flex-col items-center p-2 hover:bg-green-50 rounded-lg transition-colors">
                    <ThumbsUp className="w-5 h-5 text-green-600" />
                    <span className="text-sm text-gray-600">{selectedPost.upvotes}</span>
                  </button>
                  <button className="flex flex-col items-center p-2 hover:bg-red-50 rounded-lg transition-colors">
                    <ThumbsDown className="w-5 h-5 text-red-600" />
                    <span className="text-sm text-gray-600">{selectedPost.downvotes}</span>
                  </button>
                </div>
              </div>
            </div>

            {/* Replies */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h3 className="text-lg font-bold text-slate-900 mb-6">
                Replies ({replies.length})
              </h3>
              
              {/* Reply Form */}
              <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                <textarea
                  placeholder="Share your thoughts..."
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 resize-none"
                />
                <div className="flex justify-end mt-3">
                  <button className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors">
                    Post Reply
                  </button>
                </div>
              </div>

              {/* Replies List */}
              <div className="space-y-4">
                {replies.map((reply) => (
                  <div key={reply.id} className="border-l-4 border-emerald-200 pl-4">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                            <User className="w-4 h-4 text-gray-600" />
                          </div>
                          <span className="font-semibold text-slate-900">{getAuthorName(reply.authorId)}</span>
                          <span className="text-sm text-gray-500">{formatTimeAgo(reply.createdAt)}</span>
                        </div>
                        <p className="text-gray-700 leading-relaxed">{reply.content}</p>
                      </div>
                      
                      <div className="flex items-center space-x-2 ml-4">
                        <button className="flex items-center text-sm text-gray-600 hover:text-green-600">
                          <ThumbsUp className="w-4 h-4 mr-1" />
                          {reply.upvotes}
                        </button>
                        <button className="flex items-center text-sm text-gray-600 hover:text-red-600">
                          <ThumbsDown className="w-4 h-4 mr-1" />
                          {reply.downvotes}
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* New Board Modal */}
        {showNewBoard && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl max-w-md w-full">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-xl font-bold text-slate-900">Create Discussion Board</h3>
                  <button
                    onClick={() => setShowNewBoard(false)}
                    className="p-2 hover:bg-gray-100 rounded-lg"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>

                <form className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
                    <input
                      type="text"
                      placeholder="e.g., Basketball Coaching Tips"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                    <textarea
                      placeholder="Describe what this board is for..."
                      rows={3}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                    <select className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500">
                      {categories.map(category => (
                        <option key={category} value={category}>{category}</option>
                      ))}
                    </select>
                  </div>

                  <div className="flex space-x-4">
                    <button
                      type="button"
                      onClick={() => setShowNewBoard(false)}
                      className="flex-1 border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white py-3 rounded-lg font-semibold transition-colors"
                    >
                      Create Board
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DiscussionBoards;
import React, { useState } from 'react';
import { X, AlertTriangle, DollarSign, Send, Calendar } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface DisputeModalProps {
  isOpen: boolean;
  onClose: () => void;
  purchase: {
    id: string;
    resourceTitle: string;
    amount: number;
    purchaseDate: string;
  };
}

const DisputeModal: React.FC<DisputeModalProps> = ({
  isOpen,
  onClose,
  purchase
}) => {
  const { user } = useAuth();
  const [reason, setReason] = useState('');
  const [details, setDetails] = useState('');
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);

  const disputeReasons = [
    { 
      value: 'not_as_described', 
      label: 'Not as Described', 
      description: 'The resource content does not match the description' 
    },
    { 
      value: 'technical_issue', 
      label: 'Technical Issue', 
      description: 'Files are corrupted, missing, or cannot be opened' 
    },
    { 
      value: 'quality_issue', 
      label: 'Quality Issue', 
      description: 'The resource is of poor quality or incomplete' 
    },
    { 
      value: 'copyright_claim', 
      label: 'Copyright Concern', 
      description: 'This appears to be copyrighted material' 
    },
    { 
      value: 'other', 
      label: 'Other Issue', 
      description: 'Other reason not listed above' 
    }
  ];

  if (!isOpen) return null;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user || !reason || !details.trim()) return;

    setLoading(true);

    try {
      const response = await fetch('/api/disputes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.id,
          purchaseId: purchase.id,
          reason,
          details: details.trim()
        })
      });

      const data = await response.json();

      if (data.success) {
        setSubmitted(true);
        setTimeout(() => {
          onClose();
          setSubmitted(false);
          setReason('');
          setDetails('');
        }, 3000);
      } else {
        throw new Error(data.error || 'Failed to submit dispute');
      }
    } catch (error) {
      console.error('Error submitting dispute:', error);
      alert('Failed to submit dispute. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const daysSincePurchase = Math.floor(
    (Date.now() - new Date(purchase.purchaseDate).getTime()) / (1000 * 60 * 60 * 24)
  );

  if (submitted) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-8 text-center">
          <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <AlertTriangle className="w-8 h-8 text-blue-600" />
          </div>
          <h3 className="text-xl font-bold text-slate-900 mb-2">Dispute Submitted</h3>
          <p className="text-gray-600 mb-4">
            We've received your dispute and will review it within 2-3 business days. 
            You'll receive an email update once we've made a decision.
          </p>
          <p className="text-sm text-gray-500">
            Reference ID: {purchase.id.slice(0, 8)}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center mr-3">
                <AlertTriangle className="w-5 h-5 text-orange-600" />
              </div>
              <div>
                <h2 className="text-xl font-bold text-slate-900">Open Dispute</h2>
                <p className="text-sm text-gray-600">Request a refund or report an issue</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Purchase Info */}
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <h3 className="font-semibold text-slate-900 mb-2">Purchase Details</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">Resource:</span>
                <span className="font-medium text-slate-900">{purchase.resourceTitle}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Amount Paid:</span>
                <span className="font-medium text-slate-900">${purchase.amount.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Purchase Date:</span>
                <span className="font-medium text-slate-900">
                  {new Date(purchase.purchaseDate).toLocaleDateString()}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Days Since Purchase:</span>
                <span className={`font-medium ${daysSincePurchase > 30 ? 'text-red-600' : 'text-slate-900'}`}>
                  {daysSincePurchase} days
                </span>
              </div>
            </div>
          </div>

          {/* Dispute Eligibility Warning */}
          {daysSincePurchase > 30 && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-start">
                <AlertTriangle className="w-5 h-5 text-red-600 mr-3 mt-0.5" />
                <div>
                  <h4 className="font-semibold text-red-800 mb-1">Dispute Window Expired</h4>
                  <p className="text-red-700 text-sm">
                    Disputes must be opened within 30 days of purchase. Please contact support 
                    directly for assistance with older purchases.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Dispute Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                What's the issue? *
              </label>
              <div className="space-y-3">
                {disputeReasons.map((reasonOption) => (
                  <label key={reasonOption.value} className="flex items-start cursor-pointer">
                    <input
                      type="radio"
                      name="reason"
                      value={reasonOption.value}
                      checked={reason === reasonOption.value}
                      onChange={(e) => setReason(e.target.value)}
                      className="mt-1 mr-3"
                      required
                      disabled={daysSincePurchase > 30}
                    />
                    <div>
                      <div className="font-medium text-slate-900">{reasonOption.label}</div>
                      <div className="text-sm text-gray-600">{reasonOption.description}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Detailed Explanation *
              </label>
              <textarea
                value={details}
                onChange={(e) => setDetails(e.target.value)}
                placeholder="Please explain the issue in detail. Include what you expected vs. what you received..."
                rows={5}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                required
                disabled={daysSincePurchase > 30}
              />
              <p className="text-xs text-gray-500 mt-1">
                Detailed explanations help us resolve disputes faster
              </p>
            </div>

            {/* Refund Info */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start">
                <DollarSign className="w-5 h-5 text-blue-600 mr-3 mt-0.5" />
                <div>
                  <h4 className="font-semibold text-blue-800 mb-1">Refund Process</h4>
                  <p className="text-blue-700 text-sm">
                    If approved, refunds are processed back to your original payment method within 5-10 business days. 
                    You'll lose access to the resource upon refund approval.
                  </p>
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <div className="flex space-x-4">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={loading || !reason || !details.trim() || daysSincePurchase > 30}
                className="flex-1 bg-orange-600 hover:bg-orange-700 disabled:bg-orange-400 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
              >
                {loading ? (
                  'Submitting...'
                ) : (
                  <>
                    <Send className="w-4 h-4 mr-2" />
                    Submit Dispute
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default DisputeModal;
import React from 'react';
import { Shield, Mail, FileText, AlertTriangle, CheckCircle, Clock } from 'lucide-react';

const DMCAPolicy: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Header */}
          <div className="text-center mb-12">
            <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Shield className="w-8 h-8 text-emerald-600" />
            </div>
            <h1 className="text-4xl font-bold text-slate-900 mb-4">DMCA Takedown Policy</h1>
            <p className="text-xl text-gray-600">Digital Millennium Copyright Act (DMCA) Policy</p>
          </div>

          {/* Introduction */}
          <div className="mb-8 p-6 bg-blue-50 rounded-lg border border-blue-200">
            <p className="text-gray-700 leading-relaxed text-lg">
              If you believe your copyrighted work has been uploaded or distributed on Coach2Coach 
              without your permission, you may file a DMCA takedown request.
            </p>
          </div>

          {/* How to Submit Section */}
          <div className="mb-8">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-emerald-100 rounded-full flex items-center justify-center mr-4">
                <Mail className="w-6 h-6 text-emerald-600" />
              </div>
              <h2 className="text-3xl font-bold text-slate-900">📥 To Submit a Takedown Request:</h2>
            </div>

            {/* Contact Info */}
            <div className="bg-emerald-50 rounded-lg p-6 border border-emerald-200 mb-6">
              <div className="flex items-center mb-4">
                <Mail className="w-6 h-6 text-emerald-600 mr-3" />
                <div>
                  <h3 className="text-lg font-bold text-emerald-800">Email:</h3>
                  <a 
                    href="mailto:zach@coach2coachnetwork.com?subject=DMCA Takedown Notice" 
                    className="text-emerald-600 hover:text-emerald-700 font-semibold text-lg"
                  >
                    zach@coach2coachnetwork.com
                  </a>
                </div>
              </div>
              <div className="flex items-center">
                <FileText className="w-6 h-6 text-emerald-600 mr-3" />
                <div>
                  <h3 className="text-lg font-bold text-emerald-800">Subject Line:</h3>
                  <span className="text-emerald-700 font-semibold">"DMCA Takedown Notice"</span>
                </div>
              </div>
            </div>

            {/* Required Information */}
            <div className="mb-6">
              <h3 className="text-xl font-bold text-slate-900 mb-4">📋 Include the following information:</h3>
              <div className="space-y-4">
                <div className="flex items-start p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3 mt-1 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-1">Your full name and contact information</h4>
                    <p className="text-gray-600">Include your name, address, phone number, and email address</p>
                  </div>
                </div>

                <div className="flex items-start p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3 mt-1 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-1">The exact URL(s) where the infringing content appears</h4>
                    <p className="text-gray-600">Provide specific links to the content on Coach2Coach</p>
                  </div>
                </div>

                <div className="flex items-start p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3 mt-1 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-1">A description of your original copyrighted work</h4>
                    <p className="text-gray-600">Describe the work that you believe has been infringed</p>
                  </div>
                </div>

                <div className="flex items-start p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3 mt-1 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-1">A good-faith statement that you believe the use is unauthorized</h4>
                    <p className="text-gray-600">State that you believe the use is not authorized by you, your agent, or the law</p>
                  </div>
                </div>

                <div className="flex items-start p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3 mt-1 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-1">A statement under penalty of perjury that your complaint is accurate</h4>
                    <p className="text-gray-600">Confirm that the information is accurate and you are authorized to act</p>
                  </div>
                </div>

                <div className="flex items-start p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3 mt-1 flex-shrink-0" />
                  <div>
                    <h4 className="font-semibold text-gray-800 mb-1">Your physical or electronic signature</h4>
                    <p className="text-gray-600">Sign the notice physically or electronically</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Our Process Section */}
          <div className="mb-8">
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
                <Clock className="w-6 h-6 text-blue-600" />
              </div>
              <h2 className="text-3xl font-bold text-slate-900">Our Review Process</h2>
            </div>

            <div className="bg-blue-50 rounded-lg p-6 border border-blue-200">
              <p className="text-blue-800 leading-relaxed text-lg mb-4">
                Coach2Coach will review all claims and respond in a timely manner. If appropriate, we may 
                notify the uploader and give them a chance to file a counter-notice.
              </p>
              <div className="flex items-start">
                <AlertTriangle className="w-6 h-6 text-blue-600 mr-3 mt-1 flex-shrink-0" />
                <p className="text-blue-700">
                  We take all copyright claims seriously and will investigate each request thoroughly 
                  while following proper DMCA procedures.
                </p>
              </div>
            </div>
          </div>

          {/* Important Notice */}
          <div className="bg-yellow-50 rounded-lg p-6 border border-yellow-200 mb-8">
            <div className="flex items-start">
              <AlertTriangle className="w-8 h-8 text-yellow-600 mr-4 mt-1 flex-shrink-0" />
              <div>
                <h3 className="text-xl font-bold text-yellow-800 mb-2">Important Notice</h3>
                <p className="text-yellow-700 leading-relaxed">
                  Filing a false DMCA claim may result in legal consequences. Only submit takedown requests 
                  if you are the copyright owner or authorized to act on their behalf.
                </p>
              </div>
            </div>
          </div>

          {/* Contact Section */}
          <div className="text-center p-6 bg-slate-900 text-white rounded-lg">
            <div className="flex items-center justify-center mb-4">
              <Mail className="w-6 h-6 text-emerald-400 mr-2" />
              <h3 className="text-xl font-bold">Questions About DMCA?</h3>
            </div>
            <p className="text-gray-300 mb-4">
              If you have questions about the DMCA process or need assistance with your request:
            </p>
            <a 
              href="mailto:zach@coach2coachnetwork.com?subject=DMCA Question" 
              className="inline-flex items-center bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              <Mail className="w-4 h-4 mr-2" />
              Contact Our DMCA Agent
            </a>
          </div>

          {/* Footer */}
          <div className="mt-8 pt-6 border-t border-gray-200 text-center">
            <p className="text-sm text-gray-500">
              Coach2Coach complies with the Digital Millennium Copyright Act and respects the intellectual property rights of others.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DMCAPolicy;
import React, { useState } from 'react';
import { Download, Lock, CheckCircle, AlertCircle, Clock, FileText } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { getSecureDownloadUrl } from '../lib/fileUpload';

interface DownloadManagerProps {
  resource: {
    id: string;
    title: string;
    fileUrls?: string[];
    price: number;
  };
  isPurchased: boolean;
  onPurchaseRequired: () => void;
}

const DownloadManager: React.FC<DownloadManagerProps> = ({
  resource,
  isPurchased,
  onPurchaseRequired
}) => {
  const { user } = useAuth();
  const [downloading, setDownloading] = useState<string | null>(null);
  const [downloadCounts, setDownloadCounts] = useState<{ [key: string]: number }>({});

  const handleDownload = async (fileUrl: string, fileName: string) => {
    if (!isPurchased) {
      onPurchaseRequired();
      return;
    }

    if (!user) {
      alert('Please sign in to download files');
      return;
    }

    setDownloading(fileUrl);

    try {
      // Get secure download URL
      const result = await getSecureDownloadUrl('resources', fileUrl, 3600);
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to get download link');
      }

      // Create download link
      const link = document.createElement('a');
      link.href = result.url!;
      link.download = fileName;
      link.target = '_blank';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      // Track download count
      setDownloadCounts(prev => ({
        ...prev,
        [fileUrl]: (prev[fileUrl] || 0) + 1
      }));

    } catch (error) {
      console.error('Download error:', error);
      alert('Download failed. Please try again.');
    } finally {
      setDownloading(null);
    }
  };

  if (!resource.fileUrls || resource.fileUrls.length === 0) {
    return (
      <div className="bg-gray-50 rounded-lg p-6 text-center">
        <FileText className="w-8 h-8 text-gray-400 mx-auto mb-2" />
        <p className="text-gray-600">No files available for download</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold text-slate-900">Resource Files</h3>
      
      {resource.fileUrls.map((fileUrl, index) => {
        const fileName = `${resource.title} - File ${index + 1}`;
        const isDownloading = downloading === fileUrl;
        const downloadCount = downloadCounts[fileUrl] || 0;
        
        return (
          <div key={index} className="flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-emerald-100 rounded-lg flex items-center justify-center mr-3">
                <FileText className="w-5 h-5 text-emerald-600" />
              </div>
              <div>
                <p className="font-medium text-slate-900">{fileName}</p>
                <p className="text-sm text-gray-600">
                  {isPurchased ? 'Ready to download' : `$${resource.price} - Purchase required`}
                  {downloadCount > 0 && ` • Downloaded ${downloadCount} time${downloadCount !== 1 ? 's' : ''}`}
                </p>
              </div>
            </div>
            
            <button
              onClick={() => handleDownload(fileUrl, fileName)}
              disabled={isDownloading}
              className={`flex items-center px-4 py-2 rounded-lg font-semibold transition-colors ${
                isPurchased
                  ? 'bg-emerald-600 hover:bg-emerald-700 text-white'
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              {isDownloading ? (
                <>
                  <Clock className="w-4 h-4 mr-2 animate-spin" />
                  Downloading...
                </>
              ) : isPurchased ? (
                <>
                  <Download className="w-4 h-4 mr-2" />
                  Download
                </>
              ) : (
                <>
                  <Lock className="w-4 h-4 mr-2" />
                  Purchase to Download
                </>
              )}
            </button>
          </div>
        );
      })}
      
      {isPurchased && (
        <div className="bg-emerald-50 border border-emerald-200 rounded-lg p-4">
          <div className="flex items-center">
            <CheckCircle className="w-5 h-5 text-emerald-600 mr-2" />
            <p className="text-sm text-emerald-800">
              You own this resource. Downloads are unlimited and secure.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default DownloadManager;
// A/B testing experiment management interface
import React, { useState, useEffect } from 'react';
import { 
  Beaker, 
  Play, 
  Pause, 
  CheckCircle, 
  Plus, 
  BarChart3,
  Target,
  Users,
  TrendingUp,
  AlertTriangle,
  Calendar
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface Experiment {
  id: string;
  key: string;
  name: string;
  description: string;
  status: 'draft' | 'running' | 'paused' | 'completed';
  primaryMetric: string;
  variants: Array<{
    name: string;
    weight: number;
    config: any;
  }>;
  results?: Array<{
    variant: string;
    assignments: number;
    conversions: number;
    conversionRate: number;
  }>;
  startDate?: string;
  endDate?: string;
  significance?: number;
}

const ExperimentManager: React.FC = () => {
  const { user } = useAuth();
  const [experiments, setExperiments] = useState<Experiment[]>([]);
  const [loading, setLoading] = useState(false);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [selectedExperiment, setSelectedExperiment] = useState<Experiment | null>(null);

  useEffect(() => {
    loadExperiments();
  }, []);

  const loadExperiments = async () => {
    if (!user) return;

    setLoading(true);
    try {
      const response = await fetch(`/api/experiments?userId=${user.id}`);
      const data = await response.json();

      if (data.success) {
        setExperiments(data.experiments);
      }
    } catch (error) {
      console.error('Error loading experiments:', error);
    } finally {
      setLoading(false);
    }
  };

  const updateExperimentStatus = async (experimentId: string, status: string) => {
    try {
      const response = await fetch(`/api/experiments/${experimentId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user?.id, status })
      });

      const data = await response.json();

      if (data.success) {
        loadExperiments();
      } else {
        throw new Error(data.error);
      }
    } catch (error) {
      console.error('Error updating experiment:', error);
      alert('Failed to update experiment status');
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'running':
        return <Play className="w-4 h-4 text-green-600" />;
      case 'paused':
        return <Pause className="w-4 h-4 text-yellow-600" />;
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-blue-600" />;
      default:
        return <Beaker className="w-4 h-4 text-gray-600" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'running':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'paused':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'completed':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const calculateSignificance = (results: any[]) => {
    // Simple significance calculation (in production, use proper statistical tests)
    if (results.length < 2) return 0;
    
    const control = results.find(r => r.variant === 'control');
    const variants = results.filter(r => r.variant !== 'control');
    
    if (!control || variants.length === 0) return 0;
    
    const maxVariant = variants.reduce((max, variant) => 
      variant.conversionRate > max.conversionRate ? variant : max
    );
    
    const lift = ((maxVariant.conversionRate - control.conversionRate) / control.conversionRate) * 100;
    
    // Mock significance based on sample size and lift
    const totalSamples = control.assignments + maxVariant.assignments;
    if (totalSamples < 100) return 0.1;
    if (totalSamples < 500) return 0.7;
    if (lift > 10) return 0.95;
    if (lift > 5) return 0.85;
    return 0.6;
  };

  // Check if user is admin
  const isAdmin = user?.email === 'admin@coach2coachnetwork.com' || user?.email === 'zach@coach2coachnetwork.com';

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <Beaker className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Access Denied</h2>
          <p className="text-gray-600">You don't have permission to access experiment management.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">A/B Testing</h1>
              <p className="text-gray-600">Manage experiments and optimize conversions</p>
            </div>
            <button
              onClick={() => setShowCreateForm(true)}
              className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold flex items-center transition-colors"
            >
              <Plus className="w-4 h-4 mr-2" />
              Create Experiment
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Experiments List */}
        <div className="space-y-6">
          {experiments.map((experiment) => {
            const significance = experiment.results ? calculateSignificance(experiment.results) : 0;
            
            return (
              <div key={experiment.id} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center mb-2">
                      <h3 className="text-xl font-bold text-slate-900 mr-3">{experiment.name}</h3>
                      <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(experiment.status)}`}>
                        {getStatusIcon(experiment.status)}
                        <span className="ml-2 capitalize">{experiment.status}</span>
                      </div>
                    </div>
                    <p className="text-gray-600 mb-2">{experiment.description}</p>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <div className="flex items-center">
                        <Target className="w-4 h-4 mr-1" />
                        <span>Primary: {experiment.primaryMetric}</span>
                      </div>
                      {experiment.startDate && (
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-1" />
                          <span>Started: {new Date(experiment.startDate).toLocaleDateString()}</span>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    {experiment.status === 'draft' && (
                      <button
                        onClick={() => updateExperimentStatus(experiment.id, 'running')}
                        className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
                      >
                        <Play className="w-4 h-4 mr-2" />
                        Start
                      </button>
                    )}
                    {experiment.status === 'running' && (
                      <>
                        <button
                          onClick={() => updateExperimentStatus(experiment.id, 'paused')}
                          className="border border-yellow-600 text-yellow-600 hover:bg-yellow-50 px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
                        >
                          <Pause className="w-4 h-4 mr-2" />
                          Pause
                        </button>
                        <button
                          onClick={() => updateExperimentStatus(experiment.id, 'completed')}
                          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
                        >
                          <CheckCircle className="w-4 h-4 mr-2" />
                          Complete
                        </button>
                      </>
                    )}
                    {experiment.status === 'paused' && (
                      <button
                        onClick={() => updateExperimentStatus(experiment.id, 'running')}
                        className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
                      >
                        <Play className="w-4 h-4 mr-2" />
                        Resume
                      </button>
                    )}
                  </div>
                </div>

                {/* Variants */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  {experiment.variants.map((variant, index) => {
                    const result = experiment.results?.find(r => r.variant === variant.name);
                    
                    return (
                      <div key={index} className="bg-gray-50 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-semibold text-slate-900">{variant.name}</h4>
                          <span className="text-sm text-gray-600">{variant.weight}%</span>
                        </div>
                        
                        {result && (
                          <div className="space-y-1">
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">Assignments:</span>
                              <span className="font-medium">{result.assignments}</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">Conversions:</span>
                              <span className="font-medium">{result.conversions}</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">Rate:</span>
                              <span className="font-bold text-emerald-600">{result.conversionRate}%</span>
                            </div>
                          </div>
                        )}
                        
                        {!result && experiment.status !== 'draft' && (
                          <p className="text-sm text-gray-500">No data yet</p>
                        )}
                      </div>
                    );
                  })}
                </div>

                {/* Statistical Significance */}
                {experiment.status !== 'draft' && significance > 0 && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <BarChart3 className="w-5 h-5 text-blue-600 mr-2" />
                        <span className="font-medium text-blue-800">Statistical Significance</span>
                      </div>
                      <div className="flex items-center">
                        <span className={`font-bold text-lg ${
                          significance >= 0.95 ? 'text-green-600' :
                          significance >= 0.8 ? 'text-yellow-600' :
                          'text-gray-600'
                        }`}>
                          {(significance * 100).toFixed(0)}%
                        </span>
                        {significance >= 0.95 && (
                          <CheckCircle className="w-5 h-5 text-green-600 ml-2" />
                        )}
                        {significance < 0.8 && (
                          <AlertTriangle className="w-5 h-5 text-yellow-600 ml-2" />
                        )}
                      </div>
                    </div>
                    {significance >= 0.95 && (
                      <p className="text-sm text-green-700 mt-2">
                        ✅ Results are statistically significant. Safe to declare a winner.
                      </p>
                    )}
                    {significance < 0.8 && (
                      <p className="text-sm text-yellow-700 mt-2">
                        ⚠️ Need more data for statistical significance. Continue running test.
                      </p>
                    )}
                  </div>
                )}
              </div>
            );
          })}

          {experiments.length === 0 && !loading && (
            <div className="bg-white rounded-xl shadow-sm p-12 text-center">
              <Beaker className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-slate-900 mb-2">No Experiments Yet</h3>
              <p className="text-gray-600 mb-6">
                Create your first A/B test to optimize conversions and user experience.
              </p>
              <button
                onClick={() => setShowCreateForm(true)}
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                Create Your First Experiment
              </button>
            </div>
          )}
        </div>

        {/* Create Experiment Modal */}
        {showCreateForm && (
          <CreateExperimentModal
            onClose={() => setShowCreateForm(false)}
            onSuccess={() => {
              setShowCreateForm(false);
              loadExperiments();
            }}
          />
        )}
      </div>
    </div>
  );
};

// Create Experiment Modal Component
const CreateExperimentModal: React.FC<{
  onClose: () => void;
  onSuccess: () => void;
}> = ({ onClose, onSuccess }) => {
  const { user } = useAuth();
  const [formData, setFormData] = useState({
    key: '',
    name: '',
    description: '',
    primaryMetric: 'conversion_rate',
    variants: [
      { name: 'control', weight: 50, config: {} },
      { name: 'variant_a', weight: 50, config: {} }
    ]
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user) return;

    setLoading(true);
    try {
      const response = await fetch('/api/experiments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.id,
          ...formData
        })
      });

      const data = await response.json();

      if (data.success) {
        onSuccess();
      } else {
        throw new Error(data.error);
      }
    } catch (error) {
      console.error('Error creating experiment:', error);
      alert('Failed to create experiment');
    } finally {
      setLoading(false);
    }
  };

  const addVariant = () => {
    setFormData(prev => ({
      ...prev,
      variants: [
        ...prev.variants,
        { name: `variant_${String.fromCharCode(97 + prev.variants.length - 1)}`, weight: 50, config: {} }
      ]
    }));
  };

  const updateVariant = (index: number, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      variants: prev.variants.map((variant, i) => 
        i === index ? { ...variant, [field]: value } : variant
      )
    }));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-slate-900">Create A/B Test</h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Experiment Key</label>
                <input
                  type="text"
                  value={formData.key}
                  onChange={(e) => setFormData(prev => ({ ...prev, key: e.target.value }))}
                  placeholder="pricing_test_v1"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Primary Metric</label>
                <select
                  value={formData.primaryMetric}
                  onChange={(e) => setFormData(prev => ({ ...prev, primaryMetric: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                >
                  <option value="conversion_rate">Conversion Rate</option>
                  <option value="subscription_rate">Subscription Rate</option>
                  <option value="purchase_rate">Purchase Rate</option>
                  <option value="engagement_rate">Engagement Rate</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Experiment Name</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                placeholder="Pricing Test - January 2024"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                placeholder="Test different pricing points to optimize conversion rate..."
                rows={3}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              />
            </div>

            {/* Variants */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <label className="block text-sm font-medium text-gray-700">Variants</label>
                <button
                  type="button"
                  onClick={addVariant}
                  className="text-emerald-600 hover:text-emerald-700 font-medium text-sm flex items-center"
                >
                  <Plus className="w-4 h-4 mr-1" />
                  Add Variant
                </button>
              </div>
              
              <div className="space-y-3">
                {formData.variants.map((variant, index) => (
                  <div key={index} className="grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg">
                    <div>
                      <label className="block text-xs font-medium text-gray-600 mb-1">Variant Name</label>
                      <input
                        type="text"
                        value={variant.name}
                        onChange={(e) => updateVariant(index, 'name', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-xs font-medium text-gray-600 mb-1">Traffic %</label>
                      <input
                        type="number"
                        min="1"
                        max="100"
                        value={variant.weight}
                        onChange={(e) => updateVariant(index, 'weight', parseInt(e.target.value))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-sm"
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="flex space-x-4">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={loading}
                className="flex-1 bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white py-3 rounded-lg font-semibold transition-colors"
              >
                {loading ? 'Creating...' : 'Create Experiment'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ExperimentManager;
import React from 'react';
import { Star, Award, Users, MapPin, TrendingUp, Clock, Trophy } from 'lucide-react';
import { Link } from 'react-router-dom';

const FeaturedCoaches: React.FC = () => {
  // Featured coaches data
  const topRatedCoaches = [
    {
      id: '1',
      name: 'Chan Brown',
      sport: 'Baseball',
      school: 'Atlanta Baseball Academy',
      rating: 4.9,
      resources: 12,
      downloads: 245,
      experience: '8 years',
      bio: 'Baseball Coach & Skills Development Specialist with expertise in hitting mechanics and player development.'
    },
    {
      id: '2',
      name: 'Robby Gilbert',
      sport: 'Baseball',
      school: 'Birmingham Baseball Club',
      rating: 4.8,
      resources: 8,
      downloads: 189,
      experience: '12 years',
      bio: 'Baseball Coach & Pitching Specialist with expertise in pitching mechanics and arm care.'
    },
    {
      id: '3',
      name: 'Jamie Suggs',
      sport: 'Baseball',
      school: 'Nashville Baseball Academy',
      rating: 4.9,
      resources: 15,
      downloads: 312,
      experience: '8 years',
      bio: 'Baseball Coach & Hitting Instructor focused on hitting instruction and offensive strategy.'
    },
    {
      id: '4',
      name: 'Willie Hildebrand',
      sport: 'Swimming',
      school: 'Austin Aquatic Center',
      rating: 4.7,
      resources: 10,
      downloads: 198,
      experience: '9 years',
      bio: 'Swimming Coach & Technique Specialist with expertise in stroke technique and training programs.'
    },
    {
      id: '5',
      name: 'P.J. Katz',
      sport: 'Football',
      school: 'Dallas Football Academy',
      rating: 4.6,
      resources: 18,
      downloads: 456,
      experience: '11 years',
      bio: 'Football Coach & Offensive Coordinator specializing in offensive strategy and quarterback development.'
    },
    {
      id: '6',
      name: 'Trae Owens',
      sport: 'Football',
      school: 'Houston Football Club',
      rating: 4.7,
      resources: 16,
      downloads: 423,
      experience: '7 years',
      bio: 'Football Coach & Defensive Specialist focused on defensive strategy and player development.'
    },
    {
      id: '7',
      name: 'Ryan Sutton',
      sport: 'Soccer',
      school: 'Seattle Soccer Academy',
      rating: 4.8,
      resources: 14,
      downloads: 287,
      experience: '9 years',
      bio: 'Soccer Coach & Tactical Specialist with expertise in tactical training and technical skills development.'
    }
  ];

  // Reuse the same coaches for other sections
  const mostPopularCoaches = topRatedCoaches.slice(0, 3);
  const newestCoaches = topRatedCoaches.slice(3, 6);

  const featuredSections = [
    {
      title: 'Top Rated Coaches',
      icon: Star,
      coaches: topRatedCoaches,
      color: 'text-yellow-600',
      bgColor: 'bg-yellow-50',
      borderColor: 'border-yellow-200',
      gridCols: 'grid-cols-1 md:grid-cols-2' // 2 across for top rated
    },
    {
      title: 'Most Popular',
      icon: TrendingUp,
      coaches: mostPopularCoaches,
      color: 'text-emerald-600',
      bgColor: 'bg-emerald-50',
      borderColor: 'border-emerald-200',
      gridCols: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' // 3 across for others
    },
    {
      title: 'Newest Coaches',
      icon: Clock,
      coaches: newestCoaches,
      color: 'text-blue-600',
      bgColor: 'bg-blue-50',
      borderColor: 'border-blue-200',
      gridCols: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' // 3 across for others
    }
  ];

  return (
    <section className="py-20 bg-white">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold text-slate-900 mb-4">
            Meet Our <span className="text-emerald-600">Expert Coaches</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Discover talented coaches from around the world who are sharing their knowledge and helping others succeed
          </p>
        </div>

        <div className="space-y-16">
          {featuredSections.map((section, sectionIndex) => {
            const IconComponent = section.icon;
            
            return (
              <div key={sectionIndex}>
                <div className="flex items-center mb-8">
                  <div className={`w-12 h-12 rounded-full ${section.bgColor} flex items-center justify-center mr-4`}>
                    <IconComponent className={`w-6 h-6 ${section.color}`} />
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-slate-900">{section.title}</h3>
                    <p className="text-gray-600">Outstanding coaches making a difference</p>
                  </div>
                </div>

                <div className={`grid ${section.gridCols} gap-6`}>
                  {section.coaches.map((coach) => (
                    <div key={coach.id} className={`bg-white rounded-xl shadow-lg border-2 ${section.borderColor} overflow-hidden hover:shadow-xl transition-all duration-300 hover:scale-[1.02]`}>
                      <div className="p-6">
                        {/* Coach Header */}
                        <div className="flex items-start space-x-4 mb-4">
                          <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                            <Users className="w-8 h-8 text-gray-400" />
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="text-xl font-bold text-slate-900 truncate">
                              {coach.name}
                            </h4>
                            <p className="text-emerald-600 font-semibold text-sm truncate">{coach.sport}</p>
                            <div className="flex items-center text-gray-500 text-sm mt-1">
                              <MapPin className="w-3 h-3 mr-1" />
                              <span className="truncate">{coach.school}</span>
                            </div>
                          </div>
                        </div>

                        {/* Coach Bio */}
                        <p className="text-gray-600 text-sm mb-4 line-clamp-3">
                          {coach.bio}
                        </p>

                        {/* Sports & Specialties */}
                        <div className="mb-4">
                          <div className="flex flex-wrap gap-1 mb-2">
                            <span className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                              {coach.sport}
                            </span>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                              {coach.experience}
                            </span>
                          </div>
                        </div>

                        {/* Stats */}
                        <div className="grid grid-cols-3 gap-4 mb-4 text-center">
                          <div>
                            <div className="text-lg font-bold text-slate-900">{coach.resources}</div>
                            <div className="text-xs text-gray-600">Resources</div>
                          </div>
                          <div>
                            <div className="flex items-center justify-center">
                              <Star className="w-4 h-4 text-yellow-400 mr-1" />
                              <span className="text-lg font-bold text-slate-900">
                                {coach.rating}
                              </span>
                            </div>
                            <div className="text-xs text-gray-600">Rating</div>
                          </div>
                          <div>
                            <div className="text-lg font-bold text-slate-900">{coach.downloads}</div>
                            <div className="text-xs text-gray-600">Downloads</div>
                          </div>
                        </div>

                        {/* Experience Badge */}
                        <div className="flex items-center justify-between">
                          <div className="flex items-center text-sm text-gray-600">
                            <Award className="w-4 h-4 mr-1" />
                            <span>{coach.experience}</span>
                          </div>
                          <button className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg text-sm font-semibold transition-colors">
                            View Profile
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            );
          })}
        </div>

        {/* Call to Action */}
        <div className="text-center mt-16">
          <div className="bg-gradient-to-r from-emerald-50 to-blue-50 rounded-2xl p-8">
            <Trophy className="w-16 h-16 text-emerald-600 mx-auto mb-4" />
            <h3 className="text-2xl font-bold text-slate-900 mb-4">
              Join Our Community of Expert Coaches
            </h3>
            <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
              Share your expertise, build your coaching brand, and connect with coaches worldwide. 
              Create your profile today and start making an impact.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link 
                to="/create-profile"
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors inline-block no-underline"
              >
                Create Your Profile
              </Link>
              <Link 
                to="/browse"
                className="border-2 border-emerald-600 text-emerald-600 hover:bg-emerald-600 hover:text-white px-8 py-3 rounded-lg font-semibold transition-colors inline-block no-underline"
              >
                Browse All Coaches
              </Link>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeaturedCoaches;
import React, { useState, useEffect } from 'react';
import { Star, TrendingUp, Clock, Award } from 'lucide-react';
import ResourceCard from './ResourceCard';

const FeaturedResources: React.FC = () => {
  const [resources, setResources] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchResources();
  }, []);

  const fetchResources = async () => {
    try {
      const response = await fetch('/api/resources?limit=6');
      const result = await response.json();
      if (result.data) {
        const transformed = result.data
          .sort((a: any, b: any) => (b.downloads || 0) - (a.downloads || 0))
          .slice(0, 6)
          .map((r: any) => ({
            id: r.id,
            coachId: r.coach_id,
            title: r.title,
            description: r.description,
            price: Number(r.price) || 0,
            sports: r.sports || [],
            levels: r.levels || [],
            rating: Number(r.rating) || 0,
            downloads: r.downloads || 0,
            status: r.status,
            createdAt: r.created_at
          }));
        setResources(transformed);
      }
    } catch (error) {
      console.error('Error fetching resources:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading || resources.length === 0) {
    return null;
  }

  // Get featured resources (highest rated, most popular, newest)
  const featuredSections = [
    {
      title: 'Highest Rated',
      icon: Star,
      resources: [...resources]
        .sort((a, b) => (b.rating || 0) - (a.rating || 0))
        .slice(0, 3),
      color: 'text-yellow-600'
    },
    {
      title: 'Most Popular',
      icon: TrendingUp,
      resources: [...resources]
        .sort((a, b) => (b.downloads || 0) - (a.downloads || 0))
        .slice(0, 3),
      color: 'text-emerald-600'
    },
    {
      title: 'Recently Added',
      icon: Clock,
      resources: [...resources]
        .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
        .slice(0, 3),
      color: 'text-blue-600'
    }
  ];

  return (
    <section className="py-20 bg-white">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold text-slate-900 mb-4">
            Featured <span className="text-emerald-600">Resources</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Discover the best coaching resources from our community of expert coaches
          </p>
        </div>

        <div className="space-y-16">
          {featuredSections.map((section, sectionIndex) => {
            if (section.resources.length === 0) return null;
            
            const IconComponent = section.icon;
            
            return (
              <div key={sectionIndex}>
                <div className="flex items-center mb-8">
                  <div className={`w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center mr-4`}>
                    <IconComponent className={`w-6 h-6 ${section.color}`} />
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-slate-900">{section.title}</h3>
                    <p className="text-gray-600">Top picks from our coaching community</p>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {section.resources.map((resource) => (
                    <ResourceCard key={resource.id} resource={resource} />
                  ))}
                </div>
              </div>
            );
          })}
        </div>

        {/* Call to Action */}
        <div className="text-center mt-16">
          <div className="bg-gradient-to-r from-emerald-50 to-blue-50 rounded-2xl p-8">
            <Award className="w-16 h-16 text-emerald-600 mx-auto mb-4" />
            <h3 className="text-2xl font-bold text-slate-900 mb-4">
              Ready to Share Your Expertise?
            </h3>
            <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
              Join our community of successful coaches and start earning from your knowledge. 
              Upload your first resource and help coaches worldwide improve their game.
            </p>
            <a 
              href="/become-seller"
              className="bg-emerald-600 hover:bg-emerald-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors inline-block"
            >
              Start Selling Today
            </a>
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeaturedResources;
import React, { useState, useRef } from 'react';
import { Upload, X, AlertCircle, CheckCircle, Loader } from 'lucide-react';
import { uploadFiles, validateFiles, FileValidation, UploadResult, formatFileSize, getFileTypeIcon } from '../lib/fileUpload';

interface FileUploadZoneProps {
  onFilesUploaded: (results: UploadResult[]) => void;
  bucket: string;
  userId: string;
  validation: FileValidation;
  multiple?: boolean;
  accept?: string;
  title?: string;
  description?: string;
  className?: string;
}

interface FileWithStatus {
  file: File;
  status: 'pending' | 'uploading' | 'success' | 'error';
  result?: UploadResult;
  progress?: number;
}

const FileUploadZone: React.FC<FileUploadZoneProps> = ({
  onFilesUploaded,
  bucket,
  userId,
  validation,
  multiple = true,
  accept,
  title = "Upload Files",
  description = "Drag and drop files here, or click to browse",
  className = ""
}) => {
  const [dragActive, setDragActive] = useState(false);
  const [files, setFiles] = useState<FileWithStatus[]>([]);
  const [uploading, setUploading] = useState(false);
  const [errors, setErrors] = useState<string[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFiles(Array.from(e.dataTransfer.files));
    }
  };

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      handleFiles(Array.from(e.target.files));
    }
  };

  const handleFiles = (newFiles: File[]) => {
    setErrors([]);
    
    // Validate files
    const validationResult = validateFiles(newFiles, validation);
    if (!validationResult.valid) {
      setErrors(validationResult.errors);
      return;
    }

    // Add files to state
    const filesWithStatus: FileWithStatus[] = newFiles.map(file => ({
      file,
      status: 'pending'
    }));

    if (multiple) {
      setFiles(prev => [...prev, ...filesWithStatus]);
    } else {
      setFiles(filesWithStatus);
    }
  };

  const removeFile = (index: number) => {
    setFiles(prev => prev.filter((_, i) => i !== index));
  };

  const uploadAllFiles = async () => {
    if (files.length === 0) return;

    setUploading(true);
    setErrors([]);

    try {
      // Update all files to uploading status
      setFiles(prev => prev.map(f => ({ ...f, status: 'uploading' as const })));

      const filesToUpload = files.map(f => f.file);
      
      const results = await uploadFiles(
        filesToUpload,
        bucket,
        userId,
        validation,
        (progress) => {
          // Update progress for all files (simplified)
          setFiles(prev => prev.map(f => ({ 
            ...f, 
            progress: f.status === 'uploading' ? progress : f.progress 
          })));
        }
      );

      // Update files with results
      setFiles(prev => prev.map((f, index) => ({
        ...f,
        status: results[index].success ? 'success' : 'error',
        result: results[index],
        progress: 100
      })));

      // Call callback with results
      onFilesUploaded(results);

      // Clear successful uploads after a delay
      setTimeout(() => {
        setFiles(prev => prev.filter(f => f.status === 'error'));
      }, 2000);

    } catch (error) {
      setErrors(['Upload failed. Please try again.']);
      setFiles(prev => prev.map(f => ({ ...f, status: 'error' as const })));
    } finally {
      setUploading(false);
    }
  };

  const clearAll = () => {
    setFiles([]);
    setErrors([]);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const getAcceptString = () => {
    if (accept) return accept;
    return validation.allowedTypes.join(',');
  };

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Upload Zone */}
      <div 
        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${
          dragActive 
            ? 'border-emerald-500 bg-emerald-50' 
            : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
        }`}
        onDragEnter={handleDrag}
        onDragLeave={handleDrag}
        onDragOver={handleDrag}
        onDrop={handleDrop}
        onClick={() => fileInputRef.current?.click()}
      >
        <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-gray-700 mb-2">{title}</h3>
        <p className="text-sm text-gray-500 mb-4">{description}</p>
        
        <div className="text-xs text-gray-400 space-y-1">
          <p>Max file size: {formatFileSize(validation.maxSize)}</p>
          <p>Allowed types: {validation.allowedTypes.map(type => type.split('/')[1]).join(', ')}</p>
          {validation.maxFiles && <p>Max files: {validation.maxFiles}</p>}
        </div>

        <input
          ref={fileInputRef}
          type="file"
          multiple={multiple}
          accept={getAcceptString()}
          onChange={handleFileInput}
          className="hidden"
        />
      </div>

      {/* Error Messages */}
      {errors.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-start">
            <AlertCircle className="w-5 h-5 text-red-500 mr-3 mt-0.5 flex-shrink-0" />
            <div className="flex-1">
              <h4 className="text-sm font-semibold text-red-800 mb-1">Upload Errors</h4>
              <ul className="text-sm text-red-700 space-y-1">
                {errors.map((error, index) => (
                  <li key={index}>• {error}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* File List */}
      {files.length > 0 && (
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <h4 className="font-medium text-gray-700">Files ({files.length})</h4>
            <div className="flex space-x-2">
              {files.some(f => f.status === 'pending') && (
                <button
                  onClick={uploadAllFiles}
                  disabled={uploading}
                  className="bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white px-4 py-2 rounded-lg text-sm font-semibold transition-colors flex items-center"
                >
                  {uploading ? (
                    <>
                      <Loader className="w-4 h-4 mr-2 animate-spin" />
                      Uploading...
                    </>
                  ) : (
                    <>
                      <Upload className="w-4 h-4 mr-2" />
                      Upload All
                    </>
                  )}
                </button>
              )}
              <button
                onClick={clearAll}
                className="border border-gray-300 hover:bg-gray-50 px-4 py-2 rounded-lg text-sm font-semibold transition-colors"
              >
                Clear All
              </button>
            </div>
          </div>

          <div className="space-y-2">
            {files.map((fileWithStatus, index) => (
              <div key={index} className="flex items-center p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center flex-1 min-w-0">
                  <span className="text-2xl mr-3">{getFileTypeIcon(fileWithStatus.file.name)}</span>
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-gray-700 truncate">{fileWithStatus.file.name}</p>
                    <p className="text-sm text-gray-500">
                      {formatFileSize(fileWithStatus.file.size)}
                    </p>
                    
                    {/* Progress Bar */}
                    {fileWithStatus.status === 'uploading' && fileWithStatus.progress !== undefined && (
                      <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                        <div 
                          className="bg-emerald-600 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${fileWithStatus.progress}%` }}
                        />
                      </div>
                    )}
                    
                    {/* Error Message */}
                    {fileWithStatus.status === 'error' && fileWithStatus.result?.error && (
                      <p className="text-sm text-red-600 mt-1">{fileWithStatus.result.error}</p>
                    )}
                  </div>
                </div>

                {/* Status Icon */}
                <div className="flex items-center space-x-2 ml-4">
                  {fileWithStatus.status === 'pending' && (
                    <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                      <span className="text-xs text-gray-600">•</span>
                    </div>
                  )}
                  {fileWithStatus.status === 'uploading' && (
                    <Loader className="w-5 h-5 text-emerald-600 animate-spin" />
                  )}
                  {fileWithStatus.status === 'success' && (
                    <CheckCircle className="w-5 h-5 text-green-600" />
                  )}
                  {fileWithStatus.status === 'error' && (
                    <AlertCircle className="w-5 h-5 text-red-600" />
                  )}
                  
                  {/* Remove Button */}
                  {fileWithStatus.status !== 'uploading' && (
                    <button
                      onClick={() => removeFile(index)}
                      className="p-1 text-gray-400 hover:text-red-600 rounded"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default FileUploadZone;
import React from 'react';
import { Mail, Phone, MapPin, Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';
import Logo from './Logo';

const Footer: React.FC = () => {
  return (
    <footer className="bg-slate-900 text-white py-16">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {/* Brand */}
          <div>
            <div className="flex items-center space-x-3 mb-4">
              <Logo className="w-10 h-10" />
              <div>
                <h3 className="text-xl font-bold">Coach2Coach</h3>
                <p className="text-sm text-gray-400">Made for Coaches, by Coaches</p>
              </div>
            </div>
            <p className="text-gray-400 mb-4">
              The premier digital marketplace where coaching expertise meets opportunity.
            </p>
            <div className="flex space-x-3">
              <a href="#" className="w-8 h-8 bg-gray-800 rounded-full flex items-center justify-center hover:bg-emerald-600 transition-colors">
                <Facebook className="w-4 h-4" />
              </a>
              <a href="#" className="w-8 h-8 bg-gray-800 rounded-full flex items-center justify-center hover:bg-emerald-600 transition-colors">
                <Twitter className="w-4 h-4" />
              </a>
              <a href="#" className="w-8 h-8 bg-gray-800 rounded-full flex items-center justify-center hover:bg-emerald-600 transition-colors">
                <Instagram className="w-4 h-4" />
              </a>
              <a href="#" className="w-8 h-8 bg-gray-800 rounded-full flex items-center justify-center hover:bg-emerald-600 transition-colors">
                <Linkedin className="w-4 h-4" />
              </a>
            </div>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Quick Links</h4>
            <ul className="space-y-2">
              <li><a href="/" className="text-gray-400 hover:text-white transition-colors">Home</a></li>
              <li><a href="/browse" className="text-gray-400 hover:text-white transition-colors">Browse Resources</a></li>
              <li><a href="/become-seller" className="text-gray-400 hover:text-white transition-colors">Become a Seller</a></li>
              <li><a href="/about" className="text-gray-400 hover:text-white transition-colors">About</a></li>
              <li><a href="/community-hub" className="text-gray-400 hover:text-white transition-colors">Community</a></li>
            </ul>
          </div>

          {/* Legal */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Legal</h4>
            <ul className="space-y-2">
              <li><a href="/contact" className="text-gray-400 hover:text-white transition-colors">Contact</a></li>
              <li><a href="/terms" className="text-gray-400 hover:text-white transition-colors">Terms of Service</a></li>
              <li><a href="#" className="text-gray-400 hover:text-white transition-colors">Privacy Policy</a></li>
              <li><a href="/copyright" className="text-gray-400 hover:text-white transition-colors">Copyright Policy</a></li>
              <li><a href="/dmca" className="text-gray-400 hover:text-white transition-colors">DMCA Policy</a></li>
            </ul>
          </div>

          {/* Contact Info */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Contact Info</h4>
            <div className="space-y-3">
              <div className="flex items-center">
                <Mail className="w-5 h-5 text-emerald-400 mr-3" />
                <a href="mailto:zach@coach2coachnetwork.com" className="text-gray-400 hover:text-white transition-colors">
                  zach@coach2coachnetwork.com
                </a>
              </div>
              <div className="flex items-center">
                <Phone className="w-5 h-5 text-emerald-400 mr-3" />
                <a href="tel:6783435084" className="text-gray-400 hover:text-white transition-colors">
                  678-343-5084
                </a>
              </div>
              <div className="flex items-start">
                <MapPin className="w-5 h-5 text-emerald-400 mr-3 mt-1" />
                <span className="text-gray-400">
                  Coach2Coach Network, LLC<br />
                  Atlanta, GA
                </span>
              </div>
            </div>
          </div>
        </div>

        <div className="border-t border-gray-800 mt-12 pt-8">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <p className="text-gray-400 text-sm">
              © 2024 Coach2Coach Network, LLC. All rights reserved.
            </p>
            <p className="text-emerald-400 font-semibold mt-2 md:mt-0">
              Where Coaches Get Paid
            </p>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
import { Award } from 'lucide-react';

interface FoundingCoachBadgeProps {
  size?: 'sm' | 'md' | 'lg';
  showLabel?: boolean;
}

export default function FoundingCoachBadge({ size = 'md', showLabel = true }: FoundingCoachBadgeProps) {
  const sizeClasses = {
    sm: 'text-xs px-2 py-0.5',
    md: 'text-sm px-3 py-1',
    lg: 'text-base px-4 py-1.5'
  };

  const iconSizes = {
    sm: 'w-3 h-3',
    md: 'w-4 h-4',
    lg: 'w-5 h-5'
  };

  return (
    <span className={`inline-flex items-center gap-1.5 bg-gradient-to-r from-amber-500 to-orange-500 text-white font-semibold rounded-full ${sizeClasses[size]} shadow-sm`}>
      <Award className={iconSizes[size]} />
      {showLabel && 'Founding Coach'}
    </span>
  );
}

import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Menu, X, ShoppingCart, User, Search, ArrowRight, Bell } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import AuthModal from './AuthModal';
import NotificationCenter from './NotificationCenter';
import Logo from './Logo';

interface HeaderProps {
  cartItems?: number;
}

const Header: React.FC<HeaderProps> = ({ cartItems = 0 }) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [authMode, setAuthMode] = useState<'signin' | 'signup'>('signin');
  const [searchQuery, setSearchQuery] = useState('');
  const [showSearchInput, setShowSearchInput] = useState(false);
  const { user, signOut } = useAuth();
  const location = useLocation();

  const isAdmin = user?.email === 'admin@coach2coachnetwork.com' || user?.email === 'zach@coach2coachnetwork.com';

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      window.location.href = `/browse?q=${encodeURIComponent(searchQuery.trim())}`;
    }
  };
  return (
    <header className="bg-slate-900 text-white shadow-lg relative z-50">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <div className="flex items-center justify-center space-x-4">
            <Link to="/" className="flex items-center space-x-4">
              <Logo className="w-12 h-12" />
              <div>
                <h1 className="text-2xl font-bold">Coach2Coach</h1>
                <p className="text-sm text-gray-300">Made for Coaches, by Coaches</p>
              </div>
            </Link>
          </div>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex space-x-8">
            <Link to="/" className={`hover:text-emerald-400 transition-colors ${location.pathname === '/' ? 'text-emerald-400' : ''}`}>
              Home
            </Link>
            <Link to="/browse" className={`hover:text-emerald-400 transition-colors ${location.pathname === '/browse' ? 'text-emerald-400' : ''}`}>
              Browse
            </Link>
            <Link to="/become-seller" className={`hover:text-emerald-400 transition-colors ${location.pathname === '/become-seller' ? 'text-emerald-400' : ''}`}>
              Become a Seller
            </Link>
            <Link to="/about" className={`hover:text-emerald-400 transition-colors ${location.pathname === '/about' ? 'text-emerald-400' : ''}`}>
              About
            </Link>
            <Link to="/contact" className={`hover:text-emerald-400 transition-colors ${location.pathname === '/contact' ? 'text-emerald-400' : ''}`}>
              Contact
            </Link>
            <Link to="/community-hub" className={`hover:text-emerald-400 transition-colors ${location.pathname === '/community-hub' ? 'text-emerald-400' : ''}`}>
              Community
            </Link>
            {isAdmin && (
              <Link to="/admin" className="hover:text-emerald-400 transition-colors bg-red-600 px-3 py-1 rounded text-sm">
                Admin
              </Link>
            )}
          </nav>

          {/* Desktop Actions */}
          <div className="hidden md:flex items-center space-x-4">
            {/* Notifications */}
            {user && (
              <NotificationCenter />
            )}
            
            {/* Search */}
            <div className="relative">
              {showSearchInput ? (
                <form onSubmit={handleSearch} className="flex items-center">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <input
                      type="text"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      onBlur={() => {
                        if (!searchQuery.trim()) {
                          setTimeout(() => setShowSearchInput(false), 100);
                        }
                      }}
                      placeholder="Search resources..."
                      className="pl-10 pr-4 py-2 w-64 bg-slate-800 border border-slate-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-emerald-500"
                      autoFocus
                    />
                  </div>
                  <button
                    type="submit"
                    className="ml-2 p-2 bg-emerald-600 hover:bg-emerald-700 rounded-lg transition-colors"
                  >
                    <ArrowRight className="w-4 h-4" />
                  </button>
                </form>
              ) : (
                <button 
                  onClick={() => setShowSearchInput(true)}
                  className="p-2 hover:bg-slate-800 rounded-lg transition-colors"
                >
                  <Search className="w-5 h-5" />
                </button>
              )}
            </div>
            
            <button className="p-2 hover:bg-slate-800 rounded-lg transition-colors relative">
              <ShoppingCart className="w-5 h-5" />
              {cartItems > 0 && (
                <span className="absolute -top-1 -right-1 bg-emerald-500 text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {cartItems}
                </span>
              )}
            </button>
            
            {user ? (
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-300">
                  Welcome, {user.firstName || user.email}
                </span>
                <Link 
                  to="/profile"
                  className="border border-gray-600 hover:border-gray-500 px-4 py-2 rounded-lg font-semibold transition-colors text-white no-underline"
                >
                  My Profile
                </Link>
                <Link 
                  to="/upload"
                  className="bg-emerald-600 hover:bg-emerald-700 px-4 py-2 rounded-lg font-semibold transition-colors text-white no-underline"
                >
                  Upload
                </Link>
                <Link 
                  to="/account"
                  className="border border-gray-600 hover:border-gray-500 px-4 py-2 rounded-lg font-semibold transition-colors text-white no-underline"
                >
                  Account
                </Link>
                <button 
                  onClick={() => signOut()}
                  className="border border-gray-600 hover:border-gray-500 px-4 py-2 rounded-lg font-semibold transition-colors"
                >
                  Sign Out
                </button>
              </div>
            ) : (
              <>
                <div className="text-xs text-gray-400 bg-slate-800 px-2 py-1 rounded">
                  💡 Try: mike.johnson@email.com
                </div>
                <div className="text-xs text-gray-400 bg-slate-800 px-2 py-1 rounded">
                  🆕 Or create new account
                </div>
                <button 
                  onClick={() => {
                    setAuthMode('signin');
                    setIsAuthModalOpen(true);
                  }}
                  className="p-2 hover:bg-slate-800 rounded-lg transition-colors"
                >
                  <User className="w-5 h-5" />
                </button>
                <button 
                  onClick={() => {
                    setAuthMode('signup');
                    setIsAuthModalOpen(true);
                  }}
                  className="bg-emerald-600 hover:bg-emerald-700 px-4 py-2 rounded-lg font-semibold transition-colors"
                >
                  Sign Up
                </button>
              </>
            )}
          </div>

          {/* Notifications */}
          {user && (
            <NotificationCenter />
          )}
          
          {/* Mobile Menu Button */}
          <button 
            className="md:hidden p-2 hover:bg-slate-800 rounded-lg transition-colors"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
          </button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="md:hidden absolute top-16 left-0 right-0 bg-slate-900 border-t border-slate-800 py-4">
            <nav className="flex flex-col space-y-2 px-4">
              {/* Mobile Search */}
              <div className="py-2 border-b border-slate-800 mb-2">
                <form onSubmit={handleSearch} className="flex items-center space-x-2">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <input
                      type="text"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      placeholder="Search resources..."
                      className="w-full pl-10 pr-4 py-2 bg-slate-800 border border-slate-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                  <button
                    type="submit"
                    className="p-2 bg-emerald-600 hover:bg-emerald-700 rounded-lg transition-colors"
                  >
                    <ArrowRight className="w-4 h-4" />
                  </button>
                </form>
              </div>
              
              <Link to="/" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                Home
              </Link>
              <Link to="/browse" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                Browse Resources
              </Link>
              <Link to="/profile" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                Your Profile
              </Link>
              <Link to="/community" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                Community
              </Link>
              <Link to="/become-seller" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                Become a Seller
              </Link>
              <Link to="/about" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                About
              </Link>
              <Link to="/contact" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                Contact
              </Link>
              <Link to="/community-hub" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                Community Hub
              </Link>
              {user && (
                <Link to="/account" className="py-2 hover:text-emerald-400 transition-colors" onClick={() => setIsMenuOpen(false)}>
                  Account Settings
                </Link>
              )}
              {isAdmin && (
                <>
                  <Link to="/admin" className="hover:text-emerald-400 transition-colors bg-red-600 px-3 py-1 rounded text-sm">
                    Admin
                  </Link>
                  <Link to="/moderation" className="hover:text-emerald-400 transition-colors bg-orange-600 px-3 py-1 rounded text-sm">
                    Moderation
                  </Link>
                </>
              )}
              <div className="pt-4 border-t border-slate-800 flex space-x-4">
                {user ? (
                  <button 
                    onClick={() => signOut()}
                    className="border border-slate-600 hover:border-slate-500 px-4 py-2 rounded-lg transition-colors w-full"
                  >
                    Sign Out
                  </button>
                ) : (
                  <>
                    <button 
                      onClick={() => {
                        setAuthMode('signup');
                        setIsAuthModalOpen(true);
                        setIsMenuOpen(false);
                      }}
                      className="bg-emerald-600 hover:bg-emerald-700 px-4 py-2 rounded-lg font-semibold transition-colors flex-1"
                    >
                      Sign Up
                    </button>
                    <button 
                      onClick={() => {
                        setAuthMode('signin');
                        setIsAuthModalOpen(true);
                        setIsMenuOpen(false);
                      }}
                      className="border border-slate-600 hover:border-slate-500 px-4 py-2 rounded-lg transition-colors flex-1"
                    >
                      Login
                    </button>
                  </>
                )}
              </div>
            </nav>
          </div>
        )}
      </div>
      
      {/* Auth Modal */}
      <AuthModal 
        isOpen={isAuthModalOpen}
        onClose={() => setIsAuthModalOpen(false)}
        defaultMode={authMode}
      />
    </header>
  );
};

export default Header;
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Search, ArrowRight } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { getUserRole, getAudienceContent } from '../lib/userRole';

const CATEGORIES = ['Baseball', 'Football', 'Basketball', 'Soccer', 'Strength & Conditioning'];

export default function Hero() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [searchQuery, setSearchQuery] = useState('');
  const [isCoach, setIsCoach] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadUserRole() {
      const role = await getUserRole(user?.id || null);
      setIsCoach(role.isCoach);
      setLoading(false);
    }
    loadUserRole();
  }, [user]);

  const content = getAudienceContent(isCoach);

  function handleSearch(e: React.FormEvent) {
    e.preventDefault();
    if (searchQuery.trim()) {
      navigate(`/browse?q=${encodeURIComponent(searchQuery.trim())}`);
    } else {
      navigate('/browse');
    }
  }

  function handleCategoryClick(category: string) {
    navigate(`/browse?sport=${encodeURIComponent(category)}`);
  }

  if (loading) {
    return (
      <section className="bg-gradient-to-br from-slate-900 via-slate-800 to-emerald-900 text-white py-20">
        <div className="container mx-auto px-4 text-center">
          <div className="animate-pulse">
            <div className="h-12 bg-gray-700 rounded w-3/4 mx-auto mb-4"></div>
            <div className="h-6 bg-gray-700 rounded w-1/2 mx-auto"></div>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="bg-gradient-to-br from-slate-900 via-slate-800 to-emerald-900 text-white py-20 relative overflow-hidden">
      <div className="absolute inset-0 opacity-10">
        <div className="absolute top-20 left-10 text-6xl font-bold">X</div>
        <div className="absolute top-40 right-20 text-6xl font-bold">O</div>
        <div className="absolute bottom-20 left-20 text-4xl">→</div>
        <div className="absolute bottom-40 right-10 text-4xl">↗</div>
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <div className="max-w-4xl mx-auto text-center">
          <p className="text-5xl md:text-7xl mb-2 text-emerald-400 font-bold">
            {content.hero.subtitle}
          </p>

          <h1 className="text-4xl md:text-6xl font-bold mb-4 leading-tight whitespace-nowrap">
            {content.hero.title}
          </h1>

          <p className="text-lg md:text-xl mb-8 text-gray-300 max-w-2xl mx-auto">
            {content.hero.description}
          </p>

          <form onSubmit={handleSearch} className="mb-6">
            <div className="relative max-w-2xl mx-auto">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder={content.hero.searchPlaceholder}
                className="w-full px-6 py-4 pr-12 rounded-lg text-gray-900 text-lg focus:outline-none focus:ring-4 focus:ring-emerald-500"
                aria-label="Search coaching resources"
              />
              <button
                type="submit"
                className="absolute right-2 top-1/2 -translate-y-1/2 bg-emerald-600 hover:bg-emerald-700 text-white p-3 rounded-lg transition-colors"
                aria-label="Search"
              >
                <Search className="w-5 h-5" />
              </button>
            </div>
          </form>

          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {CATEGORIES.map((category) => (
              <button
                key={category}
                onClick={() => handleCategoryClick(category)}
                className="px-4 py-2 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-full text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-emerald-900"
              >
                {category}
              </button>
            ))}
          </div>

          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              onClick={() => navigate(content.ctas.primaryLink)}
              className="bg-emerald-600 hover:bg-emerald-700 px-8 py-4 rounded-lg font-bold text-lg transition-all transform hover:scale-105 flex items-center justify-center text-white focus:outline-none focus:ring-4 focus:ring-emerald-500"
            >
              {content.ctas.primary}
              <ArrowRight className="ml-2 w-5 h-5" />
            </button>
            <button
              onClick={() => navigate(content.ctas.secondaryLink)}
              className="border-2 border-white hover:bg-white hover:text-slate-900 px-8 py-4 rounded-lg font-bold text-lg transition-all text-white flex items-center justify-center focus:outline-none focus:ring-4 focus:ring-white"
            >
              {content.ctas.secondary}
            </button>
          </div>
        </div>
      </div>
    </section>
  );
}

import { useState } from 'react';
import { Search, ShoppingCart, FileCheck, UserPlus, Upload, DollarSign } from 'lucide-react';

interface HowItWorksTabsProps {
  defaultTab?: 'buyers' | 'coaches';
}

export default function HowItWorksTabs({ defaultTab = 'buyers' }: HowItWorksTabsProps) {
  const [activeTab, setActiveTab] = useState<'buyers' | 'coaches'>(defaultTab);

  const buyerSteps = [
    { icon: Search, title: 'Find a resource', description: 'Browse hundreds of coaching drills and playbooks' },
    { icon: ShoppingCart, title: 'Buy & download', description: 'Secure checkout, instant access to files' },
    { icon: FileCheck, title: 'Use in practice today', description: 'Print or use digitally with your team' },
  ];

  const coachSteps = [
    { icon: UserPlus, title: 'Create profile', description: 'Set up your coaching profile in minutes' },
    { icon: Upload, title: 'Upload PDF/DOCX', description: 'Share your drills, plays, and practice plans' },
    { icon: DollarSign, title: 'Get paid', description: 'Keep 85% of every sale, paid directly to you' },
  ];

  const steps = activeTab === 'buyers' ? buyerSteps : coachSteps;

  return (
    <div className="bg-white py-16">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-bold text-center text-gray-900 mb-8">
          How It Works
        </h2>

        <div className="flex justify-center mb-8">
          <div className="inline-flex rounded-lg border border-gray-300 p-1">
            <button
              onClick={() => setActiveTab('buyers')}
              className={`px-6 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'buyers'
                  ? 'bg-emerald-600 text-white'
                  : 'text-gray-700 hover:text-gray-900'
              }`}
              aria-pressed={activeTab === 'buyers'}
            >
              For Buyers
            </button>
            <button
              onClick={() => setActiveTab('coaches')}
              className={`px-6 py-2 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'coaches'
                  ? 'bg-emerald-600 text-white'
                  : 'text-gray-700 hover:text-gray-900'
              }`}
              aria-pressed={activeTab === 'coaches'}
            >
              For Coaches
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {steps.map((step, index) => (
            <div key={index} className="text-center">
              <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-emerald-100 text-emerald-600 mb-4">
                <step.icon className="w-8 h-8" aria-hidden="true" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {index + 1}. {step.title}
              </h3>
              <p className="text-gray-600">{step.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import { supabaseClient } from '../lib/supabaseClient';

export default function LoginFormSimple() {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!email || !password) {
      toast.error('Please enter both email and password');
      return;
    }

    setIsLoading(true);

    try {
      const { data, error } = await supabaseClient.auth.signInWithPassword({
        email,
        password
      });

      if (error) {
        if (error.message.includes('Email not confirmed')) {
          toast.error('Please verify your email before logging in. Check your inbox.');
        } else if (error.message.includes('Invalid login credentials')) {
          toast.error('Invalid email or password');
        } else {
          toast.error(error.message);
        }
        setIsLoading(false);
        return;
      }

      toast.success('Welcome back!');
      navigate('/user-profile');

    } catch (error) {
      console.error('Login error:', error);
      toast.error('An unexpected error occurred. Please try again.');
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-900">Sign In</h2>
          <p className="mt-2 text-sm text-gray-600">
            Welcome back! Please sign in to your account
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email
            </label>
            <input
              id="email"
              name="email"
              type="email"
              required
              aria-label="Email address"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              required
              aria-label="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          <button
            type="submit"
            disabled={isLoading}
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
              isLoading
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
            }`}
          >
            {isLoading ? (
              <span className="flex items-center">
                <svg
                  className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  ></path>
                </svg>
                Signing in...
              </span>
            ) : (
              'Sign In'
            )}
          </button>

          <p className="text-center text-sm text-gray-600">
            Don't have an account?{' '}
            <a href="/signup" className="font-medium text-blue-600 hover:text-blue-500">
              Sign up
            </a>
          </p>
        </form>
      </div>
    </div>
  );
}

import React from 'react';

interface LogoProps {
  className?: string;
}

const Logo: React.FC<LogoProps> = ({ className = "w-20 h-20" }) => {
  return (
    <svg 
      viewBox="0 0 200 120" 
      className={className}
      xmlns="http://www.w3.org/2000/svg"
    >
      {/* Circular pattern of X's, O's and arrows */}
      <g className="fill-white text-white">
        {/* Top */}
        <text x="100" y="15" textAnchor="middle" fontSize="12" fontWeight="bold">X</text>
        <text x="115" y="20" textAnchor="middle" fontSize="10">↘</text>
        <text x="130" y="30" textAnchor="middle" fontSize="12" fontWeight="bold">O</text>
        <text x="140" y="45" textAnchor="middle" fontSize="10">↓</text>
        
        {/* Right */}
        <text x="145" y="60" textAnchor="middle" fontSize="12" fontWeight="bold">X</text>
        <text x="140" y="75" textAnchor="middle" fontSize="10">↙</text>
        <text x="130" y="90" textAnchor="middle" fontSize="12" fontWeight="bold">O</text>
        <text x="115" y="100" textAnchor="middle" fontSize="10">←</text>
        
        {/* Bottom */}
        <text x="100" y="105" textAnchor="middle" fontSize="12" fontWeight="bold">X</text>
        <text x="85" y="100" textAnchor="middle" fontSize="10">↖</text>
        <text x="70" y="90" textAnchor="middle" fontSize="12" fontWeight="bold">O</text>
        <text x="60" y="75" textAnchor="middle" fontSize="10">↑</text>
        
        {/* Left */}
        <text x="55" y="60" textAnchor="middle" fontSize="12" fontWeight="bold">X</text>
        <text x="60" y="45" textAnchor="middle" fontSize="10">↗</text>
        <text x="70" y="30" textAnchor="middle" fontSize="12" fontWeight="bold">O</text>
        <text x="85" y="20" textAnchor="middle" fontSize="10">→</text>
        
        {/* "2Coach" in emerald green */}
        <text x="100" y="70" textAnchor="middle" fontSize="18" fontWeight="bold" className="fill-emerald-500">
          2Coach
        </text>
      </g>
      
      {/* Tagline */}
      <text x="100" y="115" textAnchor="middle" fontSize="8" className="fill-gray-300">
        Where coaches get paid
      </text>
    </svg>
  );
};

export default Logo;
// Global membership status banner

import React from 'react';
import { AlertTriangle, Crown, Calendar, CreditCard, X } from 'lucide-react';
import { UserMembership, getMembershipStatusText, getTrialDaysRemaining } from '../lib/membership';
import { api } from '../lib/api';

interface MembershipBannerProps {
  membership: UserMembership;
  onDismiss?: () => void;
}

const MembershipBanner: React.FC<MembershipBannerProps> = ({ membership, onDismiss }) => {
  const [loading, setLoading] = React.useState(false);
  const [dismissed, setDismissed] = React.useState(false);

  if (dismissed || membership.membershipStatus === 'active') {
    return null;
  }

  const handleUpgrade = async () => {
    setLoading(true);
    
    try {
      const result = await api.createSubscriptionCheckout('current-user-id');
      
      if (result.success && result.data?.url) {
        window.location.href = result.data.url;
      }
    } catch (error) {
      console.error('Upgrade error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleManageBilling = async () => {
    setLoading(true);
    
    try {
      const result = await api.createBillingPortal('current-user-id');
      
      if (result.success && result.data?.url) {
        window.location.href = result.data.url;
      }
    } catch (error) {
      console.error('Billing portal error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDismiss = () => {
    setDismissed(true);
    onDismiss?.();
  };

  // Trial banner
  if (membership.membershipStatus === 'trial') {
    const daysRemaining = getTrialDaysRemaining(membership);
    
    return (
      <div className="bg-blue-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-3">
            <div className="flex items-center">
              <Calendar className="w-5 h-5 mr-3" />
              <span className="font-medium">
                Free Trial: {daysRemaining} day{daysRemaining !== 1 ? 's' : ''} remaining
              </span>
              <span className="ml-2 text-blue-200">
                • Upgrade for unlimited downloads and creator tools
              </span>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={handleUpgrade}
                disabled={loading}
                className="bg-white text-blue-600 hover:bg-blue-50 px-4 py-1 rounded-lg font-semibold text-sm transition-colors"
              >
                {loading ? 'Loading...' : 'Upgrade Now'}
              </button>
              <button
                onClick={handleDismiss}
                className="text-blue-200 hover:text-white p-1"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Past due banner
  if (membership.membershipStatus === 'past_due') {
    return (
      <div className="bg-red-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-3">
            <div className="flex items-center">
              <AlertTriangle className="w-5 h-5 mr-3" />
              <span className="font-medium">
                Payment Past Due - Update your payment method to restore access
              </span>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={handleManageBilling}
                disabled={loading}
                className="bg-white text-red-600 hover:bg-red-50 px-4 py-1 rounded-lg font-semibold text-sm transition-colors flex items-center"
              >
                <CreditCard className="w-4 h-4 mr-1" />
                {loading ? 'Loading...' : 'Update Payment'}
              </button>
              <button
                onClick={handleDismiss}
                className="text-red-200 hover:text-white p-1"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Canceled banner
  if (membership.membershipStatus === 'canceled') {
    return (
      <div className="bg-gray-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-3">
            <div className="flex items-center">
              <Crown className="w-5 h-5 mr-3" />
              <span className="font-medium">
                Membership Canceled - Reactivate to regain full access
              </span>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={handleUpgrade}
                disabled={loading}
                className="bg-emerald-600 text-white hover:bg-emerald-700 px-4 py-1 rounded-lg font-semibold text-sm transition-colors"
              >
                {loading ? 'Loading...' : 'Reactivate'}
              </button>
              <button
                onClick={handleDismiss}
                className="text-gray-200 hover:text-white p-1"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return null;
};

export default MembershipBanner;
// Membership gate component for protecting features

import React from 'react';
import { Crown, Lock, ArrowRight, Calendar, AlertTriangle } from 'lucide-react';
import { UserMembership, getMembershipStatusText, getUpgradeMessage, needsUpgrade } from '../lib/membership';
import { api } from '../lib/api';

interface MembershipGateProps {
  membership: UserMembership;
  action: 'upload' | 'purchase' | 'download';
  children: React.ReactNode;
  fallback?: React.ReactNode;
  className?: string;
}

const MembershipGate: React.FC<MembershipGateProps> = ({
  membership,
  action,
  children,
  fallback,
  className = ''
}) => {
  const [loading, setLoading] = React.useState(false);

  const requiresUpgrade = needsUpgrade(membership, action);

  const handleUpgrade = async () => {
    setLoading(true);
    
    try {
      const result = await api.createSubscriptionCheckout('current-user-id');
      
      if (result.success && result.data?.url) {
        window.location.href = result.data.url;
      } else {
        alert('Failed to start upgrade process. Please try again.');
      }
    } catch (error) {
      console.error('Upgrade error:', error);
      alert('Failed to start upgrade process. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  if (!requiresUpgrade) {
    return <>{children}</>;
  }

  if (fallback) {
    return <>{fallback}</>;
  }

  // Default upgrade prompt
  return (
    <div className={`bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center ${className}`}>
      <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
        {action === 'upload' ? (
          <Crown className="w-8 h-8 text-emerald-600" />
        ) : action === 'purchase' ? (
          <Lock className="w-8 h-8 text-emerald-600" />
        ) : (
          <AlertTriangle className="w-8 h-8 text-emerald-600" />
        )}
      </div>
      
      <h3 className="text-2xl font-bold text-slate-900 mb-2">
        {action === 'upload' ? 'Start Selling Your Expertise' : 
         action === 'purchase' ? 'Unlock Full Access' : 
         'Premium Feature'}
      </h3>
      
      <p className="text-gray-600 mb-6 max-w-md mx-auto">
        {getUpgradeMessage(membership, action)}
      </p>

      <div className="space-y-4">
        <button
          onClick={handleUpgrade}
          disabled={loading}
          className="bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white px-8 py-3 rounded-lg font-bold text-lg transition-colors flex items-center justify-center mx-auto"
        >
          {loading ? (
            'Starting upgrade...'
          ) : (
            <>
              <Crown className="w-5 h-5 mr-2" />
              Upgrade to Active Membership
              <ArrowRight className="w-5 h-5 ml-2" />
            </>
          )}
        </button>

        <div className="text-sm text-gray-500">
          <div className="flex items-center justify-center mb-2">
            <Calendar className="w-4 h-4 mr-1" />
            7-day free trial • $5.99/month after
          </div>
          <p>Cancel anytime • Unlimited downloads • Creator tools</p>
        </div>
      </div>
    </div>
  );
};

export default MembershipGate;
import React, { useState } from 'react';
import { Crown, CreditCard, Calendar, Users, ArrowRight, Loader, CheckCircle, AlertCircle, Share2, Upload, Download, MessageCircle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { useMembership } from '../hooks/useMembership';
import { 
  getMembershipStatusText, 
  getMembershipStatusColor, 
  canUploadOrSell, 
  canPurchase,
  canDownloadFull,
  isInTrial,
  getTrialDaysRemaining,
  getAccessDescription
} from '../lib/membership';
import { api } from '../lib/api';

const MembershipPanel: React.FC = () => {
  const { user } = useAuth();
  const { membership, loading: membershipLoading, refreshMembership } = useMembership();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [copied, setCopied] = useState(false);

  if (!user || membershipLoading) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
          <div className="h-3 bg-gray-200 rounded w-3/4"></div>
        </div>
      </div>
    );
  }

  if (!membership) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="text-center">
          <Crown className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-slate-900 mb-2">Join Coach2Coach</h3>
          <p className="text-gray-600 mb-4">Sign in to start your 7-day free trial</p>
        </div>
      </div>
    );
  }

  const canUpload = canUploadOrSell(membership);
  const canBuy = canPurchase(membership);
  const canDownload = canDownloadFull(membership);
  const inTrial = isInTrial(membership);
  const trialDaysRemaining = getTrialDaysRemaining(membership);

  const referralLink = user?.id ? `${window.location.origin}/signup?ref=${user.id}` : '';

  const copyReferralLink = async () => {
    if (referralLink) {
      try {
        await navigator.clipboard.writeText(referralLink);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      } catch (error) {
        console.error('Failed to copy link:', error);
      }
    }
  };

  const handleStartTrial = async () => {
    setLoading(true);
    setError('');

    try {
      const result = await api.createSubscriptionCheckout(user.id);
      
      if (result.success && result.data?.url) {
        window.location.href = result.data.url;
      } else {
        throw new Error(result.error || 'Failed to create checkout session');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to start trial');
    } finally {
      setLoading(false);
    }
  };

  const handleManageSubscription = async () => {
    setLoading(true);
    setError('');

    try {
      const result = await api.createBillingPortal(user.id);
      
      if (result.success && result.data?.url) {
        window.location.href = result.data.url;
      } else {
        throw new Error(result.error || 'Failed to create portal session');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to open billing portal');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <div className="w-12 h-12 bg-emerald-100 rounded-full flex items-center justify-center mr-4">
            <Crown className="w-6 h-6 text-emerald-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-slate-900">Membership</h3>
            <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getMembershipStatusColor(membership.membershipStatus)}`}>
              {getMembershipStatusText(membership.membershipStatus)}
            </div>
          </div>
        </div>
      </div>

      {/* Error Message */}
      {error && (
        <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center">
          <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
          <span className="text-red-700 text-sm">{error}</span>
        </div>
      )}

      {/* Trial Status */}
      {inTrial && (
        <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg">
          <div className="flex items-center mb-2">
            <Calendar className="w-5 h-5 text-blue-600 mr-2" />
            <span className="font-semibold text-blue-800">Free Trial Active</span>
          </div>
          <p className="text-blue-700 text-sm mb-3">
            {trialDaysRemaining} days remaining in your trial
          </p>
          <div className="w-full bg-blue-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((7 - trialDaysRemaining) / 7) * 100}%` }}
            ></div>
          </div>
        </div>
      )}

      {/* Active Membership */}
      {membership.membershipStatus === 'active' && (
        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center mb-2">
            <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
            <span className="font-semibold text-green-800">Active Membership</span>
          </div>
          <p className="text-green-700 text-sm">
            {membership.membershipCurrentPeriodEnd 
              ? `Your membership renews on ${new Date(membership.membershipCurrentPeriodEnd).toLocaleDateString()}`
              : 'Active membership with full access'
            }
          </p>
        </div>
      )}

      {/* Past Due Status */}
      {membership.membershipStatus === 'past_due' && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center mb-2">
            <AlertTriangle className="w-5 h-5 text-red-600 mr-2" />
            <span className="font-semibold text-red-800">Payment Past Due</span>
          </div>
          <p className="text-red-700 text-sm">
            Update your payment method to restore full access
          </p>
        </div>
      )}

      {/* Features */}
      <div className="mb-6">
        <h4 className="font-semibold text-slate-900 mb-3">Your Access</h4>
        <p className="text-sm text-gray-600 mb-3">{getAccessDescription(membership)}</p>
        <div className="space-y-2">
          <div className="flex items-center">
            <CheckCircle className="w-4 h-4 text-green-500 mr-2" />
            <span className="text-sm text-gray-700">Browse and preview resources</span>
          </div>
          <div className="flex items-center">
            <MessageCircle className="w-4 h-4 text-green-500 mr-2" />
            <span className="text-sm text-gray-700">Community discussions & messaging</span>
          </div>
          <div className="flex items-center">
            {canDownload ? (
              <CheckCircle className="w-4 h-4 text-green-500 mr-2" />
            ) : (
              <Download className="w-4 h-4 text-gray-400 mr-2" />
            )}
            <span className={`text-sm ${canDownload ? 'text-gray-700' : 'text-gray-400'}`}>
              Unlimited downloads
              {!canDownload && ' (Active membership required)'}
            </span>
          </div>
          <div className="flex items-center">
            {canUpload ? (
              <CheckCircle className="w-4 h-4 text-green-500 mr-2" />
            ) : (
              <Upload className="w-4 h-4 text-gray-400 mr-2" />
            )}
            <span className={`text-sm ${canUpload ? 'text-gray-700' : 'text-gray-400'}`}>
              Upload & sell resources
              {!canUpload && ' (Active membership + creator setup required)'}
            </span>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="space-y-3">
        {(membership.membershipStatus === 'trial' || membership.membershipStatus === 'none') && (
          <button
            onClick={handleStartTrial}
            disabled={loading}
            className="w-full bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
          >
            {loading ? (
              <Loader className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <Crown className="w-4 h-4 mr-2" />
            )}
            {loading ? 'Starting...' : membership.membershipStatus === 'none' ? 'Start Free Trial' : 'Upgrade to Full Access'}
          </button>
        )}

        {membership.membershipStatus !== 'none' && membership.membershipStatus !== 'trial' && (
          <button
            onClick={handleManageSubscription}
            disabled={loading}
            className="w-full border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
          >
            {loading ? (
              <Loader className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <CreditCard className="w-4 h-4 mr-2" />
            )}
            {loading ? 'Loading...' : 'Manage Subscription'}
          </button>
        )}

        {/* Referral Link */}
        {user?.id && (
          <div className="pt-3 border-t border-gray-200">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Share & Earn</span>
              <span className="text-xs text-emerald-600 font-medium">
                0/5 qualified
              </span>
            </div>
            <button
              onClick={copyReferralLink}
              className="w-full flex items-center justify-center px-3 py-2 border border-emerald-300 text-emerald-600 hover:bg-emerald-50 rounded-lg text-sm font-medium transition-colors"
            >
              {copied ? (
                <>
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Link Copied!
                </>
              ) : (
                <>
                  <Share2 className="w-4 h-4 mr-2" />
                  Copy Referral Link
                </>
              )}
            </button>
          </div>
        )}
      </div>

      {/* Upgrade Benefits */}
      {inTrial && (
        <div className="mt-4 pt-4 border-t border-gray-200">
          <p className="text-xs text-gray-600 text-center">
            Upgrade for unlimited downloads, creator tools, and the ability to upload & sell resources
          </p>
        </div>
      )}
    </div>
  );
};

export default MembershipPanel;
import React, { useState, useEffect } from 'react';
import { MessageCircle, Users, Search, Send, User, Plus, X } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { messaging, initializeMessagingData } from '../lib/messaging';
import { userStorage, profileStorage } from '../lib/localStorage';

const MessagingCenter: React.FC = () => {
  const { user } = useAuth();
  const [conversations, setConversations] = useState<any[]>([]);
  const [selectedConversation, setSelectedConversation] = useState<any>(null);
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [showNewConversation, setShowNewConversation] = useState(false);

  useEffect(() => {
    initializeMessagingData();
    if (user) {
      loadConversations();
    }
  }, [user]);

  const loadConversations = async () => {
    if (!user) return;
    
    try {
      const convos = await messaging.getConversations(user.id);
      setConversations(convos);
      
      // Auto-select first conversation if available
      if (convos.length > 0 && !selectedConversation) {
        setSelectedConversation(convos[0]);
        loadMessages(convos[0].id);
      }
    } catch (error) {
      console.error('Error loading conversations:', error);
    }
  };

  const loadMessages = async (conversationId: string) => {
    try {
      const msgs = await messaging.getMessages(conversationId);
      setMessages(msgs);
    } catch (error) {
      console.error('Error loading messages:', error);
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim() || !user || !selectedConversation) return;

    try {
      const message = await messaging.sendMessage({
        conversationId: selectedConversation.id,
        senderId: user.id,
        body: newMessage.trim()
      });

      setMessages(prev => [...prev, message]);
      setNewMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const getSenderName = (senderId: string) => {
    if (senderId === user?.id) return 'You';
    
    const sender = userStorage.getUserById(senderId);
    const profile = profileStorage.getProfileByUserId(senderId);
    
    if (profile) {
      return `${profile.firstName} ${profile.lastName}`;
    }
    if (sender) {
      return `${sender.firstName} ${sender.lastName}`;
    }
    return 'Coach';
  };

  const formatMessageTime = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 24) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else {
      return date.toLocaleDateString([], { month: 'short', day: 'numeric' });
    }
  };

  if (!user) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 text-center">
        <MessageCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-slate-900 mb-2">Join the Coach Community</h3>
        <p className="text-gray-600">Sign in to start messaging other coaches and join discussions</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden" style={{ height: '600px' }}>
      <div className="flex h-full">
        {/* Conversations Sidebar */}
        <div className="w-1/3 border-r border-gray-200 flex flex-col">
          {/* Header */}
          <div className="p-4 border-b border-gray-200 bg-gray-50">
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-semibold text-slate-900">Messages</h3>
              <button
                onClick={() => setShowNewConversation(true)}
                className="p-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors"
              >
                <Plus className="w-4 h-4" />
              </button>
            </div>
            
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search conversations..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-sm"
              />
            </div>
          </div>

          {/* Conversations List */}
          <div className="flex-1 overflow-y-auto">
            {conversations.length > 0 ? (
              <div className="p-2">
                {conversations.map((conversation) => (
                  <button
                    key={conversation.id}
                    onClick={() => {
                      setSelectedConversation(conversation);
                      loadMessages(conversation.id);
                    }}
                    className={`w-full p-3 rounded-lg text-left hover:bg-gray-50 transition-colors mb-2 ${
                      selectedConversation?.id === conversation.id ? 'bg-emerald-50 border border-emerald-200' : 'border border-transparent'
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                        <User className="w-4 h-4 text-gray-600" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-slate-900 text-sm truncate">
                          Coach Chat
                        </p>
                        <p className="text-xs text-gray-600 truncate">
                          Click to start messaging
                        </p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            ) : (
              <div className="flex-1 flex items-center justify-center p-4">
                <div className="text-center">
                  <MessageCircle className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-600">No conversations yet</p>
                  <button
                    onClick={() => setShowNewConversation(true)}
                    className="mt-2 text-emerald-600 hover:text-emerald-700 text-sm font-medium"
                  >
                    Start a conversation
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Chat Area */}
        <div className="flex-1 flex flex-col">
          {selectedConversation ? (
            <>
              {/* Chat Header */}
              <div className="p-4 border-b border-gray-200 bg-gray-50">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                    <User className="w-4 h-4 text-gray-600" />
                  </div>
                  <div>
                    <h4 className="font-semibold text-slate-900">Coach Chat</h4>
                    <p className="text-xs text-gray-600">Online</p>
                  </div>
                </div>
              </div>

              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-3">
                {messages.map((message) => {
                  const isOwn = message.senderId === user.id;
                  return (
                    <div key={message.id} className={`flex ${isOwn ? 'justify-end' : 'justify-start'}`}>
                      <div className={`max-w-xs px-4 py-2 rounded-lg ${
                        isOwn 
                          ? 'bg-emerald-600 text-white' 
                          : 'bg-gray-100 text-slate-900'
                      }`}>
                        {!isOwn && (
                          <p className="text-xs font-semibold mb-1 opacity-75">
                            {getSenderName(message.senderId)}
                          </p>
                        )}
                        <p className="text-sm">{message.body}</p>
                        <p className={`text-xs mt-1 ${isOwn ? 'text-emerald-100' : 'text-gray-500'}`}>
                          {formatMessageTime(message.createdAt)}
                        </p>
                      </div>
                    </div>
                  );
                })}
              </div>

              {/* Message Input */}
              <div className="p-4 border-t border-gray-200">
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                    placeholder="Type a message..."
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                  <button
                    onClick={sendMessage}
                    disabled={!newMessage.trim()}
                    className="p-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 transition-colors"
                  >
                    <Send className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </>
          ) : (
            <div className="flex-1 flex items-center justify-center">
              <div className="text-center">
                <MessageCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-slate-900 mb-2">Select a Conversation</h3>
                <p className="text-gray-600">Choose a conversation to start messaging</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* New Conversation Modal */}
      {showNewConversation && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-md w-full">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-bold text-slate-900">New Conversation</h3>
                <button
                  onClick={() => setShowNewConversation(false)}
                  className="p-2 hover:bg-gray-100 rounded-lg"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
              <p className="text-gray-600 text-center">
                Start messaging with other coaches in the community!
              </p>
              <button
                onClick={() => setShowNewConversation(false)}
                className="w-full mt-4 bg-emerald-600 hover:bg-emerald-700 text-white py-2 rounded-lg font-semibold transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MessagingCenter;
import React, { useState, useEffect } from 'react';
import { Bell, X, MessageCircle, DollarSign, CheckCheck } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface Notification {
  id: string;
  userId: string;
  type: string;
  title: string;
  body: string;
  link: string;
  readAt?: string;
  createdAt: string;
}

const NotificationCenter: React.FC = () => {
  const { user } = useAuth();
  const [isOpen, setIsOpen] = useState(false);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);

  useEffect(() => {
    if (user) {
      loadNotifications();
    }
  }, [user]);

  const loadNotifications = async () => {
    if (!user) return;

    try {
      // Mock notifications for demo
      const mockNotifications: Notification[] = [
        {
          id: '1',
          userId: user.id,
          type: 'new_message',
          title: 'New Message',
          body: 'Coach Mike Johnson sent you a message',
          link: '/messages',
          createdAt: '2024-01-16T10:30:00Z'
        },
        {
          id: '2',
          userId: user.id,
          type: 'new_sale',
          title: 'New Sale! 🎉',
          body: 'Someone purchased your "Advanced Ball Handling Drills"',
          link: '/analytics',
          readAt: '2024-01-15T16:20:00Z',
          createdAt: '2024-01-15T15:45:00Z'
        },
        {
          id: '3',
          userId: user.id,
          type: 'resource_approved',
          title: 'Resource Approved',
          body: 'Your "Team Defense Strategies" has been approved and is now live!',
          link: '/profile',
          readAt: '2024-01-14T09:15:00Z',
          createdAt: '2024-01-14T09:00:00Z'
        }
      ];

      setNotifications(mockNotifications);
      setUnreadCount(mockNotifications.filter(n => !n.readAt).length);
    } catch (error) {
      console.error('Error loading notifications:', error);
    }
  };

  const markAsRead = async (notificationId: string) => {
    try {
      setNotifications(prev => 
        prev.map(n => 
          n.id === notificationId 
            ? { ...n, readAt: new Date().toISOString() }
            : n
        )
      );
      setUnreadCount(prev => Math.max(0, prev - 1));
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  };

  const markAllAsRead = async () => {
    try {
      setNotifications(prev => 
        prev.map(n => ({ ...n, readAt: n.readAt || new Date().toISOString() }))
      );
      setUnreadCount(0);
    } catch (error) {
      console.error('Error marking all as read:', error);
    }
  };

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'new_message':
        return <MessageCircle className="w-4 h-4 text-blue-600" />;
      case 'new_sale':
        return <DollarSign className="w-4 h-4 text-green-600" />;
      case 'resource_approved':
        return <CheckCheck className="w-4 h-4 text-green-600" />;
      default:
        return <Bell className="w-4 h-4 text-gray-600" />;
    }
  };

  const formatTimeAgo = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours}h ago`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays}d ago`;
  };

  if (!user) return null;

  return (
    <div className="relative">
      {/* Notification Bell */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative p-2 text-gray-300 hover:text-white hover:bg-slate-800 rounded-lg transition-colors"
      >
        <Bell className="w-5 h-5" />
        {unreadCount > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
            {unreadCount > 9 ? '9+' : unreadCount}
          </span>
        )}
      </button>

      {/* Notification Panel */}
      {isOpen && (
        <>
          {/* Backdrop */}
          <div 
            className="fixed inset-0 z-40"
            onClick={() => setIsOpen(false)}
          />
          
          {/* Panel */}
          <div className="absolute right-0 top-full mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-96 overflow-hidden">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-200">
              <h3 className="font-semibold text-slate-900">Notifications</h3>
              <div className="flex items-center space-x-2">
                {unreadCount > 0 && (
                  <button
                    onClick={markAllAsRead}
                    className="text-sm text-emerald-600 hover:text-emerald-700 font-medium"
                  >
                    Mark all read
                  </button>
                )}
                <button
                  onClick={() => setIsOpen(false)}
                  className="p-1 text-gray-400 hover:text-gray-600 rounded"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Notifications List */}
            <div className="max-h-80 overflow-y-auto">
              {notifications.length > 0 ? (
                <div className="divide-y divide-gray-100">
                  {notifications.map((notification) => (
                    <div
                      key={notification.id}
                      className={`p-4 hover:bg-gray-50 cursor-pointer transition-colors ${
                        !notification.readAt ? 'bg-blue-50' : ''
                      }`}
                      onClick={() => {
                        markAsRead(notification.id);
                        if (notification.link) {
                          window.location.href = notification.link;
                        }
                        setIsOpen(false);
                      }}
                    >
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0">
                          {getNotificationIcon(notification.type)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center justify-between">
                            <p className={`text-sm font-medium ${
                              !notification.readAt ? 'text-slate-900' : 'text-gray-700'
                            }`}>
                              {notification.title}
                            </p>
                            {!notification.readAt && (
                              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            )}
                          </div>
                          <p className="text-sm text-gray-600 mt-1">
                            {notification.body}
                          </p>
                          <p className="text-xs text-gray-500 mt-1">
                            {formatTimeAgo(notification.createdAt)}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="p-8 text-center">
                  <Bell className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-gray-600 text-sm">No notifications yet</p>
                </div>
              )}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default NotificationCenter;
import React, { useState } from 'react';
import { CreditCard, Plus, Edit, Trash2, CheckCircle } from 'lucide-react';

interface PaymentMethod {
  id: string;
  type: 'card';
  last4: string;
  brand: string;
  expiryMonth: number;
  expiryYear: number;
  isDefault: boolean;
}

const PaymentMethods: React.FC = () => {
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([
    {
      id: '1',
      type: 'card',
      last4: '4242',
      brand: 'visa',
      expiryMonth: 12,
      expiryYear: 2025,
      isDefault: true
    }
  ]);

  const [showAddForm, setShowAddForm] = useState(false);
  const [newCard, setNewCard] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    name: ''
  });

  const getBrandIcon = (brand: string) => {
    switch (brand.toLowerCase()) {
      case 'visa':
        return '💳';
      case 'mastercard':
        return '💳';
      case 'amex':
        return '💳';
      default:
        return '💳';
    }
  };

  const formatCardNumber = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    if (parts.length) {
      return parts.join(' ');
    } else {
      return v;
    }
  };

  const formatExpiryDate = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    if (v.length >= 2) {
      return v.substring(0, 2) + '/' + v.substring(2, 4);
    }
    return v;
  };

  const handleAddCard = () => {
    // Mock adding a new card
    const newPaymentMethod: PaymentMethod = {
      id: Date.now().toString(),
      type: 'card',
      last4: newCard.cardNumber.slice(-4),
      brand: 'visa', // Mock brand detection
      expiryMonth: parseInt(newCard.expiryDate.split('/')[0]),
      expiryYear: 2000 + parseInt(newCard.expiryDate.split('/')[1]),
      isDefault: paymentMethods.length === 0
    };

    setPaymentMethods([...paymentMethods, newPaymentMethod]);
    setNewCard({ cardNumber: '', expiryDate: '', cvv: '', name: '' });
    setShowAddForm(false);
  };

  const handleSetDefault = (id: string) => {
    setPaymentMethods(methods =>
      methods.map(method => ({
        ...method,
        isDefault: method.id === id
      }))
    );
  };

  const handleDelete = (id: string) => {
    setPaymentMethods(methods => methods.filter(method => method.id !== id));
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      <div className="bg-white rounded-xl shadow-lg">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold text-slate-900">Payment Methods</h1>
              <p className="text-gray-600">Manage your saved payment methods</p>
            </div>
            <button
              onClick={() => setShowAddForm(true)}
              className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold flex items-center transition-colors"
            >
              <Plus className="w-4 h-4 mr-2" />
              Add Card
            </button>
          </div>
        </div>

        {/* Payment Methods List */}
        <div className="p-6">
          {paymentMethods.length > 0 ? (
            <div className="space-y-4">
              {paymentMethods.map((method) => (
                <div key={method.id} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="w-12 h-8 bg-gray-100 rounded flex items-center justify-center mr-4">
                        <span className="text-lg">{getBrandIcon(method.brand)}</span>
                      </div>
                      <div>
                        <div className="flex items-center">
                          <span className="font-semibold text-slate-900 capitalize">
                            {method.brand}
                          </span>
                          <span className="text-gray-600 ml-2">•••• {method.last4}</span>
                          {method.isDefault && (
                            <span className="ml-2 px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full flex items-center">
                              <CheckCircle className="w-3 h-3 mr-1" />
                              Default
                            </span>
                          )}
                        </div>
                        <p className="text-sm text-gray-500">
                          Expires {method.expiryMonth.toString().padStart(2, '0')}/{method.expiryYear}
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      {!method.isDefault && (
                        <button
                          onClick={() => handleSetDefault(method.id)}
                          className="text-emerald-600 hover:text-emerald-700 text-sm font-medium"
                        >
                          Set as Default
                        </button>
                      )}
                      <button className="p-2 text-gray-600 hover:text-blue-600 rounded-lg hover:bg-blue-50">
                        <Edit className="w-4 h-4" />
                      </button>
                      <button 
                        onClick={() => handleDelete(method.id)}
                        className="p-2 text-gray-600 hover:text-red-600 rounded-lg hover:bg-red-50"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <CreditCard className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-slate-900 mb-2">No Payment Methods</h3>
              <p className="text-gray-600 mb-6">Add a payment method to make purchases easier</p>
              <button
                onClick={() => setShowAddForm(true)}
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold"
              >
                Add Your First Card
              </button>
            </div>
          )}
        </div>

        {/* Add Card Form */}
        {showAddForm && (
          <div className="border-t border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-slate-900 mb-4">Add New Card</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Card Number</label>
                <input
                  type="text"
                  value={newCard.cardNumber}
                  onChange={(e) => setNewCard({
                    ...newCard,
                    cardNumber: formatCardNumber(e.target.value)
                  })}
                  placeholder="1234 5678 9012 3456"
                  maxLength={19}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Expiry Date</label>
                  <input
                    type="text"
                    value={newCard.expiryDate}
                    onChange={(e) => setNewCard({
                      ...newCard,
                      expiryDate: formatExpiryDate(e.target.value)
                    })}
                    placeholder="MM/YY"
                    maxLength={5}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">CVV</label>
                  <input
                    type="text"
                    value={newCard.cvv}
                    onChange={(e) => setNewCard({
                      ...newCard,
                      cvv: e.target.value.replace(/\D/g, '').slice(0, 4)
                    })}
                    placeholder="123"
                    maxLength={4}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Cardholder Name</label>
                <input
                  type="text"
                  value={newCard.name}
                  onChange={(e) => setNewCard({...newCard, name: e.target.value})}
                  placeholder="John Doe"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={() => setShowAddForm(false)}
                  className="flex-1 border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleAddCard}
                  className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white py-3 rounded-lg font-semibold transition-colors"
                >
                  Add Card
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PaymentMethods;
// Performance monitoring dashboard
import React, { useState, useEffect } from 'react';
import { 
  Zap, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Wifi, 
  Monitor,
  Smartphone,
  RefreshCw,
  TrendingDown,
  TrendingUp
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface WebVital {
  metric: string;
  value: number;
  threshold: number;
  status: 'good' | 'needs-improvement' | 'poor';
  description: string;
  unit: string;
}

interface PerformanceData {
  webVitals: WebVital[];
  pageSpeed: {
    desktop: number;
    mobile: number;
  };
  errorRate: number;
  uptime: number;
  avgResponseTime: number;
}

const PerformanceMonitor: React.FC = () => {
  const { user } = useAuth();
  const [performanceData, setPerformanceData] = useState<PerformanceData | null>(null);
  const [loading, setLoading] = useState(false);
  const [timeRange, setTimeRange] = useState<'1h' | '24h' | '7d' | '30d'>('24h');

  useEffect(() => {
    loadPerformanceData();
  }, [timeRange]);

  const loadPerformanceData = async () => {
    setLoading(true);
    try {
      // Mock performance data for demo
      const mockData: PerformanceData = {
        webVitals: [
          {
            metric: 'LCP',
            value: 2.1,
            threshold: 2.5,
            status: 'good',
            description: 'Largest Contentful Paint',
            unit: 's'
          },
          {
            metric: 'FID',
            value: 45,
            threshold: 100,
            status: 'good',
            description: 'First Input Delay',
            unit: 'ms'
          },
          {
            metric: 'CLS',
            value: 0.08,
            threshold: 0.1,
            status: 'good',
            description: 'Cumulative Layout Shift',
            unit: ''
          },
          {
            metric: 'TTFB',
            value: 180,
            threshold: 600,
            status: 'good',
            description: 'Time to First Byte',
            unit: 'ms'
          }
        ],
        pageSpeed: {
          desktop: 95,
          mobile: 87
        },
        errorRate: 0.02,
        uptime: 99.9,
        avgResponseTime: 145
      };

      setPerformanceData(mockData);
    } catch (error) {
      console.error('Error loading performance data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getVitalStatusIcon = (status: string) => {
    switch (status) {
      case 'good':
        return <CheckCircle className="w-5 h-5 text-green-600" />;
      case 'needs-improvement':
        return <AlertTriangle className="w-5 h-5 text-yellow-600" />;
      case 'poor':
        return <AlertTriangle className="w-5 h-5 text-red-600" />;
      default:
        return <Clock className="w-5 h-5 text-gray-600" />;
    }
  };

  const getVitalStatusColor = (status: string) => {
    switch (status) {
      case 'good':
        return 'bg-green-50 border-green-200 text-green-800';
      case 'needs-improvement':
        return 'bg-yellow-50 border-yellow-200 text-yellow-800';
      case 'poor':
        return 'bg-red-50 border-red-200 text-red-800';
      default:
        return 'bg-gray-50 border-gray-200 text-gray-800';
    }
  };

  const getPageSpeedColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  // Check if user is admin
  const isAdmin = user?.email === 'admin@coach2coachnetwork.com' || user?.email === 'zach@coach2coachnetwork.com';

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <Zap className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Access Denied</h2>
          <p className="text-gray-600">You don't have permission to access performance monitoring.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Performance Monitor</h1>
              <p className="text-gray-600">Core Web Vitals, speed metrics, and error tracking</p>
            </div>
            <div className="flex items-center space-x-4">
              <select
                value={timeRange}
                onChange={(e) => setTimeRange(e.target.value as any)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option value="1h">Last Hour</option>
                <option value="24h">Last 24 Hours</option>
                <option value="7d">Last 7 Days</option>
                <option value="30d">Last 30 Days</option>
              </select>
              <button
                onClick={loadPerformanceData}
                disabled={loading}
                className="flex items-center px-4 py-2 bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white rounded-lg font-semibold transition-colors"
              >
                <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                Refresh
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {performanceData && (
          <>
            {/* Overview Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Uptime</p>
                    <p className="text-2xl font-bold text-slate-900">{performanceData.uptime}%</p>
                    <div className="flex items-center mt-1">
                      <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
                      <span className="text-sm text-green-600">Excellent</span>
                    </div>
                  </div>
                  <div className="p-3 bg-green-100 rounded-lg">
                    <Wifi className="w-6 h-6 text-green-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Avg Response Time</p>
                    <p className="text-2xl font-bold text-slate-900">{performanceData.avgResponseTime}ms</p>
                    <div className="flex items-center mt-1">
                      <CheckCircle className="w-4 h-4 text-green-500 mr-1" />
                      <span className="text-sm text-green-600">Fast</span>
                    </div>
                  </div>
                  <div className="p-3 bg-blue-100 rounded-lg">
                    <Clock className="w-6 h-6 text-blue-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Error Rate</p>
                    <p className="text-2xl font-bold text-slate-900">{(performanceData.errorRate * 100).toFixed(2)}%</p>
                    <div className="flex items-center mt-1">
                      <CheckCircle className="w-4 h-4 text-green-500 mr-1" />
                      <span className="text-sm text-green-600">Low</span>
                    </div>
                  </div>
                  <div className="p-3 bg-green-100 rounded-lg">
                    <AlertTriangle className="w-6 h-6 text-green-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Page Speed</p>
                    <div className="flex items-center space-x-2">
                      <span className="text-lg font-bold text-slate-900">{performanceData.pageSpeed.desktop}</span>
                      <span className="text-sm text-gray-500">/</span>
                      <span className="text-lg font-bold text-slate-900">{performanceData.pageSpeed.mobile}</span>
                    </div>
                    <div className="flex items-center mt-1">
                      <Monitor className="w-3 h-3 text-gray-500 mr-1" />
                      <span className="text-xs text-gray-500">Desktop / Mobile</span>
                    </div>
                  </div>
                  <div className="p-3 bg-purple-100 rounded-lg">
                    <Zap className="w-6 h-6 text-purple-600" />
                  </div>
                </div>
              </div>
            </div>

            {/* Core Web Vitals */}
            <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
              <h3 className="text-lg font-semibold text-slate-900 mb-6">Core Web Vitals</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {performanceData.webVitals.map((vital, index) => (
                  <div key={index} className={`border rounded-lg p-4 ${getVitalStatusColor(vital.status)}`}>
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center">
                        {getVitalStatusIcon(vital.status)}
                        <span className="font-bold text-lg ml-2">{vital.metric}</span>
                      </div>
                      <span className="text-xs font-medium uppercase">{vital.status.replace('-', ' ')}</span>
                    </div>
                    
                    <div className="mb-2">
                      <span className="text-2xl font-bold">
                        {vital.value}{vital.unit}
                      </span>
                    </div>
                    
                    <div className="text-sm opacity-75 mb-3">
                      {vital.description}
                    </div>
                    
                    <div className="w-full bg-white bg-opacity-50 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full transition-all duration-300 ${
                          vital.status === 'good' ? 'bg-green-600' :
                          vital.status === 'needs-improvement' ? 'bg-yellow-600' :
                          'bg-red-600'
                        }`}
                        style={{ 
                          width: `${Math.min((vital.value / vital.threshold) * 100, 100)}%` 
                        }}
                      ></div>
                    </div>
                    
                    <div className="text-xs mt-1 opacity-75">
                      Threshold: {vital.threshold}{vital.unit}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Performance Recommendations */}
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6">
              <h3 className="text-lg font-bold text-slate-900 mb-4">🚀 Performance Recommendations</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="flex items-start">
                  <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                    <CheckCircle className="w-4 h-4 text-green-600" />
                  </div>
                  <div>
                    <h4 className="font-semibold text-slate-900">Excellent Performance</h4>
                    <p className="text-sm text-gray-600">All Core Web Vitals are in the "good" range</p>
                  </div>
                </div>
                <div className="flex items-start">
                  <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                    <Zap className="w-4 h-4 text-blue-600" />
                  </div>
                  <div>
                    <h4 className="font-semibold text-slate-900">Fast Loading</h4>
                    <p className="text-sm text-gray-600">Page speed scores are above 85 on both desktop and mobile</p>
                  </div>
                </div>
                <div className="flex items-start">
                  <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                    <Monitor className="w-4 h-4 text-purple-600" />
                  </div>
                  <div>
                    <h4 className="font-semibold text-slate-900">Optimized Images</h4>
                    <p className="text-sm text-gray-600">Continue using WebP format and lazy loading for images</p>
                  </div>
                </div>
              </div>
            </div>
          </>
        )}

        {loading && (
          <div className="bg-white rounded-xl shadow-sm p-12 text-center">
            <RefreshCw className="w-8 h-8 text-emerald-600 mx-auto mb-4 animate-spin" />
            <p className="text-gray-600">Loading performance data...</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default PerformanceMonitor;
import React, { useState, useEffect } from 'react';
import { Eye, Download, Lock, Loader, AlertCircle, FileText, Play, Image as ImageIcon } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { useMembership } from '../hooks/useMembership';
import { canDownloadFull } from '../lib/membership';

interface PreviewViewerProps {
  resourceId: string;
  title: string;
  price: number;
  onPurchaseClick?: () => void;
  className?: string;
}

interface PreviewStatus {
  processing: boolean;
  status: string;
  isPreviewReady: boolean;
  previewCount: number;
  lastError?: string;
}

const PreviewViewer: React.FC<PreviewViewerProps> = ({
  resourceId,
  title,
  price,
  onPurchaseClick,
  className = ''
}) => {
  const { user } = useAuth();
  const { membership } = useMembership();
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [previewStatus, setPreviewStatus] = useState<PreviewStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const canDownload = membership ? canDownloadFull(membership) : false;

  useEffect(() => {
    loadPreview();
    
    // Poll for preview status if processing
    const interval = setInterval(() => {
      if (previewStatus?.processing) {
        checkProcessingStatus();
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [resourceId]);

  const loadPreview = async () => {
    try {
      setLoading(true);
      setError('');

      // Get preview URL
      const response = await fetch(`/api/resources/${resourceId}/preview`);
      const data = await response.json();

      if (data.success && data.previewUrl) {
        setPreviewUrl(data.previewUrl);
        setPreviewStatus({
          processing: false,
          status: 'ready',
          isPreviewReady: true,
          previewCount: 1
        });
      } else if (data.processing) {
        setPreviewStatus({
          processing: true,
          status: data.status,
          isPreviewReady: false,
          previewCount: 0
        });
        // Start polling for status
        checkProcessingStatus();
      } else {
        setError('Preview not available');
      }
    } catch (err) {
      setError('Failed to load preview');
      console.error('Preview load error:', err);
    } finally {
      setLoading(false);
    }
  };

  const checkProcessingStatus = async () => {
    try {
      const response = await fetch(`/api/resources/${resourceId}/status`);
      const data = await response.json();

      if (data.success) {
        setPreviewStatus({
          processing: data.status === 'processing' || data.status === 'queued',
          status: data.status,
          isPreviewReady: data.isPreviewReady,
          previewCount: data.previewCount || 0
        });

        // If ready, reload preview
        if (data.isPreviewReady && !previewUrl) {
          loadPreview();
        }
      }
    } catch (err) {
      console.error('Status check error:', err);
    }
  };

  const handleDownload = () => {
    if (!canDownload) {
      onPurchaseClick?.();
      return;
    }

    // Trigger full download
    window.open(`/api/download/${resourceId}?userId=${user?.id}`, '_blank');
  };

  if (loading) {
    return (
      <div className={`bg-gray-50 rounded-lg p-8 text-center ${className}`}>
        <Loader className="w-8 h-8 text-gray-400 mx-auto mb-4 animate-spin" />
        <p className="text-gray-600">Loading preview...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`bg-red-50 border border-red-200 rounded-lg p-8 text-center ${className}`}>
        <AlertCircle className="w-8 h-8 text-red-500 mx-auto mb-4" />
        <p className="text-red-700">{error}</p>
      </div>
    );
  }

  if (previewStatus?.processing) {
    return (
      <div className={`bg-blue-50 border border-blue-200 rounded-lg p-8 text-center ${className}`}>
        <Loader className="w-8 h-8 text-blue-500 mx-auto mb-4 animate-spin" />
        <h3 className="text-lg font-semibold text-blue-800 mb-2">Processing Preview</h3>
        <p className="text-blue-700">
          We're generating a preview of this resource. This usually takes 1-2 minutes.
        </p>
        <div className="mt-4 text-sm text-blue-600">
          Status: {previewStatus.status}
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-white rounded-lg border border-gray-200 overflow-hidden ${className}`}>
      {/* Preview Header */}
      <div className="p-4 border-b border-gray-200 bg-gray-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Eye className="w-5 h-5 text-gray-600 mr-2" />
            <span className="font-medium text-gray-700">Resource Preview</span>
            {!canDownload && (
              <span className="ml-2 px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">
                Trial Mode
              </span>
            )}
          </div>
          
          <button
            onClick={handleDownload}
            className={`flex items-center px-4 py-2 rounded-lg font-semibold transition-colors ${
              canDownload
                ? 'bg-emerald-600 hover:bg-emerald-700 text-white'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            {canDownload ? (
              <>
                <Download className="w-4 h-4 mr-2" />
                Download Full
              </>
            ) : (
              <>
                <Lock className="w-4 h-4 mr-2" />
                Upgrade to Download
              </>
            )}
          </button>
        </div>
      </div>

      {/* Preview Content */}
      <div className="p-4">
        {previewUrl ? (
          <div className="space-y-4">
            {/* Preview Image/Video */}
            <div className="relative">
              {previewUrl.includes('.mp4') ? (
                <video 
                  controls 
                  className="w-full max-h-96 rounded-lg"
                  poster="/api/placeholder/640/360"
                >
                  <source src={previewUrl} type="video/mp4" />
                  Your browser does not support video playback.
                </video>
              ) : (
                <img 
                  src={previewUrl} 
                  alt={`${title} preview`}
                  className="w-full max-h-96 object-contain rounded-lg border border-gray-200"
                />
              )}
              
              {/* Watermark overlay for extra security */}
              <div className="absolute bottom-2 right-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs">
                Coach2Coach Preview
              </div>
            </div>

            {/* Preview Info */}
            <div className="flex items-center justify-between text-sm text-gray-600">
              <div className="flex items-center">
                {previewUrl.includes('.mp4') ? (
                  <Play className="w-4 h-4 mr-1" />
                ) : previewUrl.includes('.png') || previewUrl.includes('.jpg') ? (
                  <ImageIcon className="w-4 h-4 mr-1" />
                ) : (
                  <FileText className="w-4 h-4 mr-1" />
                )}
                <span>
                  {previewStatus?.previewCount > 1 
                    ? `${previewStatus.previewCount} preview pages`
                    : 'Preview available'
                  }
                </span>
              </div>
              
              {!canDownload && (
                <span className="text-emerald-600 font-medium">
                  Full version: ${price}
                </span>
              )}
            </div>

            {/* Trial User Notice */}
            {!canDownload && (
              <div className="bg-gradient-to-r from-emerald-50 to-blue-50 border border-emerald-200 rounded-lg p-4">
                <div className="flex items-start">
                  <Lock className="w-5 h-5 text-emerald-600 mr-3 mt-0.5" />
                  <div>
                    <h4 className="font-semibold text-emerald-800 mb-1">Preview Mode</h4>
                    <p className="text-emerald-700 text-sm mb-3">
                      You're viewing a limited preview. Upgrade to access the full resource with all pages, 
                      high resolution, and downloadable files.
                    </p>
                    <button
                      onClick={onPurchaseClick}
                      className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg text-sm font-semibold transition-colors"
                    >
                      Upgrade for Full Access
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        ) : (
          <div className="text-center py-8">
            <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-slate-900 mb-2">Preview Not Available</h3>
            <p className="text-gray-600">
              This resource doesn't have a preview available yet.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default PreviewViewer;
import React from 'react';
import { Check, Star, Users, MessageCircle, Download, FileText, Crown } from 'lucide-react';

const PricingTable: React.FC = () => {
  const features = [
    'Access to ALL coaching resources',
    'Unlimited downloads',
    'Coach-to-coach messaging',
    'Discussion boards & forums',
    'Coach written articles',
    'Mobile app access',
    'Priority customer support',
    'New content notifications',
    'Advanced search & filters',
    'Bookmark favorite resources'
  ];

  const creatorBenefits = [
    'Keep 85% of every sale',
    'Upload unlimited resources',
    'Professional profile page',
    'Sales analytics dashboard',
    'Direct fan messaging',
    'Community engagement tools',
    'Marketing support',
    'Monthly payouts'
  ];

  return (
    <section id="pricing" className="py-20 bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold text-slate-900 mb-4">
            Simple, <span className="text-emerald-600">Fair Pricing</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            One affordable price gets you access to everything. No tiers, no limits, no confusion.
          </p>
        </div>

        <div className="max-w-4xl mx-auto">
          {/* Main Pricing Card */}
          <div className="bg-white rounded-2xl shadow-2xl overflow-hidden mb-12 ring-4 ring-emerald-500">
            <div className="bg-emerald-600 text-white text-center py-3 font-semibold">
              🎉 Launch Special - Limited Time
            </div>
            
            <div className="p-8 lg:p-12">
              <div className="text-center mb-8">
                <div className="inline-flex items-center justify-center w-20 h-20 bg-emerald-100 rounded-full mb-6">
                  <Crown className="w-10 h-10 text-emerald-600" />
                </div>
                <h3 className="text-3xl font-bold text-slate-900 mb-2">Coach2Coach Membership</h3>
                <p className="text-gray-600 mb-6">Everything you need to grow as a coach</p>
                
                <div className="flex items-center justify-center mb-4">
                  <span className="text-5xl font-bold text-slate-900">$5.99</span>
                  <span className="text-gray-600 ml-2 text-xl">/month</span>
                </div>
                
                <div className="inline-block bg-emerald-100 text-emerald-800 px-4 py-2 rounded-full text-sm font-semibold mb-8">
                  Creators keep 85% of sales
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                {/* Member Benefits */}
                <div>
                  <h4 className="text-xl font-bold text-slate-900 mb-4 flex items-center">
                    <Users className="w-6 h-6 text-emerald-600 mr-2" />
                    Member Benefits
                  </h4>
                  <ul className="space-y-3">
                    {features.map((feature, index) => (
                      <li key={index} className="flex items-start">
                        <Check className="w-5 h-5 text-emerald-500 mr-3 mt-0.5 flex-shrink-0" />
                        <span className="text-gray-700">{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Creator Benefits */}
                <div>
                  <h4 className="text-xl font-bold text-slate-900 mb-4 flex items-center">
                    <Star className="w-6 h-6 text-emerald-600 mr-2" />
                    Creator Benefits
                  </h4>
                  <ul className="space-y-3">
                    {creatorBenefits.map((benefit, index) => (
                      <li key={index} className="flex items-start">
                        <Check className="w-5 h-5 text-emerald-500 mr-3 mt-0.5 flex-shrink-0" />
                        <span className="text-gray-700">{benefit}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <div className="text-center">
                <button className="bg-emerald-600 hover:bg-emerald-700 text-white px-8 py-4 rounded-lg font-bold text-lg transition-all transform hover:scale-105 mb-4">
                  Start Your Membership
                </button>
                <p className="text-sm text-gray-500">
                  Cancel anytime • No long-term contracts • 7-day free trial
                </p>
              </div>
            </div>
          </div>

          {/* Value Proposition */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
            <div className="text-center">
              <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Download className="w-8 h-8 text-emerald-600" />
              </div>
              <h3 className="text-xl font-bold text-slate-900 mb-2">Unlimited Access</h3>
              <p className="text-gray-600">Download any resource, anytime. No per-item charges or hidden fees.</p>
            </div>
            
            <div className="text-center">
              <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <MessageCircle className="w-8 h-8 text-emerald-600" />
              </div>
              <h3 className="text-xl font-bold text-slate-900 mb-2">Connect & Learn</h3>
              <p className="text-gray-600">Message coaches directly and participate in community discussions.</p>
            </div>
            
            <div className="text-center">
              <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Star className="w-8 h-8 text-emerald-600" />
              </div>
              <h3 className="text-xl font-bold text-slate-900 mb-2">Support Creators</h3>
              <p className="text-gray-600">Your membership directly supports coaches who share their expertise.</p>
            </div>
          </div>

          {/* Creator Earnings Breakdown */}
          <div className="bg-slate-900 text-white rounded-2xl p-8 mb-12">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-bold mb-4">Fair Creator Compensation</h3>
              <p className="text-gray-300">We believe coaches should be rewarded fairly for sharing their knowledge</p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
              <div>
                <div className="text-3xl font-bold text-emerald-400 mb-2">85%</div>
                <div className="text-gray-300">Goes to Coach</div>
                <div className="text-sm text-gray-400">Fair compensation for expertise</div>
              </div>
              
              <div>
                <div className="text-3xl font-bold text-gray-400 mb-2">15%</div>
                <div className="text-gray-300">Platform Fee</div>
                <div className="text-sm text-gray-400">Covers hosting, support & development</div>
              </div>
              
              <div>
                <div className="text-3xl font-bold text-emerald-400 mb-2">$5.99</div>
                <div className="text-gray-300">Member Access</div>
                <div className="text-sm text-gray-400">Unlimited downloads for subscribers</div>
              </div>
            </div>
          </div>

          {/* FAQ */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h3 className="text-2xl font-bold text-slate-900 mb-6 text-center">Frequently Asked Questions</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-slate-900 mb-2">How does the subscription work?</h4>
                <p className="text-gray-600 text-sm">Start with a 7-day free trial, then $5.99/month for unlimited access to all coaching resources, messaging, and community features.</p>
              </div>
              
              <div>
                <h4 className="font-semibold text-slate-900 mb-2">How do creators get paid?</h4>
                <p className="text-gray-600 text-sm">Creators earn 85% of revenue generated from their content based on download activity and engagement metrics.</p>
              </div>
              
              <div>
                <h4 className="font-semibold text-slate-900 mb-2">Can I cancel anytime?</h4>
                <p className="text-gray-600 text-sm">Yes! Cancel your subscription anytime. You'll retain access until the end of your billing period.</p>
              </div>
              
              <div>
                <h4 className="font-semibold text-slate-900 mb-2">Is there a free trial?</h4>
                <p className="text-gray-600 text-sm">Yes! New members get a 7-day free trial with limited access - you can browse resources but need a paid subscription for full downloads.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default PricingTable;
import React, { useState, useEffect } from 'react';
import { Loader, CheckCircle, AlertCircle, Clock, FileText, Eye } from 'lucide-react';

interface ProcessingStatusProps {
  resourceId: string;
  onProcessingComplete?: () => void;
  className?: string;
}

interface ProcessingState {
  status: 'queued' | 'processing' | 'ready' | 'failed';
  isPreviewReady: boolean;
  previewCount: number;
  lastError?: string;
}

const ProcessingStatus: React.FC<ProcessingStatusProps> = ({
  resourceId,
  onProcessingComplete,
  className = ''
}) => {
  const [processingState, setProcessingState] = useState<ProcessingState | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkStatus();
    
    // Poll for status updates while processing
    const interval = setInterval(() => {
      if (processingState?.status === 'processing' || processingState?.status === 'queued') {
        checkStatus();
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [resourceId]);

  const checkStatus = async () => {
    try {
      const response = await fetch(`/api/resources/${resourceId}/status`);
      const data = await response.json();

      if (data.success) {
        const newState: ProcessingState = {
          status: data.status,
          isPreviewReady: data.isPreviewReady,
          previewCount: data.previewCount || 0,
          lastError: data.lastError
        };
        
        setProcessingState(newState);
        
        // Notify parent when processing completes
        if (newState.status === 'ready' && onProcessingComplete) {
          onProcessingComplete();
        }
      }
    } catch (error) {
      console.error('Error checking processing status:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className={`bg-gray-50 rounded-lg p-6 text-center ${className}`}>
        <Loader className="w-6 h-6 text-gray-400 mx-auto mb-2 animate-spin" />
        <p className="text-gray-600 text-sm">Checking status...</p>
      </div>
    );
  }

  if (!processingState) {
    return null;
  }

  const getStatusConfig = () => {
    switch (processingState.status) {
      case 'queued':
        return {
          icon: Clock,
          color: 'text-blue-600',
          bgColor: 'bg-blue-50',
          borderColor: 'border-blue-200',
          title: 'Queued for Processing',
          message: 'Your resource is in the processing queue. This usually takes 1-2 minutes.',
          showSpinner: false
        };
      case 'processing':
        return {
          icon: Loader,
          color: 'text-emerald-600',
          bgColor: 'bg-emerald-50',
          borderColor: 'border-emerald-200',
          title: 'Generating Preview',
          message: 'We\'re creating a preview of your resource. Almost done!',
          showSpinner: true
        };
      case 'ready':
        return {
          icon: CheckCircle,
          color: 'text-green-600',
          bgColor: 'bg-green-50',
          borderColor: 'border-green-200',
          title: 'Preview Ready',
          message: `Preview generated successfully! ${processingState.previewCount} preview${processingState.previewCount !== 1 ? 's' : ''} available.`,
          showSpinner: false
        };
      case 'failed':
        return {
          icon: AlertCircle,
          color: 'text-red-600',
          bgColor: 'bg-red-50',
          borderColor: 'border-red-200',
          title: 'Processing Failed',
          message: processingState.lastError || 'Failed to generate preview. Please try uploading again.',
          showSpinner: false
        };
      default:
        return {
          icon: FileText,
          color: 'text-gray-600',
          bgColor: 'bg-gray-50',
          borderColor: 'border-gray-200',
          title: 'Unknown Status',
          message: 'Processing status unknown.',
          showSpinner: false
        };
    }
  };

  const config = getStatusConfig();
  const IconComponent = config.icon;

  return (
    <div className={`${config.bgColor} border ${config.borderColor} rounded-lg p-6 ${className}`}>
      <div className="flex items-start">
        <div className="flex-shrink-0">
          <IconComponent 
            className={`w-6 h-6 ${config.color} ${config.showSpinner ? 'animate-spin' : ''}`} 
          />
        </div>
        <div className="ml-4 flex-1">
          <h4 className={`font-semibold ${config.color} mb-1`}>
            {config.title}
          </h4>
          <p className="text-sm text-gray-700">
            {config.message}
          </p>
          
          {processingState.status === 'ready' && processingState.previewCount > 0 && (
            <div className="mt-3 flex items-center text-sm text-green-700">
              <Eye className="w-4 h-4 mr-1" />
              <span>Preview is now available for trial users</span>
            </div>
          )}
          
          {processingState.status === 'failed' && (
            <div className="mt-3">
              <button 
                onClick={() => window.location.reload()}
                className="text-sm text-red-600 hover:text-red-700 font-medium"
              >
                Try Again
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProcessingStatus;
import React from 'react';
import { CheckCircle, Download, Star, Calendar, User } from 'lucide-react';
import { Link } from 'react-router-dom';

interface PurchaseConfirmationProps {
  resource: {
    id: string;
    title: string;
    description: string;
    price: number;
    rating: number;
    downloads: number;
  };
  coach: {
    name: string;
    title: string;
  };
  transactionId: string;
}

const PurchaseConfirmation: React.FC<PurchaseConfirmationProps> = ({
  resource,
  coach,
  transactionId
}) => {
  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-2xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Success Header */}
          <div className="text-center mb-8">
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="w-12 h-12 text-green-600" />
            </div>
            <h1 className="text-3xl font-bold text-slate-900 mb-2">Purchase Successful!</h1>
            <p className="text-gray-600">Thank you for supporting the coaching community</p>
          </div>

          {/* Purchase Details */}
          <div className="bg-gray-50 rounded-lg p-6 mb-8">
            <h2 className="text-xl font-bold text-slate-900 mb-4">Your Purchase</h2>
            
            <div className="flex items-start space-x-4 mb-4">
              <div className="w-16 h-16 bg-emerald-100 rounded-lg flex items-center justify-center flex-shrink-0">
                <Download className="w-8 h-8 text-emerald-600" />
              </div>
              
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-slate-900 mb-1">{resource.title}</h3>
                <p className="text-gray-600 mb-2">{resource.description}</p>
                
                <div className="flex items-center space-x-4 text-sm text-gray-500">
                  <div className="flex items-center">
                    <Star className="w-4 h-4 text-yellow-400 mr-1" />
                    <span>{resource.rating}</span>
                  </div>
                  <span>•</span>
                  <span>{resource.downloads} downloads</span>
                  <span>•</span>
                  <span>${resource.price}</span>
                </div>
              </div>
            </div>

            <div className="pt-4 border-t border-gray-200">
              <div className="flex items-center">
                <User className="w-4 h-4 text-gray-500 mr-2" />
                <span className="text-sm text-gray-600">
                  Created by <span className="font-semibold">{coach.name}</span> - {coach.title}
                </span>
              </div>
            </div>
          </div>

          {/* Download Section */}
          <div className="bg-emerald-50 border border-emerald-200 rounded-lg p-6 mb-8">
            <h3 className="text-lg font-bold text-emerald-800 mb-2">Ready to Download</h3>
            <p className="text-emerald-700 mb-4">
              Your resource is ready for download. You can access it anytime from your purchase history.
            </p>
            
            <div className="flex space-x-4">
              <button className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors flex items-center">
                <Download className="w-5 h-5 mr-2" />
                Download Now
              </button>
              <Link 
                to="/purchases"
                className="border border-emerald-600 text-emerald-600 hover:bg-emerald-600 hover:text-white px-6 py-3 rounded-lg font-semibold transition-colors flex items-center no-underline"
              >
                View All Purchases
              </Link>
            </div>
          </div>

          {/* Transaction Details */}
          <div className="bg-gray-50 rounded-lg p-4 mb-8">
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-600">Transaction ID:</span>
              <span className="font-mono text-slate-900">{transactionId}</span>
            </div>
            <div className="flex items-center justify-between text-sm mt-2">
              <span className="text-gray-600">Purchase Date:</span>
              <div className="flex items-center">
                <Calendar className="w-4 h-4 text-gray-500 mr-1" />
                <span className="text-slate-900">{new Date().toLocaleDateString()}</span>
              </div>
            </div>
          </div>

          {/* Next Steps */}
          <div className="text-center">
            <h3 className="text-lg font-bold text-slate-900 mb-4">What's Next?</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <Link 
                to="/browse"
                className="flex items-center justify-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors no-underline"
              >
                <div className="text-center">
                  <h4 className="font-semibold text-slate-900">Browse More Resources</h4>
                  <p className="text-sm text-gray-600">Discover more coaching materials</p>
                </div>
              </Link>
              
              <Link 
                to="/become-seller"
                className="flex items-center justify-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors no-underline"
              >
                <div className="text-center">
                  <h4 className="font-semibold text-slate-900">Share Your Expertise</h4>
                  <p className="text-sm text-gray-600">Start selling your resources</p>
                </div>
              </Link>
            </div>
          </div>

          {/* Support */}
          <div className="mt-8 pt-6 border-t border-gray-200 text-center">
            <p className="text-sm text-gray-600">
              Need help? <a href="/contact" className="text-emerald-600 hover:text-emerald-700">Contact our support team</a>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PurchaseConfirmation;
import React, { useState } from 'react';
import { Download, Calendar, Star, Filter, Search, AlertTriangle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { getSecureDownloadUrl } from '../lib/fileUpload';
import { resourceStorage } from '../lib/localStorage';
import DisputeModal from './DisputeModal';

interface Purchase {
  id: string;
  resourceId: string;
  title: string;
  coachName: string;
  price: number;
  purchaseDate: string;
  downloadCount: number;
  rating?: number;
}

const PurchaseHistory: React.FC = () => {
  const { user } = useAuth();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [showDisputeModal, setShowDisputeModal] = useState(false);
  const [selectedPurchase, setSelectedPurchase] = useState<Purchase | null>(null);

  // Mock purchase data - in real app, this would come from your backend
  const purchases: Purchase[] = [
    {
      id: '1',
      resourceId: 'res1',
      title: 'Advanced Ball Handling Drills',
      coachName: 'Coach Mike Johnson',
      price: 12.99,
      purchaseDate: '2024-01-15',
      downloadCount: 3,
      rating: 5
    },
    {
      id: '2',
      resourceId: 'res2',
      title: 'Team Defense Strategies',
      coachName: 'Coach Sarah Williams',
      price: 19.99,
      purchaseDate: '2024-01-10',
      downloadCount: 1
    },
    {
      id: '3',
      resourceId: 'res3',
      title: 'Youth Basketball Fundamentals',
      coachName: 'Coach Tom Davis',
      price: 8.99,
      purchaseDate: '2024-01-05',
      downloadCount: 5,
      rating: 4
    }
  ];

  const filteredPurchases = purchases.filter(purchase => {
    const matchesSearch = searchTerm === '' || 
      purchase.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      purchase.coachName.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesSearch;
  });

  const handleDownload = (purchase: Purchase) => {
    const resource = resourceStorage.getResources().find(r => r.id === purchase.resourceId);
    if (resource && resource.fileUrls && resource.fileUrls.length > 0) {
      // Download first file (in real app, show file selection)
      downloadResourceFile(resource.fileUrls[0], `${purchase.title}.pdf`);
    } else {
      alert('Resource files not found. Please contact support.');
    }
  };

  const downloadResourceFile = async (fileUrl: string, fileName: string) => {
    try {
      const result = await getSecureDownloadUrl('resources', fileUrl, 3600);
      
      if (result.success && result.url) {
        const link = document.createElement('a');
        link.href = result.url;
        link.download = fileName;
        link.target = '_blank';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      } else {
        throw new Error(result.error || 'Failed to get download link');
      }
    } catch (error) {
      console.error('Download error:', error);
      alert('Download failed. Please try again or contact support.');
    }
  };

  const handleRate = (purchaseId: string, rating: number) => {
    // In a real app, this would save the rating to your backend
    console.log('Rating:', purchaseId, rating);
  };

  const handleOpenDispute = (purchase: Purchase) => {
    setSelectedPurchase({
      ...purchase,
      resourceTitle: purchase.title,
      amount: purchase.price
    });
    setShowDisputeModal(true);
  };

  if (!user) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Please Sign In</h2>
          <p className="text-gray-600">You need to be signed in to view your purchase history.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-xl shadow-lg">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <h1 className="text-2xl font-bold text-slate-900 mb-2">Purchase History</h1>
          <p className="text-gray-600">Access and manage all your purchased coaching resources</p>
        </div>

        {/* Filters */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Search your purchases..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
              </div>
            </div>
            
            <select
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
            >
              <option value="all">All Purchases</option>
              <option value="recent">Recent</option>
              <option value="rated">Rated</option>
              <option value="unrated">Not Rated</option>
            </select>
          </div>
        </div>

        {/* Purchase List */}
        <div className="p-6">
          {filteredPurchases.length > 0 ? (
            <div className="space-y-4">
              {filteredPurchases.map((purchase) => (
                <div key={purchase.id} className="border border-gray-200 rounded-lg p-6 hover:bg-gray-50 transition-colors">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-slate-900 mb-1">{purchase.title}</h3>
                      <p className="text-gray-600 mb-2">by {purchase.coachName}</p>
                      
                      <div className="flex items-center space-x-4 text-sm text-gray-500 mb-4">
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-1" />
                          <span>{new Date(purchase.purchaseDate).toLocaleDateString()}</span>
                        </div>
                        <span>•</span>
                        <span>${purchase.price}</span>
                        <span>•</span>
                        <span>{purchase.downloadCount} downloads</span>
                      </div>

                      {/* Rating */}
                      <div className="flex items-center space-x-2">
                        <span className="text-sm text-gray-600">Your rating:</span>
                        <div className="flex items-center">
                          {[1, 2, 3, 4, 5].map((star) => (
                            <button
                              key={star}
                              onClick={() => handleRate(purchase.id, star)}
                              className={`w-4 h-4 ${
                                purchase.rating && star <= purchase.rating
                                  ? 'text-yellow-400'
                                  : 'text-gray-300 hover:text-yellow-400'
                              } transition-colors`}
                            >
                              <Star className="w-4 h-4 fill-current" />
                            </button>
                          ))}
                        </div>
                        {!purchase.rating && (
                          <span className="text-xs text-gray-500">Click to rate</span>
                        )}
                      </div>
                    </div>

                    <div className="flex flex-col space-y-2">
                      <button
                        onClick={() => handleDownload(purchase)}
                        className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
                      >
                        <Download className="w-4 h-4 mr-2" />
                        Download
                      </button>
                      
                      <button className="border border-gray-300 hover:bg-gray-50 px-4 py-2 rounded-lg font-semibold transition-colors text-sm">
                        View Details
                      </button>
                      
                      <button
                        onClick={() => handleOpenDispute(purchase)}
                        className="border border-orange-300 text-orange-600 hover:bg-orange-50 px-4 py-2 rounded-lg font-semibold transition-colors text-sm flex items-center"
                      >
                        <AlertTriangle className="w-4 h-4 mr-1" />
                        Dispute
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <Download className="w-12 h-12 text-gray-400" />
              </div>
              <h3 className="text-2xl font-bold text-slate-900 mb-4">No Purchases Yet</h3>
              <p className="text-gray-600 mb-6">
                Start building your coaching resource library by browsing our marketplace.
              </p>
              <a 
                href="/browse"
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors inline-block"
              >
                Browse Resources
              </a>
            </div>
          )}
        </div>

        {/* Dispute Modal */}
        {selectedPurchase && (
          <DisputeModal
            isOpen={showDisputeModal}
            onClose={() => {
              setShowDisputeModal(false);
              setSelectedPurchase(null);
            }}
            purchase={selectedPurchase}
          />
        )}

        {/* Summary */}
        {filteredPurchases.length > 0 && (
          <div className="p-6 border-t border-gray-200 bg-gray-50">
            <div className="flex justify-between items-center">
              <div>
                <p className="text-sm text-gray-600">
                  Total Purchases: <span className="font-semibold">{filteredPurchases.length}</span>
                </p>
                <p className="text-sm text-gray-600">
                  Total Spent: <span className="font-semibold">
                    ${filteredPurchases.reduce((sum, p) => sum + p.price, 0).toFixed(2)}
                  </span>
                </p>
              </div>
              
              <button className="text-emerald-600 hover:text-emerald-700 font-semibold text-sm">
                Download All Resources
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PurchaseHistory;
import React, { useEffect, useState } from 'react';
import { useSearchParams, Link } from 'react-router-dom';
import { CheckCircle, Download, ArrowRight, Star } from 'lucide-react';
import { resourceStorage, profileStorage } from '../lib/localStorage';

const PurchaseSuccess: React.FC = () => {
  const [searchParams] = useSearchParams();
  const [resource, setResource] = useState<any>(null);
  const [profile, setProfile] = useState<any>(null);
  
  const sessionId = searchParams.get('session_id');
  const resourceId = searchParams.get('resource_id');

  useEffect(() => {
    if (resourceId) {
      const resourceData = resourceStorage.getResources().find(r => r.id === resourceId);
      if (resourceData) {
        setResource(resourceData);
        const coachProfile = profileStorage.getProfileById(resourceData.coachId);
        setProfile(coachProfile);
        
        // Increment download count
        const updatedResource = {
          ...resourceData,
          downloads: resourceData.downloads + 1
        };
        resourceStorage.saveResource(updatedResource);
      }
    }
  }, [resourceId]);

  if (!resource) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Loading...</h2>
          <p className="text-gray-600">Confirming your purchase...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-2xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Success Header */}
          <div className="text-center mb-8">
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="w-12 h-12 text-green-600" />
            </div>
            <h1 className="text-3xl font-bold text-slate-900 mb-2">Purchase Successful!</h1>
            <p className="text-gray-600">Thank you for supporting Coach2Coach and our coaching community.</p>
          </div>

          {/* Purchase Details */}
          <div className="bg-gray-50 rounded-lg p-6 mb-8">
            <h2 className="text-xl font-bold text-slate-900 mb-4">Your Purchase</h2>
            
            <div className="flex items-start space-x-4">
              <div className="w-16 h-16 bg-emerald-100 rounded-lg flex items-center justify-center flex-shrink-0">
                <Download className="w-8 h-8 text-emerald-600" />
              </div>
              
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-slate-900 mb-1">{resource.title}</h3>
                <p className="text-gray-600 mb-2">{resource.description}</p>
                
                <div className="flex items-center space-x-4 text-sm text-gray-500">
                  <div className="flex items-center">
                    <Star className="w-4 h-4 text-yellow-400 mr-1" />
                    <span>{resource.rating}</span>
                  </div>
                  <span>•</span>
                  <span>{resource.downloads} downloads</span>
                  <span>•</span>
                  <span>${resource.price}</span>
                </div>
              </div>
            </div>

            {profile && (
              <div className="mt-4 pt-4 border-t border-gray-200">
                <p className="text-sm text-gray-600">
                  Created by <span className="font-semibold">{profile.firstName} {profile.lastName}</span>
                </p>
              </div>
            )}
          </div>

          {/* Download Section */}
          <div className="bg-emerald-50 border border-emerald-200 rounded-lg p-6 mb-8">
            <h3 className="text-lg font-bold text-emerald-800 mb-2">Ready to Download</h3>
            <p className="text-emerald-700 mb-4">
              Your resource is ready for download. You can access it anytime from your purchase history.
            </p>
            
            <button className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors flex items-center">
              <Download className="w-5 h-5 mr-2" />
              Download Resource
            </button>
          </div>

          {/* Next Steps */}
          <div className="space-y-4">
            <h3 className="text-lg font-bold text-slate-900">What's Next?</h3>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <Link 
                to="/browse"
                className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors text-decoration-none"
              >
                <div className="flex-1">
                  <h4 className="font-semibold text-slate-900">Browse More Resources</h4>
                  <p className="text-sm text-gray-600">Discover more coaching materials</p>
                </div>
                <ArrowRight className="w-5 h-5 text-gray-400" />
              </Link>
              
              <Link 
                to="/profile"
                className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors text-decoration-none"
              >
                <div className="flex-1">
                  <h4 className="font-semibold text-slate-900">View Purchase History</h4>
                  <p className="text-sm text-gray-600">Access all your resources</p>
                </div>
                <ArrowRight className="w-5 h-5 text-gray-400" />
              </Link>
            </div>
          </div>

          {/* Support */}
          <div className="mt-8 pt-6 border-t border-gray-200 text-center">
            <p className="text-sm text-gray-600">
              Need help? <a href="/contact" className="text-emerald-600 hover:text-emerald-700">Contact our support team</a>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PurchaseSuccess;
import React, { useState, useEffect, useRef } from 'react';
import { Send, Paperclip, Smile, MoreVertical, Phone, Video, User, Circle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { messaging, subscribeToConversation, subscribeToPresence, sendTypingIndicator } from '../lib/messaging';
import { userStorage, profileStorage } from '../lib/localStorage';

interface RealtimeMessagingProps {
  conversationId: string;
  onClose?: () => void;
  className?: string;
}

const RealtimeMessaging: React.FC<RealtimeMessagingProps> = ({
  conversationId,
  onClose,
  className = ''
}) => {
  const { user } = useAuth();
  const [messages, setMessages] = useState<any[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [typing, setTyping] = useState<string[]>([]);
  const [onlineUsers, setOnlineUsers] = useState<string[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const typingTimeoutRef = useRef<NodeJS.Timeout>();

  useEffect(() => {
    if (conversationId) {
      loadMessages();
      
      // Subscribe to real-time messages
      const messageChannel = subscribeToConversation(conversationId, (message) => {
        setMessages(prev => [...prev, message]);
        scrollToBottom();
      });

      // Subscribe to presence
      const presenceChannel = subscribeToPresence(conversationId, user?.id || '');

      return () => {
        messageChannel?.unsubscribe();
        presenceChannel?.unsubscribe();
      };
    }
  }, [conversationId]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const loadMessages = async () => {
    try {
      const msgs = await messaging.getMessages(conversationId);
      setMessages(msgs);
    } catch (error) {
      console.error('Error loading messages:', error);
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !user) return;

    setLoading(true);
    try {
      const message = await messaging.sendMessage({
        conversationId,
        senderId: user.id,
        body: newMessage.trim()
      });

      setMessages(prev => [...prev, message]);
      setNewMessage('');
      
      // Stop typing indicator
      sendTypingIndicator(conversationId, user.id, false);
    } catch (error) {
      console.error('Error sending message:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleTyping = (value: string) => {
    setNewMessage(value);
    
    if (!user) return;

    // Send typing indicator
    sendTypingIndicator(conversationId, user.id, true);
    
    // Clear previous timeout
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }
    
    // Stop typing after 3 seconds of inactivity
    typingTimeoutRef.current = setTimeout(() => {
      sendTypingIndicator(conversationId, user.id, false);
    }, 3000);
  };

  const getSenderName = (senderId: string) => {
    if (senderId === user?.id) return 'You';
    
    const sender = userStorage.getUserById(senderId);
    const profile = profileStorage.getProfileByUserId(senderId);
    
    if (profile) {
      return `${profile.firstName} ${profile.lastName}`;
    }
    if (sender) {
      return `${sender.firstName} ${sender.lastName}`;
    }
    return 'Coach';
  };

  const formatMessageTime = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 24) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else {
      return date.toLocaleDateString([], { month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' });
    }
  };

  if (!user) return null;

  return (
    <div className={`bg-white rounded-lg border border-gray-200 flex flex-col ${className}`} style={{ height: '500px' }}>
      {/* Chat Header */}
      <div className="p-4 border-b border-gray-200 bg-gray-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="relative">
              <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                <User className="w-4 h-4 text-gray-600" />
              </div>
              <Circle className="absolute -bottom-1 -right-1 w-3 h-3 text-green-500 fill-current" />
            </div>
            <div>
              <h3 className="font-semibold text-slate-900">Coach Chat</h3>
              <p className="text-xs text-gray-600">
                {onlineUsers.length > 0 ? 'Online' : 'Last seen recently'}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <button className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg">
              <Phone className="w-4 h-4" />
            </button>
            <button className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg">
              <Video className="w-4 h-4" />
            </button>
            <button className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg">
              <MoreVertical className="w-4 h-4" />
            </button>
            {onClose && (
              <button
                onClick={onClose}
                className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg"
              >
                <X className="w-4 h-4" />
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => {
          const isOwn = message.senderId === user.id;
          return (
            <div key={message.id} className={`flex ${isOwn ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                isOwn 
                  ? 'bg-emerald-600 text-white' 
                  : 'bg-gray-100 text-slate-900'
              }`}>
                {!isOwn && (
                  <p className="text-xs font-semibold mb-1 opacity-75">
                    {getSenderName(message.senderId)}
                  </p>
                )}
                <p className="text-sm">{message.body}</p>
                <p className={`text-xs mt-1 ${isOwn ? 'text-emerald-100' : 'text-gray-500'}`}>
                  {formatMessageTime(message.createdAt)}
                </p>
              </div>
            </div>
          );
        })}
        
        {/* Typing Indicator */}
        {typing.length > 0 && (
          <div className="flex justify-start">
            <div className="bg-gray-100 px-4 py-2 rounded-lg">
              <div className="flex items-center space-x-1">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
                <span className="text-xs text-gray-600 ml-2">typing...</span>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Message Input */}
      <div className="p-4 border-t border-gray-200">
        <div className="flex items-center space-x-2">
          <button className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg">
            <Paperclip className="w-4 h-4" />
          </button>
          <button className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg">
            <Smile className="w-4 h-4" />
          </button>
          <div className="flex-1">
            <input
              type="text"
              value={newMessage}
              onChange={(e) => handleTyping(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="Type a message..."
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
            />
          </div>
          <button
            onClick={handleSendMessage}
            disabled={!newMessage.trim() || loading}
            className="p-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:bg-gray-400 transition-colors"
          >
            <Send className="w-4 h-4" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default RealtimeMessaging;
// Recommendations carousel for resource pages
import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Star, TrendingUp, Users, Award } from 'lucide-react';
import { RecommendationResult } from '../lib/search/types';

interface RecommendationsCarouselProps {
  resourceId: string;
  title?: string;
  limit?: number;
  onResourceClick?: (resourceId: string) => void;
  className?: string;
}

const RecommendationsCarousel: React.FC<RecommendationsCarouselProps> = ({
  resourceId,
  title = "Coaches who bought this also bought",
  limit = 12,
  onResourceClick,
  className = ""
}) => {
  const [recommendations, setRecommendations] = useState<RecommendationResult[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [error, setError] = useState('');

  useEffect(() => {
    loadRecommendations();
  }, [resourceId]);

  const loadRecommendations = async () => {
    try {
      setLoading(true);
      setError('');

      const response = await fetch(`/api/search/recommendations/${resourceId}?limit=${limit}`);
      const data = await response.json();

      if (data.success) {
        setRecommendations(data.recommendations || []);
      } else {
        throw new Error(data.error || 'Failed to load recommendations');
      }
    } catch (err) {
      console.error('Error loading recommendations:', err);
      setError('Failed to load recommendations');
    } finally {
      setLoading(false);
    }
  };

  const getReasonIcon = (reason: RecommendationResult['reason']) => {
    switch (reason) {
      case 'co_purchase':
        return <Users className="w-4 h-4 text-emerald-600" />;
      case 'same_coach':
        return <Award className="w-4 h-4 text-blue-600" />;
      case 'same_sport':
        return <TrendingUp className="w-4 h-4 text-purple-600" />;
      default:
        return <Star className="w-4 h-4 text-gray-600" />;
    }
  };

  const getReasonText = (reason: RecommendationResult['reason']) => {
    switch (reason) {
      case 'co_purchase':
        return 'Also bought';
      case 'same_coach':
        return 'Same coach';
      case 'same_sport':
        return 'Similar sport';
      case 'similar_content':
        return 'Similar content';
      default:
        return 'Recommended';
    }
  };

  const itemsPerView = 4;
  const maxIndex = Math.max(0, recommendations.length - itemsPerView);

  const nextSlide = () => {
    setCurrentIndex(prev => Math.min(prev + 1, maxIndex));
  };

  const prevSlide = () => {
    setCurrentIndex(prev => Math.max(prev - 1, 0));
  };

  if (loading) {
    return (
      <div className={`bg-white rounded-xl shadow-sm border border-gray-200 p-6 ${className}`}>
        <h3 className="text-xl font-bold text-slate-900 mb-6">{title}</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {Array.from({ length: 4 }).map((_, index) => (
            <div key={index} className="animate-pulse">
              <div className="bg-gray-200 rounded-lg h-48 mb-3"></div>
              <div className="h-4 bg-gray-200 rounded mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-2/3"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (error || recommendations.length === 0) {
    return null; // Don't show empty recommendations
  }

  return (
    <div className={`bg-white rounded-xl shadow-sm border border-gray-200 p-6 ${className}`}>
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-bold text-slate-900">{title}</h3>
        
        {recommendations.length > itemsPerView && (
          <div className="flex items-center space-x-2">
            <button
              onClick={prevSlide}
              disabled={currentIndex === 0}
              className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <ChevronLeft className="w-4 h-4" />
            </button>
            <button
              onClick={nextSlide}
              disabled={currentIndex >= maxIndex}
              className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <ChevronRight className="w-4 h-4" />
            </button>
          </div>
        )}
      </div>

      <div className="overflow-hidden">
        <div 
          className="flex transition-transform duration-300 ease-in-out"
          style={{ transform: `translateX(-${currentIndex * (100 / itemsPerView)}%)` }}
        >
          {recommendations.map((recommendation) => (
            <div 
              key={recommendation.id}
              className="flex-shrink-0 w-1/4 px-2"
            >
              <div 
                className="bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors cursor-pointer"
                onClick={() => onResourceClick?.(recommendation.id)}
              >
                <div className="aspect-square bg-emerald-100 rounded-lg flex items-center justify-center mb-3">
                  <Tag className="w-8 h-8 text-emerald-600" />
                </div>
                
                <h4 className="font-semibold text-slate-900 text-sm mb-2 line-clamp-2">
                  {recommendation.title}
                </h4>
                
                <div className="flex items-center justify-between mb-2">
                  <span className="text-lg font-bold text-emerald-600">
                    ${(recommendation.price_cents / 100).toFixed(2)}
                  </span>
                  <div className="flex items-center">
                    <Star className="w-3 h-3 text-yellow-400 mr-1" />
                    <span className="text-xs text-gray-600">{recommendation.rating.toFixed(1)}</span>
                  </div>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex flex-wrap gap-1">
                    <span className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                      {recommendation.sport}
                    </span>
                  </div>
                  
                  <div className="flex items-center text-xs text-gray-500">
                    {getReasonIcon(recommendation.reason)}
                    <span className="ml-1">{getReasonText(recommendation.reason)}</span>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Dots indicator */}
      {recommendations.length > itemsPerView && (
        <div className="flex justify-center mt-4 space-x-2">
          {Array.from({ length: maxIndex + 1 }).map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentIndex(index)}
              className={`w-2 h-2 rounded-full transition-colors ${
                index === currentIndex ? 'bg-emerald-600' : 'bg-gray-300'
              }`}
            />
          ))}
        </div>
      )}
    </div>
  );
};

export default RecommendationsCarousel;
import React from 'react';
import { Users, Gift, Crown, Share2, Copy, CheckCircle } from 'lucide-react';
import { calculateReferralProgress } from '../lib/referrals';

interface ReferralProgressProps {
  qualifiedCount: number;
  discountActive: boolean;
  discountExpiresAt?: string;
  userId?: string;
  className?: string;
}

const ReferralProgress: React.FC<ReferralProgressProps> = ({
  qualifiedCount,
  discountActive,
  discountExpiresAt,
  userId,
  className = ''
}) => {
  const progress = calculateReferralProgress(qualifiedCount, discountActive, discountExpiresAt);
  const [copied, setCopied] = React.useState(false);

  const referralLink = userId ? `${window.location.origin}/signup?ref=${userId}` : '';

  const copyReferralLink = async () => {
    if (referralLink) {
      try {
        await navigator.clipboard.writeText(referralLink);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      } catch (error) {
        console.error('Failed to copy link:', error);
      }
    }
  };

  return (
    <div className={`bg-white rounded-xl shadow-sm border border-gray-200 p-6 ${className}`}>
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <div className="w-10 h-10 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
            <Users className="w-5 h-5 text-emerald-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-slate-900">Referral Program</h3>
            <p className="text-sm text-gray-600">Earn 10% off for 3 months after 5 qualified referrals</p>
          </div>
        </div>
        
        {discountActive && (
          <div className="flex flex-col items-end">
            <div className="flex items-center px-3 py-1 bg-emerald-100 text-emerald-800 rounded-full text-sm font-semibold mb-1">
            <Crown className="w-4 h-4 mr-1" />
              10% Discount Active
            </div>
            {progress.discountTimeRemaining && (
              <span className="text-xs text-emerald-600">{progress.discountTimeRemaining}</span>
            )}
          </div>
        )}
      </div>

      {/* Progress Bar */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm font-medium text-gray-700">
            {qualifiedCount} of 5 qualified referrals
          </span>
          <span className="text-sm text-gray-600">
            {progress.remainingReferrals} more needed
          </span>
        </div>
        
        <div className="w-full bg-gray-200 rounded-full h-3">
          <div 
            className="bg-gradient-to-r from-emerald-500 to-emerald-600 h-3 rounded-full transition-all duration-500"
            style={{ width: `${progress.progressPercentage}%` }}
          ></div>
        </div>
        
        <div className="flex justify-between mt-2">
          {[1, 2, 3, 4, 5].map((step) => (
            <div
              key={step}
              className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                step <= qualifiedCount
                  ? 'bg-emerald-500 text-white'
                  : 'bg-gray-200 text-gray-500'
              }`}
            >
              {step}
            </div>
          ))}
        </div>
      </div>

      {/* Referral Link */}
      {userId && (
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">Your Referral Link</label>
          <div className="flex items-center space-x-2">
            <input
              type="text"
              value={referralLink}
              readOnly
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-sm"
            />
            <button
              onClick={copyReferralLink}
              className="flex items-center px-3 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg text-sm font-medium transition-colors"
            >
              {copied ? (
                <>
                  <CheckCircle className="w-4 h-4 mr-1" />
                  Copied!
                </>
              ) : (
                <>
                  <Copy className="w-4 h-4 mr-1" />
                  Copy
                </>
              )}
            </button>
          </div>
        </div>
      )}

      {/* Benefits */}
      <div className="space-y-3">
        <div className="flex items-center p-3 bg-emerald-50 rounded-lg">
          <Gift className="w-5 h-5 text-emerald-600 mr-3" />
          <div>
            <p className="text-sm font-semibold text-emerald-800">10% Discount for 3 Months</p>
            <p className="text-xs text-emerald-700">Unlock 3 months of savings on your membership</p>
          </div>
        </div>
        
        <div className="flex items-center p-3 bg-blue-50 rounded-lg">
          <Share2 className="w-5 h-5 text-blue-600 mr-3" />
          <div>
            <p className="text-sm font-semibold text-blue-800">Help Coaches Succeed</p>
            <p className="text-xs text-blue-700">Share Coach2Coach with fellow coaches</p>
          </div>
        </div>
      </div>

      {/* Terms */}
      <div className="mt-4 pt-4 border-t border-gray-200">
        <p className="text-xs text-gray-500">
          Qualified referrals must pay their first invoice and remain active for 48 hours. 
          Discount applies to next 3 billing cycles.
        </p>
      </div>
    </div>
  );
};

export default ReferralProgress;
import React, { useState } from 'react';
import { X, Flag, AlertTriangle, Send } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface ReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  resourceId: string;
  resourceTitle: string;
}

const ReportModal: React.FC<ReportModalProps> = ({
  isOpen,
  onClose,
  resourceId,
  resourceTitle
}) => {
  const { user } = useAuth();
  const [reason, setReason] = useState('');
  const [details, setDetails] = useState('');
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);

  const reportReasons = [
    { value: 'copyright', label: 'Copyright Infringement', description: 'This content appears to be copyrighted material' },
    { value: 'spam', label: 'Spam or Misleading', description: 'This resource is spam or misleading' },
    { value: 'low_quality', label: 'Low Quality', description: 'This resource is of poor quality or incomplete' },
    { value: 'inappropriate', label: 'Inappropriate Content', description: 'This content is inappropriate or offensive' },
    { value: 'malware', label: 'Malware or Virus', description: 'This file may contain malware or viruses' },
    { value: 'other', label: 'Other', description: 'Other reason not listed above' }
  ];

  if (!isOpen) return null;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user || !reason || !details.trim()) return;

    setLoading(true);

    try {
      const response = await fetch('/api/reports', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.id,
          resourceId,
          reason,
          details: details.trim()
        })
      });

      const data = await response.json();

      if (data.success) {
        setSubmitted(true);
        setTimeout(() => {
          onClose();
          setSubmitted(false);
          setReason('');
          setDetails('');
        }, 2000);
      } else {
        throw new Error(data.error || 'Failed to submit report');
      }
    } catch (error) {
      console.error('Error submitting report:', error);
      alert('Failed to submit report. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  if (submitted) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-8 text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <Flag className="w-8 h-8 text-green-600" />
          </div>
          <h3 className="text-xl font-bold text-slate-900 mb-2">Report Submitted</h3>
          <p className="text-gray-600">Thank you for helping keep our community safe. We'll review your report shortly.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center mr-3">
                <Flag className="w-5 h-5 text-red-600" />
              </div>
              <div>
                <h2 className="text-xl font-bold text-slate-900">Report Resource</h2>
                <p className="text-sm text-gray-600">Help us maintain quality and safety</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Resource Info */}
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <h3 className="font-semibold text-slate-900 mb-1">Reporting:</h3>
            <p className="text-gray-700">{resourceTitle}</p>
          </div>

          {/* Report Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                What's wrong with this resource? *
              </label>
              <div className="space-y-3">
                {reportReasons.map((reasonOption) => (
                  <label key={reasonOption.value} className="flex items-start cursor-pointer">
                    <input
                      type="radio"
                      name="reason"
                      value={reasonOption.value}
                      checked={reason === reasonOption.value}
                      onChange={(e) => setReason(e.target.value)}
                      className="mt-1 mr-3"
                      required
                    />
                    <div>
                      <div className="font-medium text-slate-900">{reasonOption.label}</div>
                      <div className="text-sm text-gray-600">{reasonOption.description}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Additional Details *
              </label>
              <textarea
                value={details}
                onChange={(e) => setDetails(e.target.value)}
                placeholder="Please provide specific details about the issue..."
                rows={4}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                required
              />
              <p className="text-xs text-gray-500 mt-1">
                Be specific to help our team investigate effectively
              </p>
            </div>

            {/* Warning */}
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex items-start">
                <AlertTriangle className="w-5 h-5 text-yellow-600 mr-3 mt-0.5" />
                <div>
                  <h4 className="font-semibold text-yellow-800 mb-1">Important Notice</h4>
                  <p className="text-yellow-700 text-sm">
                    False reports may result in account restrictions. Only report content that genuinely 
                    violates our community guidelines or terms of service.
                  </p>
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <div className="flex space-x-4">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={loading || !reason || !details.trim()}
                className="flex-1 bg-red-600 hover:bg-red-700 disabled:bg-red-400 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
              >
                {loading ? (
                  'Submitting...'
                ) : (
                  <>
                    <Send className="w-4 h-4 mr-2" />
                    Submit Report
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ReportModal;
import React, { useState } from 'react';
import { Star, Download, Heart, Eye, User, Clock, Tag, Flag } from 'lucide-react';
import { profileStorage } from '../lib/localStorage';
import CheckoutButton from './CheckoutButton';
import DownloadManager from './DownloadManager';
import VerificationBadge from './VerificationBadge';
import ReportModal from './ReportModal';

interface ResourceCardProps {
  resource: {
    id: string;
    coachId: string;
    title: string;
    description: string;
    price: number;
    sports: string[];
    levels: string[];
    rating: number;
    downloads: number;
    status: string;
    createdAt: string;
  };
  showPurchaseButton?: boolean;
  viewMode?: 'grid' | 'list';
  showDownloads?: boolean;
  isPurchased?: boolean;
}

const ResourceCard: React.FC<ResourceCardProps> = ({ 
  resource, 
  showPurchaseButton = true,
  viewMode = 'grid',
  showDownloads = false,
  isPurchased = false
}) => {
  const profile = profileStorage.getProfileById(resource.coachId);
  const [showReportModal, setShowReportModal] = useState(false);
  
  // Calculate days since upload
  const daysSinceUpload = Math.floor(
    (new Date().getTime() - new Date(resource.createdAt).getTime()) / (1000 * 60 * 60 * 24)
  );

  if (viewMode === 'list') {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-all">
        <div className="flex items-start space-x-6">
          <div className="w-20 h-20 bg-emerald-100 rounded-lg flex items-center justify-center flex-shrink-0">
            <Tag className="w-8 h-8 text-emerald-600" />
          </div>
          
          <div className="flex-1 min-w-0">
            <div className="flex items-start justify-between mb-2">
              <h3 className="text-xl font-bold text-slate-900">{resource.title}</h3>
              <span className="text-2xl font-bold text-emerald-600 ml-4">${resource.price}</span>
            </div>
            
            <p className="text-gray-600 mb-3 line-clamp-2">{resource.description}</p>
            
            <div className="flex items-center space-x-4 mb-3">
              <div className="flex items-center">
                <Star className="w-4 h-4 text-yellow-400 mr-1" />
                <span className="text-sm text-gray-600">{resource.rating}</span>
              </div>
              <div className="flex items-center">
                <Download className="w-4 h-4 text-gray-400 mr-1" />
                <span className="text-sm text-gray-600">{resource.downloads}</span>
              </div>
              {daysSinceUpload <= 7 && (
                <span className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                  {daysSinceUpload === 0 ? 'New!' : `${daysSinceUpload}d ago`}
                </span>
              )}
              <VerificationBadge isVerified={true} size="sm" className="ml-2" />
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex flex-wrap gap-2">
                {resource.sports.slice(0, 3).map((sport, index) => (
                  <span key={index} className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                    {sport}
                  </span>
                ))}
                <button 
                  onClick={() => setShowReportModal(true)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  title="Report this resource"
                >
                  <Flag className="w-4 h-4 text-gray-600" />
                </button>
                {resource.sports.length > 3 && (
                  <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                    +{resource.sports.length - 3}
                  </span>
                )}
              </div>
              
              <div className="flex items-center space-x-3">
                <div className="flex items-center">
                  <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center mr-2">
                    <User className="w-3 h-3 text-gray-600" />
                  </div>
                  <span className="text-sm text-gray-600">
                    {profile ? `${profile.firstName} ${profile.lastName}` : 'Coach'}
                  </span>
                </div>
                
                {showPurchaseButton && (
                  <CheckoutButton
                    resource={resource}
                    className="px-4 py-2 text-sm"
                  />
                )}
              </div>
            </div>
          </div>
        </div>
        
        {/* Report Modal */}
        <ReportModal
          isOpen={showReportModal}
          onClose={() => setShowReportModal(false)}
          resourceId={resource.id}
          resourceTitle={resource.title}
        />
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 hover:scale-[1.02]">
      <div className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1">
            <h3 className="text-xl font-bold text-slate-900 mb-2">{resource.title}</h3>
            <p className="text-gray-600 text-sm mb-3 line-clamp-3">{resource.description}</p>
            
            {/* Upload date indicator */}
            {daysSinceUpload <= 7 && (
              <div className="inline-flex items-center px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full mb-2">
                <Clock className="w-3 h-3 mr-1" />
                {daysSinceUpload === 0 ? 'New today!' : `${daysSinceUpload} days ago`}
              </div>
            )}
          </div>
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <Heart className="w-5 h-5 text-gray-400" />
          </button>
        </div>
        
        <div className="flex items-center justify-between mb-4 flex-wrap gap-2">
          <div className="flex items-center space-x-3">
            <Star className="w-4 h-4 text-yellow-400 mr-1" />
            <span className="text-sm text-gray-600">{resource.rating}</span>
            <span className="text-gray-400 mx-2">•</span>
            <Download className="w-4 h-4 text-gray-400" />
            <span className="text-sm text-gray-600">{resource.downloads}</span>
          </div>
          <span className="text-2xl font-bold text-emerald-600">${resource.price}</span>
        </div>
        
        <div className="flex flex-wrap gap-2 mb-4">
          {resource.sports.slice(0, 2).map((sport, index) => (
            <span key={index} className="inline-flex items-center px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
              <Tag className="w-3 h-3 mr-1" />
              {sport}
            </span>
          ))}
          {resource.levels.slice(0, 1).map((level, index) => (
            <span key={index} className="inline-flex items-center px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
              <Tag className="w-3 h-3 mr-1" />
              {level}
            </span>
          ))}
          {resource.sports.length > 2 && (
            <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
              +{resource.sports.length - 2} more
            </span>
          )}
        </div>
        
        <div className="flex items-center justify-between pt-4 border-t border-gray-200">
          <div className="flex items-center">
            <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center mr-2">
              <User className="w-4 h-4 text-gray-600" />
            </div>
            <div>
              <span className="text-sm font-medium text-gray-900">
                {profile ? `${profile.firstName} ${profile.lastName}` : 'Coach'}
              </span>
              {profile && (
                <p className="text-xs text-gray-500">{profile.title}</p>
              )}
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
              <Eye className="w-4 h-4 text-gray-600" />
            </button>
            
            {showPurchaseButton && (
              <CheckoutButton
                resource={resource}
                variant="primary"
                className="text-sm px-4 py-2"
              />
            )}
          </div>
        </div>
      </div>
      
      {/* Downloads Section */}
      {showDownloads && (
        <div className="mt-4">
          <DownloadManager
            resource={resource}
            isPurchased={isPurchased}
            onPurchaseRequired={() => {
              // This would trigger the purchase flow
              console.log('Purchase required for:', resource.title);
            }}
          />
        </div>
      )}
      
      {/* Report Modal */}
      <ReportModal
        isOpen={showReportModal}
        onClose={() => setShowReportModal(false)}
        resourceId={resource.id}
        resourceTitle={resource.title}
      />
    </div>
  );
};

export default ResourceCard;
import React, { useState } from 'react';
import { 
  FileText, 
  Edit, 
  Trash2, 
  Eye, 
  Download, 
  Star, 
  DollarSign,
  Calendar,
  Users,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  Clock,
  XCircle,
  Plus,
  Search,
  Filter
} from 'lucide-react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { profileStorage, resourceStorage } from '../lib/localStorage';

const ResourceManagement: React.FC = () => {
  const { user } = useAuth();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [sortBy, setSortBy] = useState('newest');

  const profile = user ? profileStorage.getProfileByUserId(user.id) : null;
  const allResources = profile ? resourceStorage.getResourcesByCoachId(profile.id) : [];

  // Filter and sort resources
  const filteredResources = allResources
    .filter(resource => {
      const matchesSearch = searchTerm === '' || 
        resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        resource.description.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesStatus = statusFilter === 'all' || resource.status === statusFilter;
      
      return matchesSearch && matchesStatus;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
        case 'oldest':
          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
        case 'price-high':
          return b.price - a.price;
        case 'price-low':
          return a.price - b.price;
        case 'sales':
          return b.downloads - a.downloads;
        case 'rating':
          return b.rating - a.rating;
        default:
          return 0;
      }
    });

  const stats = {
    total: allResources.length,
    active: allResources.filter(r => r.status === 'active').length,
    pending: allResources.filter(r => r.status === 'pending').length,
    rejected: allResources.filter(r => r.status === 'rejected').length,
    totalEarnings: allResources.reduce((sum, r) => sum + (r.price * r.downloads * 0.5), 0),
    totalSales: allResources.reduce((sum, r) => sum + r.downloads, 0)
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'pending':
        return <Clock className="w-4 h-4 text-yellow-600" />;
      case 'rejected':
        return <XCircle className="w-4 h-4 text-red-600" />;
      case 'inactive':
        return <AlertCircle className="w-4 h-4 text-gray-600" />;
      default:
        return <FileText className="w-4 h-4 text-gray-600" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'rejected':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'inactive':
        return 'bg-gray-100 text-gray-800 border-gray-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Please Sign In</h2>
          <p className="text-gray-600">You need to be signed in to manage your resources.</p>
        </div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Create Your Profile First</h2>
          <p className="text-gray-600 mb-6">You need a coach profile before you can manage resources.</p>
          <Link 
            to="/create-profile"
            className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
          >
            Create Profile
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Resource Management</h1>
              <p className="text-gray-600">Manage your coaching resources and track performance</p>
            </div>
            <Link 
              to="/upload"
              className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold flex items-center transition-colors"
            >
              <Plus className="w-4 h-4 mr-2" />
              Upload New Resource
            </Link>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <FileText className="w-6 h-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Total Resources</p>
                <p className="text-2xl font-bold text-slate-900">{stats.total}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Active Resources</p>
                <p className="text-2xl font-bold text-slate-900">{stats.active}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-emerald-100 rounded-lg">
                <DollarSign className="w-6 h-6 text-emerald-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Total Earnings</p>
                <p className="text-2xl font-bold text-slate-900">${stats.totalEarnings.toFixed(2)}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <TrendingUp className="w-6 h-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Total Sales</p>
                <p className="text-2xl font-bold text-slate-900">{stats.totalSales}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Pending Resources Alert */}
        {stats.pending > 0 && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-8">
            <div className="flex items-center">
              <Clock className="w-5 h-5 text-yellow-600 mr-3" />
              <div>
                <h3 className="text-sm font-semibold text-yellow-800">Resources Under Review</h3>
                <p className="text-sm text-yellow-700">
                  You have {stats.pending} resource{stats.pending !== 1 ? 's' : ''} pending approval. 
                  Our team typically reviews submissions within 1-3 business days.
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Filters and Search */}
        <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Search your resources..."
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
              </div>
            </div>
            
            <div className="flex gap-4">
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option value="all">All Status</option>
                <option value="active">Active</option>
                <option value="pending">Pending</option>
                <option value="rejected">Rejected</option>
                <option value="inactive">Inactive</option>
              </select>
              
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
                <option value="price-high">Price: High to Low</option>
                <option value="price-low">Price: Low to High</option>
                <option value="sales">Most Sales</option>
                <option value="rating">Highest Rated</option>
              </select>
            </div>
          </div>
        </div>

        {/* Resources List */}
        <div className="bg-white rounded-xl shadow-sm">
          {filteredResources.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-gray-200">
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Resource</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Status</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Price</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Sales</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Rating</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Earnings</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Created</th>
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredResources.map((resource) => {
                    const earnings = resource.price * resource.downloads * 0.5; // 50% commission for demo
                    return (
                      <tr key={resource.id} className="border-b border-gray-100 hover:bg-gray-50">
                        <td className="py-4 px-6">
                          <div className="flex items-start">
                            <div className="w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center mr-4 flex-shrink-0">
                              <FileText className="w-6 h-6 text-emerald-600" />
                            </div>
                            <div className="min-w-0 flex-1">
                              <h3 className="font-semibold text-slate-900 truncate">{resource.title}</h3>
                              <p className="text-sm text-gray-600 line-clamp-2">{resource.description}</p>
                              <div className="flex flex-wrap gap-1 mt-2">
                                {resource.sports.slice(0, 2).map((sport, index) => (
                                  <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                                    {sport}
                                  </span>
                                ))}
                                {resource.sports.length > 2 && (
                                  <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                                    +{resource.sports.length - 2} more
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>
                        </td>
                        <td className="py-4 px-6">
                          <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(resource.status)}`}>
                            {getStatusIcon(resource.status)}
                            <span className="ml-2 capitalize">{resource.status}</span>
                          </div>
                        </td>
                        <td className="py-4 px-6">
                          <span className="font-semibold text-slate-900">${resource.price}</span>
                        </td>
                        <td className="py-4 px-6">
                          <div className="flex items-center">
                            <Download className="w-4 h-4 text-gray-400 mr-1" />
                            <span className="text-slate-900">{resource.downloads}</span>
                          </div>
                        </td>
                        <td className="py-4 px-6">
                          <div className="flex items-center">
                            <Star className="w-4 h-4 text-yellow-400 mr-1" />
                            <span className="text-slate-900">{resource.rating}</span>
                          </div>
                        </td>
                        <td className="py-4 px-6">
                          <span className="font-semibold text-emerald-600">${earnings.toFixed(2)}</span>
                        </td>
                        <td className="py-4 px-6">
                          <div className="flex items-center text-sm text-gray-600">
                            <Calendar className="w-4 h-4 mr-1" />
                            {new Date(resource.createdAt).toLocaleDateString()}
                          </div>
                        </td>
                        <td className="py-4 px-6">
                          <div className="flex items-center space-x-2">
                            <button className="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors">
                              <Eye className="w-4 h-4" />
                            </button>
                            <button className="p-2 text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors">
                              <Edit className="w-4 h-4" />
                            </button>
                            <button className="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors">
                              <Trash2 className="w-4 h-4" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="text-center py-16">
              <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <FileText className="w-12 h-12 text-gray-400" />
              </div>
              <h3 className="text-2xl font-bold text-slate-900 mb-4">
                {allResources.length === 0 ? 'No Resources Yet' : 'No Results Found'}
              </h3>
              <p className="text-gray-600 mb-6">
                {allResources.length === 0 
                  ? 'Upload your first coaching resource to start earning!'
                  : 'Try adjusting your search or filter criteria.'
                }
              </p>
              {allResources.length === 0 ? (
                <Link 
                  to="/upload"
                  className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors inline-flex items-center"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Upload Your First Resource
                </Link>
              ) : (
                <button 
                  onClick={() => {
                    setSearchTerm('');
                    setStatusFilter('all');
                    setSortBy('newest');
                  }}
                  className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
                >
                  Clear Filters
                </button>
              )}
            </div>
          )}
        </div>

        {/* Tips Section */}
        <div className="mt-8 bg-gradient-to-r from-emerald-50 to-blue-50 rounded-xl p-6">
          <h3 className="text-lg font-bold text-slate-900 mb-4">💡 Tips to Maximize Your Resource Performance</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div className="flex items-start">
              <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                <FileText className="w-4 h-4 text-emerald-600" />
              </div>
              <div>
                <h4 className="font-semibold text-slate-900">Quality Content</h4>
                <p className="text-sm text-gray-600">Upload high-quality, unique resources that provide real value</p>
              </div>
            </div>
            <div className="flex items-start">
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                <Users className="w-4 h-4 text-blue-600" />
              </div>
              <div>
                <h4 className="font-semibold text-slate-900">Clear Descriptions</h4>
                <p className="text-sm text-gray-600">Write detailed descriptions that help coaches understand the value</p>
              </div>
            </div>
            <div className="flex items-start">
              <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                <TrendingUp className="w-4 h-4 text-purple-600" />
              </div>
              <div>
                <h4 className="font-semibold text-slate-900">Competitive Pricing</h4>
                <p className="text-sm text-gray-600">Research similar resources and price competitively</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResourceManagement;
import React, { useState } from 'react';
import { Eye, Download, Lock, Star, User, Calendar, Tag, AlertTriangle, Crown } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { useMembership } from '../hooks/useMembership';
import { canDownloadFull, isInTrial } from '../lib/membership';
import { profileStorage } from '../lib/localStorage';
import PreviewViewer from './PreviewViewer';
import CheckoutButton from './CheckoutButton';
import ReviewSystem from './ReviewSystem';
import RecommendationsCarousel from './RecommendationsCarousel';

interface ResourcePreviewProps {
  resourceId: string;
}

const ResourcePreview: React.FC<ResourcePreviewProps> = ({ resourceId }) => {
  const { user } = useAuth();
  const { membership } = useMembership();
  const [showReviews, setShowReviews] = useState(false);

  // Mock resource data - in real app, this would come from API
  const resource = {
    id: resourceId,
    coachId: 'coach1',
    title: 'Advanced Ball Handling Drills for Guards',
    description: 'Comprehensive collection of 25 progressive ball handling drills designed specifically for point guards and shooting guards. Includes detailed diagrams, coaching points, and progression sequences.',
    price: 12.99,
    sports: ['Basketball'],
    levels: ['High School', 'Collegiate'],
    category: 'Drill Collections',
    rating: 4.8,
    downloads: 156,
    status: 'active',
    createdAt: '2024-01-10T10:00:00Z',
    tags: ['Ball Handling', 'Guards', 'Fundamentals', 'Progressive Training'],
    whatYouGet: [
      '25 detailed drill diagrams with step-by-step instructions',
      'Video demonstrations for each drill',
      'Progressive difficulty levels from beginner to advanced',
      'Coaching points and common mistakes to avoid',
      'Practice plan templates incorporating the drills'
    ],
    requirements: 'Basic basketball knowledge, access to a gym with basketballs',
    targetAudience: 'Perfect for high school and college coaches looking to improve their guards\' ball handling skills'
  };

  const profile = profileStorage.getProfileById(resource.coachId);
  const canDownload = membership ? canDownloadFull(membership) : false;
  const inTrial = membership ? isInTrial(membership) : false;

  const handlePurchaseClick = () => {
    if (!user) {
      alert('Please sign in to purchase resources');
      return;
    }
    
    if (inTrial) {
      alert('Upgrade to an active membership to purchase resources');
      return;
    }
    
    // This would trigger the purchase flow
    console.log('Purchase clicked for:', resource.title);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Resource Header */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <h1 className="text-3xl font-bold text-slate-900 mb-2">{resource.title}</h1>
                  <p className="text-gray-600 mb-4">{resource.description}</p>
                  
                  <div className="flex items-center space-x-4 text-sm text-gray-500 mb-4">
                    <div className="flex items-center">
                      <Star className="w-4 h-4 text-yellow-400 mr-1" />
                      <span>{resource.rating} ({resource.downloads} downloads)</span>
                    </div>
                    <div className="flex items-center">
                      <Calendar className="w-4 h-4 mr-1" />
                      <span>{new Date(resource.createdAt).toLocaleDateString()}</span>
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {resource.sports.map((sport, index) => (
                      <span key={index} className="px-3 py-1 bg-emerald-100 text-emerald-800 text-sm rounded-full">
                        {sport}
                      </span>
                    ))}
                    {resource.levels.map((level, index) => (
                      <span key={index} className="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full">
                        {level}
                      </span>
                    ))}
                    <span className="px-3 py-1 bg-purple-100 text-purple-800 text-sm rounded-full">
                      {resource.category}
                    </span>
                  </div>
                </div>
                
                <div className="text-right ml-6">
                  <div className="text-3xl font-bold text-emerald-600 mb-2">${resource.price}</div>
                  {!canDownload && (
                    <div className="text-sm text-gray-500">
                      <Lock className="w-4 h-4 inline mr-1" />
                      Active membership required
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Preview Section */}
            <PreviewViewer
              resourceId={resourceId}
              title={resource.title}
              price={resource.price}
              onPurchaseClick={handlePurchaseClick}
            />

            {/* What You Get */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-xl font-bold text-slate-900 mb-4">What You Get</h3>
              <ul className="space-y-2">
                {resource.whatYouGet.map((item, index) => (
                  <li key={index} className="flex items-start">
                    <div className="w-5 h-5 bg-emerald-100 rounded-full flex items-center justify-center mr-3 mt-0.5">
                      <span className="text-emerald-600 text-xs">✓</span>
                    </div>
                    <span className="text-gray-700">{item}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Requirements & Target Audience */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-bold text-slate-900 mb-3">Requirements</h3>
                <p className="text-gray-700">{resource.requirements}</p>
              </div>
              
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-bold text-slate-900 mb-3">Target Audience</h3>
                <p className="text-gray-700">{resource.targetAudience}</p>
              </div>
            </div>

            {/* Reviews Section */}
            <div>
              <button
                onClick={() => setShowReviews(!showReviews)}
                className="w-full bg-white rounded-xl shadow-sm border border-gray-200 p-6 text-left hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-center justify-between">
                  <h3 className="text-xl font-bold text-slate-900">Reviews & Ratings</h3>
                  <div className="flex items-center">
                    <Star className="w-5 h-5 text-yellow-400 mr-1" />
                    <span className="font-semibold">{resource.rating}</span>
                    <span className="text-gray-500 ml-1">({resource.downloads} reviews)</span>
                  </div>
                </div>
              </button>
              
              {showReviews && (
                <div className="mt-4">
                  <ReviewSystem
                    resourceId={resourceId}
                    averageRating={resource.rating}
                    totalReviews={resource.downloads}
                  />
                </div>
              )}
            </div>
          </div>

          {/* Recommendations */}
          <RecommendationsCarousel
            resourceId={resourceId}
            onResourceClick={(id) => window.location.href = `/resource/${id}`}
          />

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Purchase Card */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 sticky top-8">
              <div className="text-center mb-6">
                <div className="text-3xl font-bold text-slate-900 mb-2">${resource.price}</div>
                <p className="text-gray-600">One-time purchase</p>
              </div>

              {/* Trial User Notice */}
              {inTrial && (
                <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-start">
                    <AlertTriangle className="w-4 h-4 text-blue-600 mr-2 mt-0.5" />
                    <div>
                      <p className="text-blue-800 text-sm font-medium">Trial Mode</p>
                      <p className="text-blue-700 text-xs">Upgrade to purchase and download resources</p>
                    </div>
                  </div>
                </div>
              )}

              <div className="space-y-3">
                <CheckoutButton
                  resource={resource}
                  className="w-full"
                />
                
                <button className="w-full border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors">
                  Add to Wishlist
                </button>
              </div>

              {/* Features */}
              <div className="mt-6 pt-6 border-t border-gray-200">
                <div className="space-y-3 text-sm">
                  <div className="flex items-center">
                    <Download className="w-4 h-4 text-green-500 mr-2" />
                    <span className="text-gray-700">Instant download</span>
                  </div>
                  <div className="flex items-center">
                    <Crown className="w-4 h-4 text-emerald-500 mr-2" />
                    <span className="text-gray-700">Lifetime access</span>
                  </div>
                  <div className="flex items-center">
                    <User className="w-4 h-4 text-blue-500 mr-2" />
                    <span className="text-gray-700">Coach support</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Coach Info */}
            {profile && (
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-bold text-slate-900 mb-4">About the Coach</h3>
                
                <div className="flex items-center mb-4">
                  <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center mr-3">
                    <User className="w-6 h-6 text-gray-600" />
                  </div>
                  <div>
                    <h4 className="font-semibold text-slate-900">
                      {profile.firstName} {profile.lastName}
                    </h4>
                    <p className="text-sm text-emerald-600">{profile.title}</p>
                    <p className="text-xs text-gray-500">{profile.location}</p>
                  </div>
                </div>

                <p className="text-gray-700 text-sm mb-4 line-clamp-3">{profile.bio}</p>

                <div className="flex flex-wrap gap-1 mb-4">
                  {profile.specialties.slice(0, 3).map((specialty, index) => (
                    <span key={index} className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">
                      {specialty}
                    </span>
                  ))}
                </div>

                <div className="flex space-x-2">
                  <button className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white py-2 rounded-lg text-sm font-semibold transition-colors">
                    View Profile
                  </button>
                  <button className="flex-1 border border-gray-300 hover:bg-gray-50 py-2 rounded-lg text-sm font-semibold transition-colors">
                    Message Coach
                  </button>
                </div>
              </div>
            )}

            {/* Tags */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-bold text-slate-900 mb-4">Tags</h3>
              <div className="flex flex-wrap gap-2">
                {resource.tags.map((tag, index) => (
                  <span key={index} className="inline-flex items-center px-2 py-1 bg-gray-100 text-gray-700 text-sm rounded-full">
                    <Tag className="w-3 h-3 mr-1" />
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResourcePreview;
import { useState, useEffect } from 'react';
import { Download, ShoppingCart, Gift, Loader2 } from 'lucide-react';
import { mvpApi, isPaidFeatureEnabled } from '../lib/mvp-api';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';

interface ResourcePurchaseProps {
  resourceId: string;
  price: number;
  ownerId: string;
}

export default function ResourcePurchase({ resourceId, price, ownerId }: ResourcePurchaseProps) {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [owned, setOwned] = useState(false);
  const [checking, setChecking] = useState(true);

  const priceCents = Math.round(price * 100);
  const isFree = priceCents === 0;
  const isOwner = user?.id === ownerId;
  const paidEnabled = isPaidFeatureEnabled();

  useEffect(() => {
    checkOwnership();
  }, [user, resourceId]);

  async function checkOwnership() {
    if (!user) {
      setChecking(false);
      return;
    }

    try {
      const { data, error } = await supabase
        .from('purchases')
        .select('id')
        .eq('buyer_id', user.id)
        .eq('resource_id', resourceId)
        .eq('status', 'completed')
        .maybeSingle();

      if (error) throw error;

      setOwned(!!data);
    } catch (err: any) {
      console.error('Error checking ownership:', err);
    } finally {
      setChecking(false);
    }
  }

  async function handleFreePurchase() {
    if (!user) {
      setError('Please log in to get this resource');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      await mvpApi.purchaseFree(resourceId);
      setOwned(true);
    } catch (err: any) {
      setError(err.message || 'Failed to complete purchase');
    } finally {
      setLoading(false);
    }
  }

  async function handlePaidPurchase() {
    if (!user) {
      setError('Please log in to purchase this resource');
      return;
    }

    if (!paidEnabled) {
      setError('Paid features are not available yet');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const { url } = await mvpApi.createCheckoutSession(resourceId);
      window.location.href = url;
    } catch (err: any) {
      setError(err.message || 'Failed to create checkout session');
      setLoading(false);
    }
  }

  async function handleDownload() {
    if (!user) {
      setError('Please log in to download');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const { url } = await mvpApi.getDownloadUrl(resourceId);
      window.open(url, '_blank');
    } catch (err: any) {
      setError(err.message || 'Failed to generate download link');
    } finally {
      setLoading(false);
    }
  }

  if (checking) {
    return (
      <div className="flex items-center justify-center py-4">
        <Loader2 className="w-6 h-6 animate-spin text-gray-400" />
      </div>
    );
  }

  if (isOwner || owned) {
    return (
      <div className="space-y-3">
        <button
          onClick={handleDownload}
          disabled={loading}
          className="w-full bg-emerald-500 text-white px-6 py-3 rounded-lg hover:bg-emerald-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2 font-semibold"
        >
          {loading ? (
            <>
              <Loader2 className="w-5 h-5 animate-spin" />
              Generating link...
            </>
          ) : (
            <>
              <Download className="w-5 h-5" />
              Download
            </>
          )}
        </button>

        {error && (
          <div className="bg-red-900/20 border border-red-500 rounded-lg p-3">
            <p className="text-red-400 text-sm">{error}</p>
          </div>
        )}
      </div>
    );
  }

  if (isFree) {
    return (
      <div className="space-y-3">
        <button
          onClick={handleFreePurchase}
          disabled={loading}
          className="w-full bg-emerald-500 text-white px-6 py-3 rounded-lg hover:bg-emerald-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2 font-semibold"
        >
          {loading ? (
            <>
              <Loader2 className="w-5 h-5 animate-spin" />
              Getting...
            </>
          ) : (
            <>
              <Gift className="w-5 h-5" />
              Get for Free
            </>
          )}
        </button>

        {error && (
          <div className="bg-red-900/20 border border-red-500 rounded-lg p-3">
            <p className="text-red-400 text-sm">{error}</p>
          </div>
        )}
      </div>
    );
  }

  if (!paidEnabled) {
    return (
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-4">
        <p className="text-gray-400 text-sm text-center">
          Paid resources are not available yet. Check back soon!
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      <div className="bg-gray-800 rounded-lg p-4 mb-3">
        <div className="text-center">
          <span className="text-3xl font-bold text-white">
            ${(priceCents / 100).toFixed(2)}
          </span>
          <p className="text-sm text-gray-400 mt-1">One-time purchase</p>
        </div>
      </div>

      <button
        onClick={handlePaidPurchase}
        disabled={loading}
        className="w-full bg-emerald-500 text-white px-6 py-3 rounded-lg hover:bg-emerald-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2 font-semibold"
      >
        {loading ? (
          <>
            <Loader2 className="w-5 h-5 animate-spin" />
            Redirecting...
          </>
        ) : (
          <>
            <ShoppingCart className="w-5 h-5" />
            Buy Now
          </>
        )}
      </button>

      {error && (
        <div className="bg-red-900/20 border border-red-500 rounded-lg p-3">
          <p className="text-red-400 text-sm">{error}</p>
        </div>
      )}

      <p className="text-xs text-gray-500 text-center">
        Secure checkout powered by Stripe
      </p>
    </div>
  );
}

import React, { useState } from 'react';
import { Star, ThumbsUp, ThumbsDown, Flag, User, Calendar, CheckCircle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { profileStorage, generateId } from '../lib/localStorage';

interface Review {
  id: string;
  resourceId: string;
  userId: string;
  rating: number;
  title: string;
  comment: string;
  helpful: number;
  notHelpful: number;
  verified: boolean;
  createdAt: string;
  updatedAt: string;
}

interface ReviewSystemProps {
  resourceId: string;
  averageRating: number;
  totalReviews: number;
  onRatingUpdate?: (newRating: number, newCount: number) => void;
}

const ReviewSystem: React.FC<ReviewSystemProps> = ({
  resourceId,
  averageRating,
  totalReviews,
  onRatingUpdate
}) => {
  const { user } = useAuth();
  const [reviews, setReviews] = useState<Review[]>([
    // Mock reviews for demonstration
    {
      id: '1',
      resourceId,
      userId: 'user1',
      rating: 5,
      title: 'Excellent resource for youth basketball!',
      comment: 'These drills really helped my team improve their ball handling skills. The instructions are clear and the progressions make sense. Highly recommend for any youth coach.',
      helpful: 12,
      notHelpful: 1,
      verified: true,
      createdAt: '2024-01-10T10:00:00Z',
      updatedAt: '2024-01-10T10:00:00Z'
    },
    {
      id: '2',
      resourceId,
      userId: 'user2',
      rating: 4,
      title: 'Good content, could use more variations',
      comment: 'Solid fundamentals covered here. My players responded well to these drills. Would love to see some advanced variations in a future update.',
      helpful: 8,
      notHelpful: 0,
      verified: true,
      createdAt: '2024-01-08T14:30:00Z',
      updatedAt: '2024-01-08T14:30:00Z'
    },
    {
      id: '3',
      resourceId,
      userId: 'user3',
      rating: 5,
      title: 'Perfect for high school level',
      comment: 'Used these drills with my varsity team and saw immediate improvement. The video demonstrations are particularly helpful.',
      helpful: 15,
      notHelpful: 2,
      verified: false,
      createdAt: '2024-01-05T09:15:00Z',
      updatedAt: '2024-01-05T09:15:00Z'
    }
  ]);

  const [showReviewForm, setShowReviewForm] = useState(false);
  const [newReview, setNewReview] = useState({
    rating: 0,
    title: '',
    comment: ''
  });
  const [sortBy, setSortBy] = useState<'newest' | 'oldest' | 'helpful' | 'rating'>('newest');

  // Get user profiles for review display
  const getUserProfile = (userId: string) => {
    // Mock user data - in real app, this would come from your user system
    const mockUsers: { [key: string]: any } = {
      'user1': { firstName: 'Mike', lastName: 'Johnson', title: 'Youth Basketball Coach' },
      'user2': { firstName: 'Sarah', lastName: 'Williams', title: 'High School Coach' },
      'user3': { firstName: 'Tom', lastName: 'Davis', title: 'Varsity Coach' }
    };
    return mockUsers[userId] || { firstName: 'Coach', lastName: '', title: 'Coach' };
  };

  const handleSubmitReview = () => {
    if (!user || newReview.rating === 0 || !newReview.title.trim()) return;

    const review: Review = {
      id: generateId(),
      resourceId,
      userId: user.id,
      rating: newReview.rating,
      title: newReview.title.trim(),
      comment: newReview.comment.trim(),
      helpful: 0,
      notHelpful: 0,
      verified: true, // Mock verification
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    setReviews([review, ...reviews]);
    setNewReview({ rating: 0, title: '', comment: '' });
    setShowReviewForm(false);

    // Update parent component with new rating
    const newTotalReviews = totalReviews + 1;
    const newAverageRating = ((averageRating * totalReviews) + newReview.rating) / newTotalReviews;
    onRatingUpdate?.(newAverageRating, newTotalReviews);
  };

  const handleHelpfulVote = (reviewId: string, isHelpful: boolean) => {
    setReviews(reviews.map(review => {
      if (review.id === reviewId) {
        return {
          ...review,
          helpful: isHelpful ? review.helpful + 1 : review.helpful,
          notHelpful: !isHelpful ? review.notHelpful + 1 : review.notHelpful
        };
      }
      return review;
    }));
  };

  const sortedReviews = [...reviews].sort((a, b) => {
    switch (sortBy) {
      case 'newest':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
      case 'oldest':
        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
      case 'helpful':
        return b.helpful - a.helpful;
      case 'rating':
        return b.rating - a.rating;
      default:
        return 0;
    }
  });

  const renderStars = (rating: number, interactive = false, onRatingChange?: (rating: number) => void) => {
    return (
      <div className="flex items-center">
        {[1, 2, 3, 4, 5].map((star) => (
          <button
            key={star}
            onClick={() => interactive && onRatingChange?.(star)}
            className={`${interactive ? 'cursor-pointer hover:scale-110' : 'cursor-default'} transition-transform`}
            disabled={!interactive}
          >
            <Star
              className={`w-5 h-5 ${
                star <= rating
                  ? 'text-yellow-400 fill-current'
                  : 'text-gray-300'
              }`}
            />
          </button>
        ))}
      </div>
    );
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-2xl font-bold text-slate-900">Reviews & Ratings</h3>
          <div className="flex items-center mt-2">
            {renderStars(averageRating)}
            <span className="ml-2 text-lg font-semibold text-slate-900">{averageRating.toFixed(1)}</span>
            <span className="ml-2 text-gray-600">({totalReviews} reviews)</span>
          </div>
        </div>
        
        {user && (
          <button
            onClick={() => setShowReviewForm(!showReviewForm)}
            className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors"
          >
            Write Review
          </button>
        )}
      </div>

      {/* Rating Distribution */}
      <div className="mb-8">
        <h4 className="font-semibold text-slate-900 mb-4">Rating Distribution</h4>
        <div className="space-y-2">
          {[5, 4, 3, 2, 1].map((rating) => {
            const count = reviews.filter(r => r.rating === rating).length;
            const percentage = totalReviews > 0 ? (count / totalReviews) * 100 : 0;
            
            return (
              <div key={rating} className="flex items-center">
                <span className="text-sm text-gray-600 w-8">{rating}</span>
                <Star className="w-4 h-4 text-yellow-400 fill-current mr-2" />
                <div className="flex-1 bg-gray-200 rounded-full h-2 mr-4">
                  <div
                    className="bg-yellow-400 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${percentage}%` }}
                  ></div>
                </div>
                <span className="text-sm text-gray-600 w-8">{count}</span>
              </div>
            );
          })}
        </div>
      </div>

      {/* Review Form */}
      {showReviewForm && (
        <div className="bg-gray-50 rounded-lg p-6 mb-8">
          <h4 className="font-semibold text-slate-900 mb-4">Write Your Review</h4>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Rating *</label>
              {renderStars(newReview.rating, true, (rating) => 
                setNewReview({ ...newReview, rating })
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Review Title *</label>
              <input
                type="text"
                value={newReview.title}
                onChange={(e) => setNewReview({ ...newReview, title: e.target.value })}
                placeholder="Summarize your experience..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Your Review</label>
              <textarea
                value={newReview.comment}
                onChange={(e) => setNewReview({ ...newReview, comment: e.target.value })}
                placeholder="Share your thoughts about this resource..."
                rows={4}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              />
            </div>
            
            <div className="flex space-x-4">
              <button
                onClick={handleSubmitReview}
                disabled={newReview.rating === 0 || !newReview.title.trim()}
                className="bg-emerald-600 hover:bg-emerald-700 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                Submit Review
              </button>
              <button
                onClick={() => setShowReviewForm(false)}
                className="border border-gray-300 hover:bg-gray-50 px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Sort Controls */}
      <div className="flex items-center justify-between mb-6">
        <h4 className="font-semibold text-slate-900">Reviews ({reviews.length})</h4>
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value as any)}
          className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
        >
          <option value="newest">Newest First</option>
          <option value="oldest">Oldest First</option>
          <option value="helpful">Most Helpful</option>
          <option value="rating">Highest Rating</option>
        </select>
      </div>

      {/* Reviews List */}
      <div className="space-y-6">
        {sortedReviews.map((review) => {
          const userProfile = getUserProfile(review.userId);
          const reviewDate = new Date(review.createdAt).toLocaleDateString();
          
          return (
            <div key={review.id} className="border-b border-gray-200 pb-6 last:border-b-0">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center">
                  <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center mr-3">
                    <User className="w-5 h-5 text-gray-600" />
                  </div>
                  <div>
                    <div className="flex items-center">
                      <span className="font-semibold text-slate-900">
                        {userProfile.firstName} {userProfile.lastName}
                      </span>
                      {review.verified && (
                        <CheckCircle className="w-4 h-4 text-emerald-500 ml-2" title="Verified Purchase" />
                      )}
                    </div>
                    <p className="text-sm text-gray-600">{userProfile.title}</p>
                  </div>
                </div>
                
                <div className="text-right">
                  {renderStars(review.rating)}
                  <div className="flex items-center text-sm text-gray-500 mt-1">
                    <Calendar className="w-4 h-4 mr-1" />
                    {reviewDate}
                  </div>
                </div>
              </div>
              
              <h5 className="font-semibold text-slate-900 mb-2">{review.title}</h5>
              {review.comment && (
                <p className="text-gray-700 mb-4 leading-relaxed">{review.comment}</p>
              )}
              
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => handleHelpfulVote(review.id, true)}
                    className="flex items-center text-sm text-gray-600 hover:text-emerald-600 transition-colors"
                  >
                    <ThumbsUp className="w-4 h-4 mr-1" />
                    Helpful ({review.helpful})
                  </button>
                  <button
                    onClick={() => handleHelpfulVote(review.id, false)}
                    className="flex items-center text-sm text-gray-600 hover:text-red-600 transition-colors"
                  >
                    <ThumbsDown className="w-4 h-4 mr-1" />
                    Not Helpful ({review.notHelpful})
                  </button>
                </div>
                
                <button className="flex items-center text-sm text-gray-500 hover:text-red-600 transition-colors">
                  <Flag className="w-4 h-4 mr-1" />
                  Report
                </button>
              </div>
            </div>
          );
        })}
      </div>

      {reviews.length === 0 && (
        <div className="text-center py-12">
          <Star className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h4 className="text-lg font-semibold text-slate-900 mb-2">No Reviews Yet</h4>
          <p className="text-gray-600">Be the first to review this resource!</p>
        </div>
      )}
    </div>
  );
};

export default ReviewSystem;
// Advanced search bar with debounced input and suggestions
import React, { useState, useEffect, useRef } from 'react';
import { Search, X, TrendingUp, Clock, Filter } from 'lucide-react';

interface SearchBarProps {
  value: string;
  onChange: (value: string) => void;
  onSearch?: (query: string) => void;
  placeholder?: string;
  showSuggestions?: boolean;
  className?: string;
}

interface SearchSuggestion {
  type: 'query' | 'sport' | 'coach' | 'trending';
  text: string;
  icon?: React.ReactNode;
}

const SearchBar: React.FC<SearchBarProps> = ({
  value,
  onChange,
  onSearch,
  placeholder = "Search for drills, playbooks, training programs...",
  showSuggestions = true,
  className = ""
}) => {
  const [focused, setFocused] = useState(false);
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);
  const [loading, setLoading] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const debounceRef = useRef<NodeJS.Timeout>();

  // Popular search suggestions
  const popularSuggestions: SearchSuggestion[] = [
    { type: 'trending', text: 'basketball drills', icon: <TrendingUp className="w-4 h-4" /> },
    { type: 'trending', text: 'football playbooks', icon: <TrendingUp className="w-4 h-4" /> },
    { type: 'trending', text: 'soccer training', icon: <TrendingUp className="w-4 h-4" /> },
    { type: 'trending', text: 'youth coaching', icon: <TrendingUp className="w-4 h-4" /> },
    { type: 'sport', text: 'baseball', icon: <Filter className="w-4 h-4" /> },
    { type: 'sport', text: 'volleyball', icon: <Filter className="w-4 h-4" /> },
    { type: 'query', text: 'practice plans', icon: <Clock className="w-4 h-4" /> },
    { type: 'query', text: 'conditioning', icon: <Clock className="w-4 h-4" /> }
  ];

  useEffect(() => {
    if (value.length > 2) {
      // Debounce search suggestions
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
      }
      
      debounceRef.current = setTimeout(() => {
        fetchSuggestions(value);
      }, 300);
    } else {
      setSuggestions(popularSuggestions);
    }

    return () => {
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
      }
    };
  }, [value]);

  const fetchSuggestions = async (query: string) => {
    if (!showSuggestions) return;
    
    setLoading(true);
    
    try {
      // In a real implementation, you might call an autocomplete API
      // For now, filter popular suggestions
      const filtered = popularSuggestions.filter(suggestion =>
        suggestion.text.toLowerCase().includes(query.toLowerCase())
      );
      
      setSuggestions(filtered);
    } catch (error) {
      console.error('Error fetching suggestions:', error);
      setSuggestions([]);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (value.trim()) {
      onSearch?.(value.trim());
      setFocused(false);
    }
  };

  const handleSuggestionClick = (suggestion: SearchSuggestion) => {
    onChange(suggestion.text);
    onSearch?.(suggestion.text);
    setFocused(false);
  };

  const handleClear = () => {
    onChange('');
    inputRef.current?.focus();
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Escape') {
      setFocused(false);
      inputRef.current?.blur();
    }
  };

  return (
    <div className={`relative ${className}`}>
      <form onSubmit={handleSubmit} className="relative">
        <div className="relative">
          <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            ref={inputRef}
            type="text"
            value={value}
            onChange={(e) => onChange(e.target.value)}
            onFocus={() => setFocused(true)}
            onBlur={() => setTimeout(() => setFocused(false), 200)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className="w-full pl-12 pr-12 py-4 text-lg border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 shadow-sm bg-white"
          />
          {value && (
            <button
              type="button"
              onClick={handleClear}
              className="absolute right-4 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100"
            >
              <X className="w-4 h-4" />
            </button>
          )}
        </div>
      </form>

      {/* Suggestions Dropdown */}
      {focused && showSuggestions && suggestions.length > 0 && (
        <div className="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto">
          <div className="p-2">
            {value.length <= 2 && (
              <div className="px-3 py-2 text-sm font-medium text-gray-500 border-b border-gray-100">
                Popular Searches
              </div>
            )}
            
            {suggestions.map((suggestion, index) => (
              <button
                key={index}
                onClick={() => handleSuggestionClick(suggestion)}
                className="w-full flex items-center px-3 py-2 text-left hover:bg-gray-50 rounded-lg transition-colors"
              >
                <div className="flex items-center flex-1">
                  {suggestion.icon && (
                    <div className="mr-3 text-gray-400">
                      {suggestion.icon}
                    </div>
                  )}
                  <span className="text-gray-700">{suggestion.text}</span>
                </div>
                
                {suggestion.type === 'trending' && (
                  <span className="text-xs text-emerald-600 font-medium">Trending</span>
                )}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SearchBar;
import React, { useState } from 'react';
import { Search, Filter, X, ChevronDown, DollarSign, Star, Calendar } from 'lucide-react';

interface SearchFiltersProps {
  onFiltersChange: (filters: FilterState) => void;
  totalResults: number;
}

export interface FilterState {
  searchTerm: string;
  sports: string[];
  levels: string[];
  categories: string[];
  priceRange: [number, number];
  rating: number;
  sortBy: string;
  dateRange: string;
}

const SearchFilters: React.FC<SearchFiltersProps> = ({ onFiltersChange, totalResults }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [filters, setFilters] = useState<FilterState>({
    searchTerm: '',
    sports: [],
    levels: [],
    categories: [],
    priceRange: [0, 100],
    rating: 0,
    sortBy: 'newest',
    dateRange: 'all'
  });

  const sports = [
    'Basketball', 'Football', 'Baseball', 'Soccer', 'Volleyball', 
    'Tennis', 'Track & Field', 'Swimming', 'Wrestling', 'Golf',
    'Softball', 'Cross Country', 'Lacrosse', 'Hockey'
  ];

  const levels = [
    'Youth (Ages 6-12)', 'Middle School', 'High School', 
    'Travel/Club', 'Collegiate', 'Professional', 'Adult Recreation'
  ];

  const categories = [
    'Practice Plans', 'Drill Collections', 'Playbooks', 'Training Programs',
    'Strategy Guides', 'Skill Development', 'Conditioning Plans', 'Game Analysis',
    'Player Development', 'Team Building', 'Mental Training', 'Recruiting Guides'
  ];

  const sortOptions = [
    { value: 'newest', label: 'Newest First' },
    { value: 'oldest', label: 'Oldest First' },
    { value: 'price-low', label: 'Price: Low to High' },
    { value: 'price-high', label: 'Price: High to Low' },
    { value: 'rating', label: 'Highest Rated' },
    { value: 'popular', label: 'Most Popular' },
    { value: 'title', label: 'Alphabetical' }
  ];

  const dateRanges = [
    { value: 'all', label: 'All Time' },
    { value: 'week', label: 'Past Week' },
    { value: 'month', label: 'Past Month' },
    { value: '3months', label: 'Past 3 Months' },
    { value: 'year', label: 'Past Year' }
  ];

  const updateFilters = (newFilters: Partial<FilterState>) => {
    const updated = { ...filters, ...newFilters };
    setFilters(updated);
    onFiltersChange(updated);
  };

  const toggleArrayFilter = (array: string[], value: string, key: keyof FilterState) => {
    const newArray = array.includes(value) 
      ? array.filter(item => item !== value)
      : [...array, value];
    updateFilters({ [key]: newArray });
  };

  const clearAllFilters = () => {
    const clearedFilters: FilterState = {
      searchTerm: '',
      sports: [],
      levels: [],
      categories: [],
      priceRange: [0, 100],
      rating: 0,
      sortBy: 'newest',
      dateRange: 'all'
    };
    setFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const activeFilterCount = filters.sports.length + filters.levels.length + filters.categories.length + (filters.rating > 0 ? 1 : 0) + (filters.dateRange !== 'all' ? 1 : 0);

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 mb-8 animate-in slide-in-from-top duration-300">
      {/* Search Bar */}
      <div className="p-6 space-y-6">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-slate-900">Advanced Filters</h3>
          {activeFilterCount > 0 && (
            <button
              onClick={clearAllFilters}
              className="text-sm text-emerald-600 hover:text-emerald-700 font-medium"
            >
              Clear all ({activeFilterCount})
            </button>
          )}
        </div>

        <div className="space-y-6">
          {/* Sports Filter */}
          <div>
            <h3 className="text-sm font-semibold text-gray-700 mb-3">Sports</h3>
            <div className="flex flex-wrap gap-2">
              {sports.map(sport => (
                <button
                  key={sport}
                  onClick={() => toggleArrayFilter(filters.sports, sport, 'sports')}
                  className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                    filters.sports.includes(sport)
                      ? 'bg-emerald-100 text-emerald-800 border border-emerald-300'
                      : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'
                  }`}
                >
                  {sport}
                </button>
              ))}
            </div>
          </div>

          {/* Levels Filter */}
          <div>
            <h3 className="text-sm font-semibold text-gray-700 mb-3">Coaching Levels</h3>
            <div className="flex flex-wrap gap-2">
              {levels.map(level => (
                <button
                  key={level}
                  onClick={() => toggleArrayFilter(filters.levels, level, 'levels')}
                  className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                    filters.levels.includes(level)
                      ? 'bg-blue-100 text-blue-800 border border-blue-300'
                      : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'
                  }`}
                >
                  {level}
                </button>
              ))}
            </div>
          </div>

          {/* Categories Filter */}
          <div>
            <h3 className="text-sm font-semibold text-gray-700 mb-3">Categories</h3>
            <div className="flex flex-wrap gap-2">
              {categories.map(category => (
                <button
                  key={category}
                  onClick={() => toggleArrayFilter(filters.categories, category, 'categories')}
                  className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                    filters.categories.includes(category)
                      ? 'bg-purple-100 text-purple-800 border border-purple-300'
                      : 'bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200'
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Price Range */}
            <div>
              <h3 className="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                <DollarSign className="w-4 h-4 mr-1" />
                Price Range
              </h3>
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-gray-600">$</span>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={filters.priceRange[0]}
                    onChange={(e) => updateFilters({ 
                      priceRange: [parseInt(e.target.value), filters.priceRange[1]] 
                    })}
                    className="flex-1"
                  />
                  <span className="text-sm text-gray-600">${filters.priceRange[0]}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-gray-600">$</span>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={filters.priceRange[1]}
                    onChange={(e) => updateFilters({ 
                      priceRange: [filters.priceRange[0], parseInt(e.target.value)] 
                    })}
                    className="flex-1"
                  />
                  <span className="text-sm text-gray-600">${filters.priceRange[1]}+</span>
                </div>
              </div>
            </div>

            {/* Rating Filter */}
            <div>
              <h3 className="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                <Star className="w-4 h-4 mr-1" />
                Minimum Rating
              </h3>
              <div className="space-y-2">
                {[4, 3, 2, 1].map(rating => (
                  <button
                    key={rating}
                    onClick={() => updateFilters({ rating: filters.rating === rating ? 0 : rating })}
                    className={`flex items-center w-full p-2 rounded-lg text-sm transition-colors ${
                      filters.rating === rating
                        ? 'bg-yellow-50 border border-yellow-300'
                        : 'hover:bg-gray-50 border border-gray-200'
                    }`}
                  >
                    <div className="flex items-center">
                      {[1, 2, 3, 4, 5].map(star => (
                        <Star
                          key={star}
                          className={`w-4 h-4 ${
                            star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'
                          }`}
                        />
                      ))}
                      <span className="ml-2 text-gray-700">{rating}+ stars</span>
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Date Range */}
            <div>
              <h3 className="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                <Calendar className="w-4 h-4 mr-1" />
                Upload Date
              </h3>
              <select
                value={filters.dateRange}
                onChange={(e) => updateFilters({ dateRange: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                {dateRanges.map(range => (
                  <option key={range.value} value={range.value}>{range.label}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SearchFilters;
// Search results grid with highlighting and pagination
import React from 'react';
import { Star, Download, Eye, User, Calendar, Tag, ChevronLeft, ChevronRight } from 'lucide-react';
import { SearchResult, SearchHit } from '../lib/search/types';
import { profileStorage } from '../lib/localStorage';

interface SearchResultsProps {
  searchResult: SearchResult;
  onPageChange: (page: number) => void;
  onResourceClick: (resourceId: string, query?: string) => void;
  viewMode?: 'grid' | 'list';
  className?: string;
}

const SearchResults: React.FC<SearchResultsProps> = ({
  searchResult,
  onPageChange,
  onResourceClick,
  viewMode = 'grid',
  className = ""
}) => {
  const { hits, totalHits, page, totalPages, processingTimeMS } = searchResult;

  const formatPrice = (priceCents: number) => {
    return `$${(priceCents / 100).toFixed(2)}`;
  };

  const formatTimeAgo = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffInDays === 0) return 'Today';
    if (diffInDays === 1) return 'Yesterday';
    if (diffInDays < 7) return `${diffInDays} days ago`;
    if (diffInDays < 30) return `${Math.floor(diffInDays / 7)} weeks ago`;
    if (diffInDays < 365) return `${Math.floor(diffInDays / 30)} months ago`;
    return `${Math.floor(diffInDays / 365)} years ago`;
  };

  const renderHighlightedText = (text: string, highlight?: { value: string; matchLevel: string }) => {
    if (highlight?.value) {
      return <span dangerouslySetInnerHTML={{ __html: highlight.value }} />;
    }
    return text;
  };

  const SearchResultCard: React.FC<{ hit: SearchHit }> = ({ hit }) => {
    if (viewMode === 'list') {
      return (
        <div 
          className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-all cursor-pointer"
          onClick={() => onResourceClick(hit.id)}
        >
          <div className="flex items-start space-x-6">
            <div className="w-20 h-20 bg-emerald-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <Tag className="w-8 h-8 text-emerald-600" />
            </div>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-start justify-between mb-2">
                <h3 className="text-xl font-bold text-slate-900">
                  {renderHighlightedText(hit.title, hit._highlightResult?.title)}
                </h3>
                <span className="text-2xl font-bold text-emerald-600 ml-4">
                  {formatPrice(hit.price_cents)}
                </span>
              </div>
              
              <p className="text-gray-600 mb-3 line-clamp-2">
                {renderHighlightedText(hit.description, hit._highlightResult?.description)}
              </p>
              
              <div className="flex items-center space-x-4 mb-3">
                <div className="flex items-center">
                  <Star className="w-4 h-4 text-yellow-400 mr-1" />
                  <span className="text-sm text-gray-600">{hit.rating.toFixed(1)}</span>
                </div>
                <div className="flex items-center">
                  <Download className="w-4 h-4 text-gray-400 mr-1" />
                  <span className="text-sm text-gray-600">{hit.purchase_count}</span>
                </div>
                <div className="flex items-center">
                  <Eye className="w-4 h-4 text-gray-400 mr-1" />
                  <span className="text-sm text-gray-600">{hit.view_count}</span>
                </div>
                <div className="flex items-center">
                  <Calendar className="w-4 h-4 text-gray-400 mr-1" />
                  <span className="text-sm text-gray-600">{formatTimeAgo(hit.uploaded_at)}</span>
                </div>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex flex-wrap gap-2">
                  <span className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
                    {hit.sport}
                  </span>
                  <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                    {hit.level}
                  </span>
                  <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">
                    {hit.file_type.toUpperCase()}
                  </span>
                </div>
                
                <div className="flex items-center">
                  <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center mr-2">
                    <User className="w-3 h-3 text-gray-600" />
                  </div>
                  <span className="text-sm text-gray-600">{hit.coach_name}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }

    // Grid view
    return (
      <div 
        className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] cursor-pointer"
        onClick={() => onResourceClick(hit.id)}
      >
        <div className="p-6">
          <div className="flex items-start justify-between mb-4">
            <div className="flex-1">
              <h3 className="text-lg font-bold text-slate-900 mb-2 line-clamp-2">
                {renderHighlightedText(hit.title, hit._highlightResult?.title)}
              </h3>
              <p className="text-gray-600 text-sm mb-3 line-clamp-3">
                {renderHighlightedText(hit.description, hit._highlightResult?.description)}
              </p>
            </div>
          </div>
          
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-3">
              <div className="flex items-center">
                <Star className="w-4 h-4 text-yellow-400 mr-1" />
                <span className="text-sm text-gray-600">{hit.rating.toFixed(1)}</span>
              </div>
              <div className="flex items-center">
                <Download className="w-4 h-4 text-gray-400 mr-1" />
                <span className="text-sm text-gray-600">{hit.purchase_count}</span>
              </div>
            </div>
            <span className="text-xl font-bold text-emerald-600">
              {formatPrice(hit.price_cents)}
            </span>
          </div>
          
          <div className="flex flex-wrap gap-2 mb-4">
            <span className="px-2 py-1 bg-emerald-100 text-emerald-800 text-xs rounded-full">
              {hit.sport}
            </span>
            <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
              {hit.level}
            </span>
            <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">
              {hit.file_type.toUpperCase()}
            </span>
          </div>
          
          <div className="flex items-center justify-between pt-4 border-t border-gray-200">
            <div className="flex items-center">
              <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center mr-2">
                <User className="w-3 h-3 text-gray-600" />
              </div>
              <span className="text-sm text-gray-600">{hit.coach_name}</span>
            </div>
            
            <span className="text-xs text-gray-500">{formatTimeAgo(hit.uploaded_at)}</span>
          </div>
        </div>
      </div>
    );
  };

  if (hits.length === 0) {
    return (
      <div className={`text-center py-16 ${className}`}>
        <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <div className="text-4xl">🔍</div>
        </div>
        <h3 className="text-2xl font-bold text-slate-900 mb-4">No Results Found</h3>
        <p className="text-gray-600 mb-6">
          Try adjusting your search terms or filters to find what you're looking for.
        </p>
        <div className="space-y-2 text-sm text-gray-500">
          <p>💡 <strong>Try:</strong> "basketball drills", "football playbook", "soccer training"</p>
          <p>🏷️ <strong>Filter by:</strong> Sport, level, or file type</p>
        </div>
      </div>
    );
  }

  return (
    <div className={className}>
      {/* Results Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <p className="text-gray-600">
            <span className="font-semibold">{totalHits.toLocaleString()}</span> results
            {processingTimeMS > 0 && (
              <span className="text-gray-400 ml-2">({processingTimeMS}ms)</span>
            )}
          </p>
        </div>
        
        <div className="text-sm text-gray-500">
          Page {page} of {totalPages}
        </div>
      </div>

      {/* Results Grid/List */}
      <div className={`${
        viewMode === 'grid' 
          ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' 
          : 'space-y-4'
      } mb-8`}>
        {hits.map((hit) => (
          <SearchResultCard key={hit.id} hit={hit} />
        ))}
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-center space-x-2">
          <button
            onClick={() => onPageChange(page - 1)}
            disabled={page <= 1}
            className="flex items-center px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <ChevronLeft className="w-4 h-4 mr-1" />
            Previous
          </button>
          
          <div className="flex items-center space-x-1">
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              const pageNum = Math.max(1, Math.min(totalPages, page - 2 + i));
              return (
                <button
                  key={pageNum}
                  onClick={() => onPageChange(pageNum)}
                  className={`px-3 py-2 rounded-lg transition-colors ${
                    pageNum === page
                      ? 'bg-emerald-600 text-white'
                      : 'border border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  {pageNum}
                </button>
              );
            })}
          </div>
          
          <button
            onClick={() => onPageChange(page + 1)}
            disabled={page >= totalPages}
            className="flex items-center px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            Next
            <ChevronRight className="w-4 h-4 ml-1" />
          </button>
        </div>
      )}
    </div>
  );
};

export default SearchResults;
import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { CheckCircle, AlertCircle, ExternalLink, Loader, CreditCard, Shield, ArrowRight } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

const SellerOnboarding: React.FC = () => {
  const { user } = useAuth();
  const [searchParams] = useSearchParams();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [connectAccountId, setConnectAccountId] = useState<string | null>(null);
  const [onboardingComplete, setOnboardingComplete] = useState(false);

  const success = searchParams.get('success');
  const refresh = searchParams.get('refresh');

  useEffect(() => {
    if (success === 'true') {
      setOnboardingComplete(true);
    }
  }, [success]);

  const handleCreateConnectAccount = async () => {
    if (!user) return;

    setLoading(true);
    setError('');

    try {
      const response = await fetch('http://localhost:8787/stripe/connect/create-account', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: user.id }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to create Connect account');
      }

      setConnectAccountId(data.accountId);
      
      // Now create account link for onboarding
      await handleStartOnboarding(data.accountId);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create seller account');
    } finally {
      setLoading(false);
    }
  };

  const handleStartOnboarding = async (accountId?: string) => {
    if (!user) return;

    setLoading(true);
    setError('');

    try {
      const response = await fetch('http://localhost:8787/stripe/connect/account-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: user.id }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to create onboarding link');
      }

      // Redirect to Stripe onboarding
      window.location.href = data.url;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to start onboarding');
    } finally {
      setLoading(false);
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Please Sign In</h2>
          <p className="text-gray-600">You need to be signed in to become a seller.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-2xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <CreditCard className="w-8 h-8 text-emerald-600" />
            </div>
            <h1 className="text-3xl font-bold text-slate-900 mb-2">Become a Seller</h1>
            <p className="text-gray-600">Set up your seller account to start earning from your coaching expertise</p>
          </div>

          {/* Success State */}
          {onboardingComplete && (
            <div className="mb-8 p-6 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-center mb-4">
                <CheckCircle className="w-6 h-6 text-green-600 mr-3" />
                <h3 className="text-lg font-semibold text-green-800">Seller Account Active!</h3>
              </div>
              <p className="text-green-700 mb-4">
                Your seller account has been successfully set up. You can now upload and sell your coaching resources.
              </p>
              <div className="flex space-x-4">
                <a 
                  href="/upload"
                  className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors inline-flex items-center"
                >
                  Upload Your First Resource
                  <ArrowRight className="w-4 h-4 ml-2" />
                </a>
                <a 
                  href="/profile"
                  className="border border-gray-300 hover:bg-gray-50 px-6 py-3 rounded-lg font-semibold transition-colors"
                >
                  View Profile
                </a>
              </div>
            </div>
          )}

          {/* Error State */}
          {error && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center">
              <AlertCircle className="w-5 h-5 text-red-500 mr-3" />
              <span className="text-red-700">{error}</span>
            </div>
          )}

          {/* Onboarding Steps */}
          {!onboardingComplete && (
            <div className="space-y-6">
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-blue-800 mb-2">What You'll Need</h3>
                <ul className="text-blue-700 text-sm space-y-1">
                  <li>• Bank account information for payouts</li>
                  <li>• Tax identification (SSN or EIN)</li>
                  <li>• Business information (if applicable)</li>
                  <li>• Identity verification documents</li>
                </ul>
              </div>

              <div className="bg-emerald-50 border border-emerald-200 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-emerald-800 mb-2">Seller Benefits</h3>
                <ul className="text-emerald-700 text-sm space-y-1">
                  <li>• Keep 85% of every sale</li>
                  <li>• Automatic payouts to your bank account</li>
                  <li>• Professional seller dashboard</li>
                  <li>• Sales analytics and insights</li>
                  <li>• Marketing support from our team</li>
                </ul>
              </div>

              <div className="text-center">
                <button
                  onClick={handleCreateConnectAccount}
                  disabled={loading}
                  className="bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white px-8 py-4 rounded-lg font-bold text-lg transition-colors flex items-center justify-center mx-auto"
                >
                  {loading ? (
                    <>
                      <Loader className="w-5 h-5 mr-2 animate-spin" />
                      Setting up account...
                    </>
                  ) : (
                    <>
                      <Shield className="w-5 h-5 mr-2" />
                      Start Seller Setup
                    </>
                  )}
                </button>
                <p className="text-xs text-gray-500 mt-3">
                  Powered by Stripe • Secure & trusted by millions
                </p>
              </div>
            </div>
          )}

          {/* Security Notice */}
          <div className="mt-8 pt-6 border-t border-gray-200">
            <div className="flex items-start">
              <Shield className="w-5 h-5 text-gray-500 mr-3 mt-0.5" />
              <div>
                <h4 className="font-semibold text-gray-700 mb-1">Secure & Compliant</h4>
                <p className="text-xs text-gray-600">
                  Your financial information is processed securely by Stripe, our payment partner. 
                  We never store your banking details on our servers.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SellerOnboarding;
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { User, Users, Camera, MapPin, Award, Calendar, Star, CreditCard as Edit3, Save, X, DollarSign, TrendingUp, FileText, Plus, Eye, CreditCard as Edit, BarChart3, CreditCard, PieChart, ArrowUpRight, Clock, Download } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { db } from '../lib/supabase';
import { calculateCommission } from '../lib/stripe';

interface SellerProfileProps {
  isOwner?: boolean;
}

const SellerProfile: React.FC<SellerProfileProps> = ({ isOwner = false }) => {
  const { user } = useAuth();
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('profile');
  const [selectedPeriod, setSelectedPeriod] = useState('month');
  const [profile, setProfile] = useState<any>(null);
  const [resources, setResources] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadProfile = async () => {
      if (!user) {
        console.log('No user logged in');
        setLoading(false);
        return;
      }

      console.log('=== LOADING PROFILE ===');
      console.log('User ID:', user.id);

      try {
        const { data, error } = await db.getCoachProfile(user.id);
        console.log('Load result - data:', data, 'error:', error);

        if (error) {
          console.error('Error loading profile:', error);
        } else {
          setProfile(data);
          console.log('Profile set to state:', data);
        }
      } catch (error) {
        console.error('Exception loading profile:', error);
      } finally {
        setLoading(false);
      }
    };

    loadProfile();
  }, [user]);
  
  // Fixed 15% commission for all sellers
  const commissionRate = 0.15;

  // Calculate earnings data
  const totalSales = resources.reduce((sum, r) => sum + (r.price * r.downloads), 0);
  const platformCommission = totalSales * commissionRate;
  const netEarnings = totalSales - platformCommission;

  const stats = {
    totalEarnings: netEarnings,
    monthlyEarnings: netEarnings * 0.3,
    totalSales: resources.reduce((sum, r) => sum + r.downloads, 0),
    totalResources: resources.length,
    avgRating: resources.length > 0 ? resources.reduce((sum, r) => sum + r.rating, 0) / resources.length : 0,
    pendingPayout: netEarnings * 0.15,
    commissionRate: 15,
    followers: Math.floor(Math.random() * 2000) + 500
  };

  const recentSales = [
    { id: 1, resource: 'Advanced Ball Handling Drills', price: 12.99, date: '2024-01-15', buyer: 'Coach Mike', commission: 6.50, earnings: 6.49 },
    { id: 2, resource: 'Team Defense Strategies', price: 19.99, date: '2024-01-14', buyer: 'Sarah J.', commission: 10.00, earnings: 9.99 },
    { id: 3, resource: 'Youth Basketball Fundamentals', price: 8.99, date: '2024-01-14', buyer: 'Coach Tom', commission: 4.50, earnings: 4.49 },
    { id: 4, resource: 'Practice Planning Template', price: 5.99, date: '2024-01-13', buyer: 'Lisa M.', commission: 3.00, earnings: 2.99 },
  ];

  const monthlyData = [
    { month: 'Jan', sales: 450, earnings: 225, commission: 225 },
    { month: 'Feb', sales: 680, earnings: 340, commission: 340 },
    { month: 'Mar', sales: 520, earnings: 260, commission: 260 },
    { month: 'Apr', sales: 750, earnings: 375, commission: 375 },
    { month: 'May', sales: 890, earnings: 445, commission: 445 },
    { month: 'Jun', sales: 1200, earnings: 600, commission: 600 },
  ];

  const [profileData, setProfileData] = useState({
    name: 'Coach Profile',
    title: 'Create your profile to get started',
    location: '',
    yearsExperience: '',
    bio: 'No profile created yet. Click "Create Profile" to get started.',
    specialties: [],
    achievements: [],
    stats: {
      totalSales: 0,
      rating: 0,
      resources: 0,
      followers: 0
    }
  });

  useEffect(() => {
    if (profile) {
      // Handle both snake_case (Supabase) and camelCase (localStorage)
      const firstName = profile.first_name || profile.firstName;
      const lastName = profile.last_name || profile.lastName;
      const yearsExp = profile.years_experience || profile.yearsExperience;

      setProfileData({
        name: `${firstName} ${lastName}`,
        title: profile.title || '',
        location: profile.location || '',
        yearsExperience: yearsExp || '',
        bio: profile.bio || '',
        specialties: profile.specialties || [],
        achievements: profile.achievements || [],
        stats: {
          totalSales: stats.totalSales,
          rating: stats.avgRating,
          resources: stats.totalResources,
          followers: stats.followers
        }
      });
    }
  }, [profile]);

  const handleSyncToDatabase = async () => {
    if (!user || !profile) {
      console.log('No user or profile', { user, profile });
      alert('No user or profile data available');
      return;
    }

    console.log('=== SYNCING PROFILE ===');
    console.log('User:', user);
    console.log('Current profile:', profile);

    try {
      const payload = {
        user_id: user.id,
        first_name: profile.firstName,
        last_name: profile.lastName,
        title: profile.title,
        bio: profile.bio,
        location: profile.location,
        years_experience: '20+',
        sports: profile.sports || [],
        levels: profile.levels || [],
        specialties: profile.specialties || [],
        achievements: profile.achievements || [],
        website: profile.website || '',
        social_links: profile.socialLinks || {}
      };

      console.log('Payload to send:', payload);

      const { data, error } = await db.createCoachProfile(payload);

      console.log('Response:', { data, error });

      if (error) {
        console.error('Error syncing profile:', error);
        alert(`Failed to sync: ${error}`);
      } else {
        alert('Profile synced to database with 20+ years experience!');
        window.location.reload();
      }
    } catch (error: any) {
      console.error('Exception syncing profile:', error);
      alert(`Failed to sync profile: ${error.message}`);
    }
  };

  const handleSave = async () => {
    if (!user) {
      alert('You must be logged in to save changes');
      return;
    }

    if (!profile) {
      alert('No profile found.');
      return;
    }

    try {
      const updates = {
        first_name: profileData.name.split(' ')[0] || profileData.name,
        last_name: profileData.name.split(' ').slice(1).join(' ') || '',
        title: profileData.title,
        bio: profileData.bio,
        location: profileData.location,
        years_experience: profileData.yearsExperience,
        sports: profile.sports || [],
        levels: profile.levels || [],
        specialties: profileData.specialties.filter(s => s.trim() !== ''),
        achievements: profileData.achievements.filter(a => a.trim() !== ''),
        website: profile.website || '',
        social_links: profile.socialLinks || {}
      };

      // First check if profile exists in database
      const checkResult = await db.getCoachProfile(user.id);

      let result;
      if (!checkResult.data) {
        // Profile doesn't exist in DB - create it
        result = await db.createCoachProfile({
          user_id: user.id,
          ...updates
        });
      } else {
        // Profile exists - update it
        result = await db.updateCoachProfile(user.id, updates);
      }

      if (result.error) {
        alert(`Failed to save: ${result.error}`);
        return;
      }

      // Reload the profile from database
      const profileResult = await db.getCoachProfile(user.id);
      if (profileResult.data) {
        setProfile(profileResult.data);
      }

      setIsEditing(false);
      alert('Profile saved successfully!');
    } catch (error: any) {
      alert(`Error: ${error.message || 'Unknown error occurred'}`);
    }
  };

  if (!user) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Please Sign In</h2>
          <p className="text-gray-600">You need to be signed in to view your profile.</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <p className="text-gray-600">Loading profile...</p>
        </div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Complete Your Coach Profile</h2>
          <p className="text-gray-600 mb-6">Add more details to your coaching profile to start uploading resources and earning money.</p>
          <Link
            to="/complete-profile"
            className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
          >
            Complete Your Profile
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-2xl font-bold text-slate-900">Coach Profile & Dashboard</h1>
              <p className="text-gray-600">Manage your profile and track your coaching business</p>
            </div>
            <div className="flex items-center space-x-4">
              <Link 
                to="/upload"
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold flex items-center transition-colors no-underline"
              >
                <Plus className="w-4 h-4 mr-2" />
                Upload Resource
              </Link>
              <Link 
                to="/resources"
                className="border border-gray-300 hover:bg-gray-50 px-4 py-2 rounded-lg font-semibold transition-colors no-underline"
              >
                <FileText className="w-4 h-4 mr-2 inline" />
                Manage Resources
              </Link>
              {activeTab === 'earnings' && (
                <select
                  value={selectedPeriod}
                  onChange={(e) => setSelectedPeriod(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                >
                  <option value="week">This Week</option>
                  <option value="month">This Month</option>
                  <option value="quarter">This Quarter</option>
                  <option value="year">This Year</option>
                </select>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto p-6">

        {/* Profile Header */}
        <div className="bg-white rounded-xl shadow-lg overflow-hidden mb-6">
          <div className="h-32 bg-gradient-to-r from-blue-900 to-red-600"></div>
          <div className="relative px-6 pb-6">
            <div className="flex flex-col sm:flex-row items-start sm:items-end -mt-16 mb-4">
              <div className="relative">
                <div className="w-32 h-32 bg-gray-300 rounded-full border-4 border-white flex items-center justify-center">
                  <User className="w-16 h-16 text-gray-600" />
                </div>
                {isOwner && (
                  <button className="absolute bottom-2 right-2 w-8 h-8 bg-blue-900 rounded-full flex items-center justify-center text-white hover:bg-blue-800">
                    <Camera className="w-4 h-4" />
                  </button>
                )}
              </div>
              
              <div className="flex-1 sm:ml-6 mt-4 sm:mt-0">
                <div className="flex items-start justify-between">
                  <div>
                    {isEditing ? (
                      <div className="space-y-2">
                        <input
                          type="text"
                          value={profileData.name}
                          onChange={(e) => setProfileData({...profileData, name: e.target.value})}
                          className="text-2xl font-bold border-b-2 border-blue-900 bg-transparent focus:outline-none"
                        />
                        <input
                          type="text"
                          value={profileData.title}
                          onChange={(e) => setProfileData({...profileData, title: e.target.value})}
                          className="text-lg text-gray-600 border-b border-gray-300 bg-transparent focus:outline-none w-full"
                        />
                      </div>
                    ) : (
                      <>
                        <h1 className="text-2xl font-bold text-slate-900">{profileData.name}</h1>
                        <p className="text-lg text-gray-600">{profileData.title}</p>
                      </>
                    )}

                    {isEditing ? (
                      <div className="flex flex-col sm:flex-row gap-4 mt-3">
                        <div className="flex items-center">
                          <MapPin className="w-4 h-4 mr-2 text-gray-500" />
                          <input
                            type="text"
                            value={profileData.location}
                            onChange={(e) => setProfileData({...profileData, location: e.target.value})}
                            placeholder="Location"
                            className="border-b border-gray-300 bg-transparent focus:outline-none focus:border-blue-900 px-2 py-1"
                          />
                        </div>
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-2 text-gray-500" />
                          <select
                            value={profileData.yearsExperience}
                            onChange={(e) => setProfileData({...profileData, yearsExperience: e.target.value})}
                            className="border-b border-gray-300 bg-transparent focus:outline-none focus:border-blue-900 px-2 py-1"
                          >
                            <option value="0-2">0-2 years</option>
                            <option value="3-5">3-5 years</option>
                            <option value="5-10">5-10 years</option>
                            <option value="10-15">10-15 years</option>
                            <option value="15-20">15-20 years</option>
                            <option value="20+">20+ years</option>
                          </select>
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-center mt-2 text-gray-500">
                        <MapPin className="w-4 h-4 mr-1" />
                        <span>{profileData.location}</span>
                        <span className="mx-2">•</span>
                        <Calendar className="w-4 h-4 mr-1" />
                        <span>{profileData.yearsExperience} years experience</span>
                      </div>
                    )}
                  </div>
                  
                  {isOwner && (
                    <div className="flex space-x-2">
                      {isEditing ? (
                        <>
                          <button
                            onClick={handleSave}
                            className="px-4 py-2 bg-blue-900 text-white rounded-lg hover:bg-blue-800 flex items-center"
                          >
                            <Save className="w-4 h-4 mr-2" />
                            Save
                          </button>
                          <button
                            onClick={() => setIsEditing(false)}
                            className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center"
                          >
                            <X className="w-4 h-4 mr-2" />
                            Cancel
                          </button>
                        </>
                      ) : (
                        <div className="flex gap-2">
                          <button
                            onClick={handleSyncToDatabase}
                            className="px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 flex items-center"
                          >
                            <Save className="w-4 h-4 mr-2" />
                            Fix & Sync Profile
                          </button>
                          <button
                            onClick={() => setIsEditing(true)}
                            className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center"
                          >
                            <Edit3 className="w-4 h-4 mr-2" />
                            Edit Profile
                          </button>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Stats */}
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mt-6">
              <div className="text-center">
                <div className="text-2xl font-bold text-slate-900">{profileData.stats.totalSales}</div>
                <div className="text-sm text-gray-600">Total Sales</div>
              </div>
              <div className="text-center">
                <div className="flex items-center justify-center">
                  <span className="text-2xl font-bold text-slate-900">{profileData.stats.rating.toFixed(1)}</span>
                  <Star className="w-5 h-5 text-yellow-400 ml-1" />
                </div>
                <div className="text-sm text-gray-600">Rating</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-slate-900">{profileData.stats.resources}</div>
                <div className="text-sm text-gray-600">Resources</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-slate-900">{profileData.stats.followers}</div>
                <div className="text-sm text-gray-600">Followers</div>
              </div>
            </div>
          </div>
        </div>

        {/* Earnings Overview Cards (for owners) */}
        {isOwner && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="bg-white rounded-xl shadow-sm p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Earnings</p>
                  <p className="text-2xl font-bold text-slate-900">${stats.totalEarnings.toFixed(2)}</p>
                  <div className="flex items-center mt-1">
                    <ArrowUpRight className="w-4 h-4 text-green-500 mr-1" />
                    <span className="text-sm text-green-600">+12.5%</span>
                  </div>
                </div>
                <div className="p-3 bg-emerald-100 rounded-lg">
                  <DollarSign className="w-6 h-6 text-emerald-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">This Month</p>
                  <p className="text-2xl font-bold text-slate-900">${stats.monthlyEarnings.toFixed(2)}</p>
                  <div className="flex items-center mt-1">
                    <ArrowUpRight className="w-4 h-4 text-green-500 mr-1" />
                    <span className="text-sm text-green-600">+8.2%</span>
                  </div>
                </div>
                <div className="p-3 bg-blue-100 rounded-lg">
                  <TrendingUp className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Pending Payout</p>
                  <p className="text-2xl font-bold text-slate-900">${stats.pendingPayout.toFixed(2)}</p>
                  <div className="flex items-center mt-1">
                    <Clock className="w-4 h-4 text-yellow-500 mr-1" />
                    <span className="text-sm text-yellow-600">Next: Jan 31</span>
                  </div>
                </div>
                <div className="p-3 bg-yellow-100 rounded-lg">
                  <CreditCard className="w-6 h-6 text-yellow-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Commission Rate</p>
                  <p className="text-2xl font-bold text-slate-900">{stats.commissionRate}%</p>
                  <div className="flex items-center mt-1">
                    <span className="text-sm text-gray-600">
                      You keep 85%
                    </span>
                  </div>
                </div>
                <div className="p-3 bg-purple-100 rounded-lg">
                  <PieChart className="w-6 h-6 text-purple-600" />
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Tabs */}
        <div className="bg-white rounded-xl shadow-lg">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8 px-6">
              {[
                { id: 'profile', label: 'Profile', icon: User },
                ...(isOwner ? [
                  { id: 'earnings', label: 'Earnings', icon: DollarSign },
                  { id: 'resources', label: 'My Resources', icon: FileText },
                  { id: 'analytics', label: 'Analytics', icon: BarChart3 },
                  { id: 'payouts', label: 'Payouts', icon: CreditCard }
                ] : [])
              ].map((tab) => {
                const IconComponent = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${
                      activeTab === tab.id
                        ? 'border-emerald-500 text-emerald-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <IconComponent className="w-4 h-4 mr-2" />
                    {tab.label}
                  </button>
                );
              })}
            </nav>
          </div>

          <div className="p-6">
            {/* Profile Tab */}
            {activeTab === 'profile' && (
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Main Content */}
                <div className="lg:col-span-2 space-y-6">
                  {/* About */}
                  <div className="bg-gray-50 rounded-xl p-6">
                    <h2 className="text-xl font-bold text-slate-900 mb-4">About</h2>
                    {isEditing ? (
                      <textarea
                        value={profileData.bio}
                        onChange={(e) => setProfileData({...profileData, bio: e.target.value})}
                        rows={4}
                        className="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-900"
                      />
                    ) : (
                      <p className="text-gray-700 leading-relaxed">{profileData.bio}</p>
                    )}
                  </div>

                  {/* Recent Resources */}
                  <div className="bg-gray-50 rounded-xl p-6">
                    <h2 className="text-xl font-bold text-slate-900 mb-4">Recent Resources</h2>
                    {resources.length > 0 ? (
                      <div className="space-y-4">
                        {resources.slice(0, 3).map((resource) => (
                          <div key={resource.id} className="flex items-center p-4 bg-white border border-gray-200 rounded-lg hover:bg-gray-50">
                            <div className="w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center mr-4">
                              <Award className="w-6 h-6 text-emerald-600" />
                            </div>
                            <div className="flex-1">
                              <h3 className="font-semibold text-slate-900">{resource.title}</h3>
                              <p className="text-sm text-gray-600">
                                {resource.sports.join(', ')} • ${resource.price} • {resource.downloads} downloads
                              </p>
                            </div>
                            <div className="flex items-center">
                              <Star className="w-4 h-4 text-yellow-400 mr-1" />
                              <span className="text-sm text-gray-600">{resource.rating}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8">
                        <Award className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-600">No resources uploaded yet.</p>
                        {isOwner && (
                          <Link 
                            to="/upload"
                            className="mt-4 bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors inline-block no-underline"
                          >
                            Upload Your First Resource
                          </Link>
                        )}
                      </div>
                    )}
                  </div>
                </div>

                {/* Sidebar */}
                <div className="space-y-6">
                  {/* Specialties */}
                  <div className="bg-gray-50 rounded-xl p-6">
                    <h3 className="text-lg font-bold text-slate-900 mb-4">Specialties</h3>
                    {isEditing ? (
                      <div className="space-y-2">
                        {profileData.specialties.map((specialty, index) => (
                          <div key={index} className="flex gap-2">
                            <input
                              type="text"
                              value={specialty}
                              onChange={(e) => {
                                const newSpecialties = [...profileData.specialties];
                                newSpecialties[index] = e.target.value;
                                setProfileData({...profileData, specialties: newSpecialties});
                              }}
                              className="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-900"
                            />
                            <button
                              onClick={() => {
                                const newSpecialties = profileData.specialties.filter((_, i) => i !== index);
                                setProfileData({...profileData, specialties: newSpecialties});
                              }}
                              className="px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg"
                            >
                              <X className="w-4 h-4" />
                            </button>
                          </div>
                        ))}
                        <button
                          onClick={() => setProfileData({...profileData, specialties: [...profileData.specialties, '']})}
                          className="text-sm text-emerald-600 hover:text-emerald-700 font-medium"
                        >
                          + Add Specialty
                        </button>
                      </div>
                    ) : (
                      <div className="flex flex-wrap gap-2">
                        {profileData.specialties.map((specialty, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm font-medium"
                          >
                            {specialty}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>

                  {/* Achievements */}
                  <div className="bg-gray-50 rounded-xl p-6">
                    <h3 className="text-lg font-bold text-slate-900 mb-4">Achievements</h3>
                    {isEditing ? (
                      <div className="space-y-2">
                        {profileData.achievements.map((achievement, index) => (
                          <div key={index} className="flex gap-2">
                            <input
                              type="text"
                              value={achievement}
                              onChange={(e) => {
                                const newAchievements = [...profileData.achievements];
                                newAchievements[index] = e.target.value;
                                setProfileData({...profileData, achievements: newAchievements});
                              }}
                              className="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-900"
                            />
                            <button
                              onClick={() => {
                                const newAchievements = profileData.achievements.filter((_, i) => i !== index);
                                setProfileData({...profileData, achievements: newAchievements});
                              }}
                              className="px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg"
                            >
                              <X className="w-4 h-4" />
                            </button>
                          </div>
                        ))}
                        <button
                          onClick={() => setProfileData({...profileData, achievements: [...profileData.achievements, '']})}
                          className="text-sm text-emerald-600 hover:text-emerald-700 font-medium"
                        >
                          + Add Achievement
                        </button>
                      </div>
                    ) : (
                      <div className="space-y-3">
                        {profileData.achievements.map((achievement, index) => (
                          <div key={index} className="flex items-start">
                            <Award className="w-5 h-5 text-blue-900 mr-3 mt-0.5 flex-shrink-0" />
                            <span className="text-gray-700 text-sm">{achievement}</span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>

                  {/* Connect (for non-owners) */}
                  {!isOwner && (
                    <div className="bg-gray-50 rounded-xl p-6">
                      <h3 className="text-lg font-bold text-slate-900 mb-4">Connect</h3>
                      <div className="space-y-3">
                        <button className="w-full bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors">
                          Follow Coach
                        </button>
                        <button className="w-full border border-gray-300 hover:bg-gray-50 px-4 py-2 rounded-lg font-semibold transition-colors">
                          Send Message
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Earnings Tab */}
            {activeTab === 'earnings' && isOwner && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Recent Sales */}
                  <div>
                    <h3 className="text-lg font-semibold text-slate-900 mb-4">Recent Sales</h3>
                    <div className="space-y-3">
                      {recentSales.map((sale) => (
                        <div key={sale.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                          <div className="flex-1">
                            <p className="font-medium text-slate-900">{sale.resource}</p>
                            <p className="text-sm text-gray-600">Sold to {sale.buyer} • {sale.date}</p>
                          </div>
                          <div className="text-right">
                            <p className="font-semibold text-emerald-600">${sale.earnings}</p>
                            <p className="text-xs text-gray-500">Commission: ${sale.commission}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Commission Breakdown */}
                  <div>
                    <h3 className="text-lg font-semibold text-slate-900 mb-4">Commission Breakdown</h3>
                    <div className="bg-gray-50 rounded-lg p-6">
                      <div className="space-y-4">
                        <div className="flex justify-between items-center">
                          <span className="text-gray-600">Total Sales</span>
                          <span className="font-semibold">${totalSales.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-gray-600">Platform Commission ({stats.commissionRate}%)</span>
                          <span className="font-semibold text-red-600">-${platformCommission.toFixed(2)}</span>
                        </div>
                        <div className="border-t pt-4">
                          <div className="flex justify-between items-center">
                            <span className="font-semibold text-slate-900">Your Earnings</span>
                            <span className="font-bold text-emerald-600 text-lg">${netEarnings.toFixed(2)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Performance Chart */}
                <div>
                  <h3 className="text-lg font-semibold text-slate-900 mb-4">Monthly Performance</h3>
                  <div className="bg-gray-50 rounded-lg p-6">
                    <div className="flex items-end space-x-2 h-40">
                      {monthlyData.map((data, index) => (
                        <div key={index} className="flex-1 flex flex-col items-center">
                          <div className="w-full bg-emerald-200 rounded-t relative" style={{ height: `${(data.earnings / 600) * 100}%` }}>
                            <div className="absolute inset-0 bg-emerald-600 rounded-t" style={{ height: '60%' }}></div>
                          </div>
                          <span className="text-xs text-gray-600 mt-2">{data.month}</span>
                        </div>
                      ))}
                    </div>
                    <div className="flex items-center justify-center mt-4 space-x-6">
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-emerald-600 rounded mr-2"></div>
                        <span className="text-sm text-gray-600">Your Earnings</span>
                      </div>
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-emerald-200 rounded mr-2"></div>
                        <span className="text-sm text-gray-600">Platform Commission</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Resources Tab */}
            {activeTab === 'resources' && isOwner && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-slate-900">My Resources</h3>
                  <Link 
                    to="/upload"
                    className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg font-semibold flex items-center transition-colors"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add New Resource
                  </Link>
                </div>

                {resources.length > 0 ? (
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b border-gray-200">
                          <th className="text-left py-3 px-4 font-semibold text-gray-700">Resource</th>
                          <th className="text-left py-3 px-4 font-semibold text-gray-700">Price</th>
                          <th className="text-left py-3 px-4 font-semibold text-gray-700">Sales</th>
                          <th className="text-left py-3 px-4 font-semibold text-gray-700">Rating</th>
                          <th className="text-left py-3 px-4 font-semibold text-gray-700">Status</th>
                          <th className="text-left py-3 px-4 font-semibold text-gray-700">Earnings</th>
                          <th className="text-left py-3 px-4 font-semibold text-gray-700">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {resources.map((resource) => {
                          const resourceEarnings = (resource.price * resource.downloads) * (1 - commissionRate);
                          return (
                            <tr key={resource.id} className="border-b border-gray-100 hover:bg-gray-50">
                              <td className="py-4 px-4">
                                <div className="font-medium text-slate-900">{resource.title}</div>
                                <div className="text-sm text-gray-600">{resource.sports.join(', ')}</div>
                              </td>
                              <td className="py-4 px-4 text-slate-900">${resource.price}</td>
                              <td className="py-4 px-4 text-slate-900">{resource.downloads}</td>
                              <td className="py-4 px-4">
                                <div className="flex items-center">
                                  <Star className="w-4 h-4 text-yellow-400 mr-1" />
                                  <span className="text-slate-900">{resource.rating}</span>
                                </div>
                              </td>
                              <td className="py-4 px-4">
                                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                  resource.status === 'active' 
                                    ? 'bg-green-100 text-green-800' 
                                    : resource.status === 'pending'
                                    ? 'bg-yellow-100 text-yellow-800'
                                    : 'bg-red-100 text-red-800'
                                }`}>
                                  {resource.status}
                                </span>
                              </td>
                              <td className="py-4 px-4 text-emerald-600 font-semibold">
                                ${resourceEarnings.toFixed(2)}
                              </td>
                              <td className="py-4 px-4">
                                <div className="flex space-x-2">
                                  <button className="p-1 text-gray-600 hover:text-emerald-600">
                                    <Eye className="w-4 h-4" />
                                  </button>
                                  <button className="p-1 text-gray-600 hover:text-blue-600">
                                    <Edit className="w-4 h-4" />
                                  </button>
                                </div>
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-semibold text-slate-900 mb-2">No Resources Yet</h3>
                    <p className="text-gray-600 mb-6">Upload your first coaching resource to start earning!</p>
                    <Link 
                      to="/upload"
                      className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
                    >
                      Upload Your First Resource
                    </Link>
                  </div>
                )}
              </div>
            )}

            {/* Analytics Tab */}
            {activeTab === 'analytics' && isOwner && (
              <div className="space-y-6">
                <div className="text-center py-12">
                  <BarChart3 className="w-16 h-16 text-emerald-600 mx-auto mb-4" />
                  <h3 className="text-2xl font-bold text-slate-900 mb-4">Advanced Analytics</h3>
                  <p className="text-gray-600 mb-6">
                    Get detailed insights into your coaching business performance, audience demographics, and growth opportunities.
                  </p>
                  <a 
                    href="/analytics"
                    className="bg-emerald-600 hover:bg-emerald-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors inline-flex items-center"
                  >
                    <BarChart3 className="w-5 h-5 mr-2" />
                    View Full Analytics Dashboard
                  </a>
                </div>
                
                {/* Quick Analytics Preview */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-emerald-50 rounded-lg p-6 text-center">
                    <TrendingUp className="w-8 h-8 text-emerald-600 mx-auto mb-2" />
                    <h4 className="font-semibold text-slate-900">Performance Trends</h4>
                    <p className="text-sm text-gray-600">Track revenue, downloads, and views over time</p>
                  </div>
                  
                  <div className="bg-blue-50 rounded-lg p-6 text-center">
                    <Users className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                    <h4 className="font-semibold text-slate-900">Audience Insights</h4>
                    <p className="text-sm text-gray-600">Understand your coaching community demographics</p>
                  </div>
                  
                  <div className="bg-purple-50 rounded-lg p-6 text-center">
                    <Award className="w-8 h-8 text-purple-600 mx-auto mb-2" />
                    <h4 className="font-semibold text-slate-900">Growth Recommendations</h4>
                    <p className="text-sm text-gray-600">Get personalized tips to boost your success</p>
                  </div>
                </div>
              </div>
            )}

            {/* Payouts Tab */}
            {activeTab === 'payouts' && isOwner && (
              <div className="space-y-6">
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                  <div className="flex items-center mb-4">
                    <CreditCard className="w-6 h-6 text-blue-600 mr-3" />
                    <h3 className="text-lg font-semibold text-blue-800">Payout Information</h3>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-semibold text-blue-800 mb-2">Payout Schedule</h4>
                      <p className="text-blue-700 text-sm">Payouts are processed monthly on the last day of each month for earnings from the previous month.</p>
                    </div>
                    <div>
                      <h4 className="font-semibold text-blue-800 mb-2">Next Payout</h4>
                      <p className="text-blue-700 text-sm">January 31, 2024 - ${stats.pendingPayout.toFixed(2)}</p>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-slate-900 mb-4">Payout History</h3>
                  <div className="bg-white border border-gray-200 rounded-lg">
                    <div className="p-6 text-center">
                      <CreditCard className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                      <h4 className="text-lg font-semibold text-slate-900 mb-2">No Payouts Yet</h4>
                      <p className="text-gray-600">Your first payout will appear here after you make your first sale and the payout period ends.</p>
                    </div>
                  </div>
                </div>

                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
                  <h4 className="font-semibold text-yellow-800 mb-2">💡 Maximize Your Earnings</h4>
                  <ul className="text-yellow-700 text-sm space-y-1">
                    <li>• Upload high-quality, unique coaching resources</li>
                    <li>• Engage with the coaching community</li>
                    <li>• Keep your profile updated and professional</li>
                    <li>• Promote your resources on social media</li>
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SellerProfile;
// SEO management interface for admins
import React, { useState, useEffect } from 'react';
import { Search, Globe, CreditCard as Edit, Save, X, Plus, ExternalLink, CheckCircle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

interface SEOPage {
  path: string;
  title: string;
  description: string;
  keywords: string[];
  canonicalUrl?: string;
  robots: string;
  priority: number;
  changeFrequency: string;
  lastModified: string;
}

const SEOManager: React.FC = () => {
  const { user } = useAuth();
  const [pages, setPages] = useState<SEOPage[]>([]);
  const [loading, setLoading] = useState(false);
  const [editingPage, setEditingPage] = useState<SEOPage | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    loadSEOPages();
  }, []);

  const loadSEOPages = async () => {
    setLoading(true);
    try {
      // Mock SEO pages for demo
      const mockPages: SEOPage[] = [
        {
          path: '/',
          title: 'Coach2Coach - Digital Marketplace for Coaching Resources',
          description: 'The premier digital marketplace where coaching expertise meets opportunity. Create, sell, and discover game-changing resources for every sport and level.',
          keywords: ['coaching', 'sports', 'training', 'drills', 'playbooks'],
          robots: 'index,follow',
          priority: 1.0,
          changeFrequency: 'weekly',
          lastModified: '2024-01-15T10:00:00Z'
        },
        {
          path: '/browse',
          title: 'Browse Coaching Resources - Coach2Coach',
          description: 'Discover thousands of coaching resources from expert coaches across all sports and levels. Find drills, playbooks, training programs and more.',
          keywords: ['coaching resources', 'sports drills', 'training materials'],
          robots: 'index,follow',
          priority: 0.9,
          changeFrequency: 'daily',
          lastModified: '2024-01-14T15:30:00Z'
        },
        {
          path: '/pricing',
          title: 'Pricing - Coach2Coach Membership',
          description: 'Simple, fair pricing for unlimited access to coaching resources. Join thousands of coaches improving their game.',
          keywords: ['coaching membership', 'sports training subscription'],
          robots: 'index,follow',
          priority: 0.8,
          changeFrequency: 'monthly',
          lastModified: '2024-01-10T09:00:00Z'
        }
      ];

      setPages(mockPages);
    } catch (error) {
      console.error('Error loading SEO pages:', error);
    } finally {
      setLoading(false);
    }
  };

  const savePage = async (pageData: SEOPage) => {
    try {
      // In real implementation, call API to save
      console.log('Saving SEO page:', pageData);
      
      // Update local state
      setPages(prev => {
        const existing = prev.find(p => p.path === pageData.path);
        if (existing) {
          return prev.map(p => p.path === pageData.path ? pageData : p);
        } else {
          return [...prev, pageData];
        }
      });

      setEditingPage(null);
      setShowCreateForm(false);
    } catch (error) {
      console.error('Error saving SEO page:', error);
      alert('Failed to save SEO page');
    }
  };

  const filteredPages = pages.filter(page =>
    searchTerm === '' ||
    page.path.toLowerCase().includes(searchTerm.toLowerCase()) ||
    page.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Check if user is admin
  const isAdmin = user?.email === 'admin@coach2coachnetwork.com' || user?.email === 'zach@coach2coachnetwork.com';

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <Globe className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Access Denied</h2>
          <p className="text-gray-600">You don't have permission to access SEO management.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">SEO Management</h1>
              <p className="text-gray-600">Manage page metadata, sitemaps, and search optimization</p>
            </div>
            <div className="flex items-center space-x-4">
              <a
                href="/api/seo/sitemap.xml"
                target="_blank"
                rel="noopener noreferrer"
                className="border border-gray-300 hover:bg-gray-50 px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
              >
                <ExternalLink className="w-4 h-4 mr-2" />
                View Sitemap
              </a>
              <button
                onClick={() => setShowCreateForm(true)}
                className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold flex items-center transition-colors"
              >
                <Plus className="w-4 h-4 mr-2" />
                Add Page
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search */}
        <div className="bg-white rounded-xl shadow-sm p-4 mb-8">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Search pages..."
              className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
            />
          </div>
        </div>

        {/* Pages List */}
        <div className="bg-white rounded-xl shadow-sm">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Page</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Title</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Priority</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Status</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Last Modified</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredPages.map((page) => (
                  <tr key={page.path} className="border-b border-gray-100 hover:bg-gray-50">
                    <td className="py-4 px-6">
                      <div className="flex items-center">
                        <Globe className="w-4 h-4 text-gray-400 mr-2" />
                        <span className="font-mono text-sm text-slate-900">{page.path}</span>
                      </div>
                    </td>
                    <td className="py-4 px-6">
                      <div>
                        <p className="font-medium text-slate-900 truncate max-w-xs">{page.title}</p>
                        <p className="text-sm text-gray-600 truncate max-w-xs">{page.description}</p>
                      </div>
                    </td>
                    <td className="py-4 px-6">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        page.priority >= 0.8 ? 'bg-green-100 text-green-800' :
                        page.priority >= 0.5 ? 'bg-yellow-100 text-yellow-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {page.priority}
                      </span>
                    </td>
                    <td className="py-4 px-6">
                      <div className="flex items-center">
                        <CheckCircle className="w-4 h-4 text-green-500 mr-2" />
                        <span className="text-sm text-green-600">Indexed</span>
                      </div>
                    </td>
                    <td className="py-4 px-6 text-sm text-gray-600">
                      {new Date(page.lastModified).toLocaleDateString()}
                    </td>
                    <td className="py-4 px-6">
                      <button
                        onClick={() => setEditingPage(page)}
                        className="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                      >
                        <Edit className="w-4 h-4" />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Edit Page Modal */}
        {(editingPage || showCreateForm) && (
          <SEOPageForm
            page={editingPage}
            onSave={savePage}
            onClose={() => {
              setEditingPage(null);
              setShowCreateForm(false);
            }}
          />
        )}
      </div>
    </div>
  );
};

// SEO Page Form Component
const SEOPageForm: React.FC<{
  page?: SEOPage | null;
  onSave: (page: SEOPage) => void;
  onClose: () => void;
}> = ({ page, onSave, onClose }) => {
  const [formData, setFormData] = useState<SEOPage>(
    page || {
      path: '',
      title: '',
      description: '',
      keywords: [],
      robots: 'index,follow',
      priority: 0.5,
      changeFrequency: 'weekly',
      lastModified: new Date().toISOString()
    }
  );
  const [keywordInput, setKeywordInput] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(formData);
  };

  const addKeyword = () => {
    if (keywordInput.trim() && !formData.keywords.includes(keywordInput.trim())) {
      setFormData(prev => ({
        ...prev,
        keywords: [...prev.keywords, keywordInput.trim()]
      }));
      setKeywordInput('');
    }
  };

  const removeKeyword = (keyword: string) => {
    setFormData(prev => ({
      ...prev,
      keywords: prev.keywords.filter(k => k !== keyword)
    }));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-slate-900">
              {page ? 'Edit SEO Page' : 'Create SEO Page'}
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Page Path</label>
              <input
                type="text"
                value={formData.path}
                onChange={(e) => setFormData(prev => ({ ...prev, path: e.target.value }))}
                placeholder="/about"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Page Title</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                placeholder="About Us - Coach2Coach"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                required
              />
              <p className="text-xs text-gray-500 mt-1">Recommended: 50-60 characters</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Meta Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                placeholder="Learn about Coach2Coach, the marketplace built for coaches..."
                rows={3}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                required
              />
              <p className="text-xs text-gray-500 mt-1">Recommended: 150-160 characters</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Keywords</label>
              <div className="flex items-center space-x-2 mb-2">
                <input
                  type="text"
                  value={keywordInput}
                  onChange={(e) => setKeywordInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addKeyword())}
                  placeholder="Add keyword"
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
                <button
                  type="button"
                  onClick={addKeyword}
                  className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  Add
                </button>
              </div>
              <div className="flex flex-wrap gap-2">
                {formData.keywords.map((keyword, index) => (
                  <span
                    key={index}
                    className="inline-flex items-center px-3 py-1 bg-emerald-100 text-emerald-800 rounded-full text-sm"
                  >
                    {keyword}
                    <button
                      type="button"
                      onClick={() => removeKeyword(keyword)}
                      className="ml-2 text-emerald-600 hover:text-emerald-800"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                ))}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                <select
                  value={formData.priority}
                  onChange={(e) => setFormData(prev => ({ ...prev, priority: parseFloat(e.target.value) }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                >
                  <option value={1.0}>1.0 (Highest)</option>
                  <option value={0.9}>0.9 (High)</option>
                  <option value={0.8}>0.8 (Medium-High)</option>
                  <option value={0.5}>0.5 (Medium)</option>
                  <option value={0.3}>0.3 (Low)</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Change Frequency</label>
                <select
                  value={formData.changeFrequency}
                  onChange={(e) => setFormData(prev => ({ ...prev, changeFrequency: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                >
                  <option value="always">Always</option>
                  <option value="hourly">Hourly</option>
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="yearly">Yearly</option>
                  <option value="never">Never</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Robots</label>
              <select
                value={formData.robots}
                onChange={(e) => setFormData(prev => ({ ...prev, robots: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option value="index,follow">Index, Follow</option>
                <option value="index,nofollow">Index, No Follow</option>
                <option value="noindex,follow">No Index, Follow</option>
                <option value="noindex,nofollow">No Index, No Follow</option>
              </select>
            </div>

            <div className="flex space-x-4">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 border border-gray-300 hover:bg-gray-50 py-3 rounded-lg font-semibold transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="flex-1 bg-emerald-600 hover:bg-emerald-700 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
              >
                <Save className="w-4 h-4 mr-2" />
                Save Page
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default SEOManager;
import { useState, useEffect } from 'react';
import { ExternalLink, CheckCircle, AlertCircle } from 'lucide-react';
import { mvpApi } from '../lib/mvp-api';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';

export default function StripeOnboarding() {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [onboarded, setOnboarded] = useState(false);
  const [checking, setChecking] = useState(true);

  useEffect(() => {
    checkOnboardingStatus();
  }, [user]);

  async function checkOnboardingStatus() {
    if (!user) {
      setChecking(false);
      return;
    }

    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('stripe_onboarded, stripe_connect_id')
        .eq('user_id', user.id)
        .single();

      if (error) throw error;

      setOnboarded(data?.stripe_onboarded === true);
    } catch (err: any) {
      console.error('Error checking onboarding status:', err);
    } finally {
      setChecking(false);
    }
  }

  async function handleConnect() {
    setLoading(true);
    setError(null);

    try {
      const { url } = await mvpApi.createConnectLink();
      window.location.href = url;
    } catch (err: any) {
      setError(err.message || 'Failed to create Stripe Connect link');
      setLoading(false);
    }
  }

  if (checking) {
    return (
      <div className="bg-gray-800 rounded-lg p-6">
        <p className="text-gray-400">Checking Stripe connection...</p>
      </div>
    );
  }

  if (onboarded) {
    return (
      <div className="bg-gray-800 rounded-lg p-6">
        <div className="flex items-start gap-4">
          <CheckCircle className="w-6 h-6 text-green-400 flex-shrink-0 mt-1" />
          <div>
            <h3 className="text-xl font-semibold text-white mb-2">
              Stripe Connected
            </h3>
            <p className="text-gray-300 mb-4">
              Your Stripe account is connected and ready to receive payments.
            </p>
            <p className="text-sm text-gray-400">
              You can now create paid resources and receive payouts directly to your Stripe account.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 rounded-lg p-6">
      <div className="flex items-start gap-4">
        <AlertCircle className="w-6 h-6 text-yellow-400 flex-shrink-0 mt-1" />
        <div className="flex-1">
          <h3 className="text-xl font-semibold text-white mb-2">
            Get Paid with Stripe
          </h3>
          <p className="text-gray-300 mb-4">
            Connect your Stripe account to receive payments for your resources.
          </p>

          <ul className="text-sm text-gray-400 mb-6 space-y-2">
            <li>• Receive payments directly to your bank account</li>
            <li>• Platform fee: 15% per transaction</li>
            <li>• Fast and secure payouts</li>
            <li>• Full transaction history</li>
          </ul>

          {error && (
            <div className="bg-red-900/20 border border-red-500 rounded-lg p-4 mb-4">
              <p className="text-red-400 text-sm">{error}</p>
            </div>
          )}

          <button
            onClick={handleConnect}
            disabled={loading}
            className="bg-emerald-500 text-white px-6 py-3 rounded-lg hover:bg-emerald-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center gap-2"
          >
            {loading ? (
              'Connecting...'
            ) : (
              <>
                Connect with Stripe
                <ExternalLink className="w-4 h-4" />
              </>
            )}
          </button>

          <p className="text-xs text-gray-500 mt-4">
            You'll be redirected to Stripe to complete the onboarding process.
          </p>
        </div>
      </div>
    </div>
  );
}

import { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { CheckCircle, AlertCircle, Loader2 } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';

export default function StripeReturn() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { user } = useAuth();
  const [status, setStatus] = useState<'checking' | 'success' | 'error'>('checking');
  const [message, setMessage] = useState('Verifying your Stripe connection...');

  const isRefresh = searchParams.get('refresh') === 'true';

  useEffect(() => {
    verifyOnboarding();
  }, [user]);

  async function verifyOnboarding() {
    if (!user) {
      setStatus('error');
      setMessage('Please log in to continue');
      return;
    }

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));

      const { data, error } = await supabase
        .from('profiles')
        .select('stripe_connect_id, stripe_onboarded')
        .eq('user_id', user.id)
        .single();

      if (error) throw error;

      if (data?.stripe_connect_id) {
        if (!data.stripe_onboarded && !isRefresh) {
          await supabase
            .from('profiles')
            .update({ stripe_onboarded: true })
            .eq('user_id', user.id);
        }

        setStatus('success');
        setMessage(
          isRefresh
            ? 'Stripe connection refreshed. You can close this page.'
            : 'Your Stripe account is connected! You can now receive payments.'
        );

        setTimeout(() => {
          navigate('/account');
        }, 3000);
      } else {
        setStatus('error');
        setMessage('Stripe connection not found. Please try again.');
      }
    } catch (err: any) {
      console.error('Error verifying onboarding:', err);
      setStatus('error');
      setMessage('Failed to verify Stripe connection. Please try again.');
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center px-4">
      <div className="max-w-md w-full">
        <div className="bg-gray-800 rounded-lg shadow-xl p-8">
          {status === 'checking' && (
            <div className="text-center">
              <Loader2 className="w-16 h-16 text-emerald-400 animate-spin mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-white mb-2">
                Verifying Connection
              </h2>
              <p className="text-gray-400">{message}</p>
            </div>
          )}

          {status === 'success' && (
            <div className="text-center">
              <CheckCircle className="w-16 h-16 text-green-400 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-white mb-2">
                Success!
              </h2>
              <p className="text-gray-300 mb-6">{message}</p>
              <button
                onClick={() => navigate('/account')}
                className="bg-emerald-500 text-white px-6 py-3 rounded-lg hover:bg-emerald-600 transition-colors"
              >
                Go to Account
              </button>
            </div>
          )}

          {status === 'error' && (
            <div className="text-center">
              <AlertCircle className="w-16 h-16 text-red-400 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-white mb-2">
                Connection Issue
              </h2>
              <p className="text-gray-300 mb-6">{message}</p>
              <div className="flex gap-4 justify-center">
                <button
                  onClick={() => navigate('/account')}
                  className="bg-gray-700 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  Back to Account
                </button>
                <button
                  onClick={() => window.location.reload()}
                  className="bg-emerald-500 text-white px-6 py-3 rounded-lg hover:bg-emerald-600 transition-colors"
                >
                  Try Again
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

import React from 'react';
import { Shield, FileText, DollarSign, Users, AlertTriangle, Mail } from 'lucide-react';

const TermsOfService: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Header */}
          <div className="text-center mb-12">
            <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <FileText className="w-8 h-8 text-emerald-600" />
            </div>
            <h1 className="text-4xl font-bold text-slate-900 mb-4">Terms of Service</h1>
            <p className="text-xl text-gray-600">Coach2Coach Platform</p>
            <p className="text-sm text-gray-500 mt-2">Effective Date: August 1, 2025</p>
          </div>

          {/* Introduction */}
          <div className="mb-8 p-6 bg-emerald-50 rounded-lg border border-emerald-200">
            <p className="text-gray-700 leading-relaxed">
              Welcome to Coach2Coach, a digital marketplace for coaching resources. By using our platform, 
              you agree to the following terms:
            </p>
          </div>

          {/* Terms Sections */}
          <div className="space-y-8">
            {/* Section 1 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                  <span className="text-emerald-600 font-bold">1</span>
                </div>
                <h2 className="text-2xl font-bold text-slate-900">Acceptance of Terms</h2>
              </div>
              <p className="text-gray-700 leading-relaxed ml-11">
                By accessing or using Coach2Coach, you confirm that you are at least 18 years old and agree 
                to these Terms of Service and our Privacy Policy.
              </p>
            </section>

            {/* Section 2 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                  <Users className="w-4 h-4 text-emerald-600" />
                </div>
                <h2 className="text-2xl font-bold text-slate-900">User Accounts</h2>
              </div>
              <p className="text-gray-700 leading-relaxed ml-11">
                To access certain features (like uploading or purchasing resources), you must create an account. 
                You are responsible for maintaining the confidentiality of your login and all activity under your account.
              </p>
            </section>

            {/* Section 3 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                  <Shield className="w-4 h-4 text-emerald-600" />
                </div>
                <h2 className="text-2xl font-bold text-slate-900">Content Ownership and Responsibility</h2>
              </div>
              <div className="ml-11 space-y-3">
                <p className="text-gray-700 leading-relaxed">
                  You retain ownership of any materials you upload, but by uploading, you grant Coach2Coach 
                  a non-exclusive, worldwide license to host, market, and sell your content on our platform.
                </p>
                <p className="text-gray-700 leading-relaxed">
                  You must own or have the appropriate rights to any content you upload. You are solely 
                  responsible for your content.
                </p>
              </div>
            </section>

            {/* Section 4 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                  <DollarSign className="w-4 h-4 text-emerald-600" />
                </div>
                <h2 className="text-2xl font-bold text-slate-900">Commission and Subscription Terms</h2>
              </div>
              <div className="ml-11">
                <p className="text-gray-700 leading-relaxed mb-4">
                  Coach2Coach offers multiple seller tiers:
                </p>
                <div className="bg-gray-50 rounded-lg p-4 space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold">Free:</span>
                    <span className="text-red-600 font-semibold">50% commission paid to Coach2Coach</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="font-semibold">Premium ($9.99/month):</span>
                    <span className="text-orange-600 font-semibold">20% commission paid to Coach2Coach</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="font-semibold">Pro ($14.99/month):</span>
                    <span className="text-green-600 font-semibold">10% commission paid to Coach2Coach</span>
                  </div>
                </div>
                <p className="text-gray-700 leading-relaxed mt-4">
                  By becoming a seller, you agree to these commission structures. All fees are non-refundable.
                </p>
              </div>
            </section>

            {/* Section 5 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                  <span className="text-emerald-600 font-bold">5</span>
                </div>
                <h2 className="text-2xl font-bold text-slate-900">License to Buyers</h2>
              </div>
              <p className="text-gray-700 leading-relaxed ml-11">
                Buyers receive a limited, non-transferable license to use purchased resources for personal, 
                team, or school use only. Resale or redistribution is strictly prohibited.
              </p>
            </section>

            {/* Section 6 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center mr-3">
                  <AlertTriangle className="w-4 h-4 text-red-600" />
                </div>
                <h2 className="text-2xl font-bold text-slate-900">Prohibited Conduct</h2>
              </div>
              <div className="ml-11">
                <p className="text-gray-700 leading-relaxed mb-3">You agree not to:</p>
                <ul className="space-y-2 text-gray-700">
                  <li className="flex items-start">
                    <span className="w-2 h-2 bg-red-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                    Upload plagiarized, copied, or unauthorized content
                  </li>
                  <li className="flex items-start">
                    <span className="w-2 h-2 bg-red-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                    Violate copyright or trademark laws
                  </li>
                  <li className="flex items-start">
                    <span className="w-2 h-2 bg-red-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                    Share or sell someone else's intellectual property
                  </li>
                  <li className="flex items-start">
                    <span className="w-2 h-2 bg-red-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                    Attempt to reverse-engineer or misuse the platform
                  </li>
                </ul>
              </div>
            </section>

            {/* Section 7 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                  <span className="text-emerald-600 font-bold">7</span>
                </div>
                <h2 className="text-2xl font-bold text-slate-900">Copyright Policy and DMCA</h2>
              </div>
              <p className="text-gray-700 leading-relaxed ml-11">
                Coach2Coach complies with the DMCA. See our Copyright Policy and DMCA Takedown Policy for details.
              </p>
            </section>

            {/* Section 8 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                  <span className="text-emerald-600 font-bold">8</span>
                </div>
                <h2 className="text-2xl font-bold text-slate-900">Termination</h2>
              </div>
              <p className="text-gray-700 leading-relaxed ml-11">
                We reserve the right to suspend or terminate accounts at our discretion, especially in the 
                case of repeat copyright violations or abuse of the platform.
              </p>
            </section>

            {/* Section 9 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center mr-3">
                  <AlertTriangle className="w-4 h-4 text-yellow-600" />
                </div>
                <h2 className="text-2xl font-bold text-slate-900">Limitation of Liability</h2>
              </div>
              <p className="text-gray-700 leading-relaxed ml-11">
                Coach2Coach is not liable for damages or losses related to the use or misuse of user-uploaded 
                content. Use the platform at your own risk.
              </p>
            </section>

            {/* Section 10 */}
            <section>
              <div className="flex items-center mb-4">
                <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
                  <Mail className="w-4 h-4 text-emerald-600" />
                </div>
                <h2 className="text-2xl font-bold text-slate-900">Contact</h2>
              </div>
              <p className="text-gray-700 leading-relaxed ml-11">
                For questions or legal notices, email: 
                <a href="mailto:zach@coach2coachnetwork.com" className="text-emerald-600 hover:text-emerald-700 ml-1">
                  zach@coach2coachnetwork.com
                </a>
              </p>
            </section>
          </div>

          {/* Footer */}
          <div className="mt-12 pt-8 border-t border-gray-200 text-center">
            <p className="text-sm text-gray-500">
              Last updated: August 1, 2025
            </p>
            <p className="text-sm text-gray-500 mt-2">
              Questions about these terms? <a href="mailto:zach@coach2coachnetwork.com" className="text-emerald-600 hover:text-emerald-700">Contact us</a>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TermsOfService;
// Trending resources section for homepage
import React, { useState, useEffect } from 'react';
import { TrendingUp, Star, Download, Eye, Calendar, Award } from 'lucide-react';
import { TrendingResult } from '../lib/search/types';

interface TrendingSectionProps {
  limit?: number;
  onResourceClick?: (resourceId: string) => void;
  className?: string;
}

const TrendingSection: React.FC<TrendingSectionProps> = ({
  limit = 12,
  onResourceClick,
  className = ""
}) => {
  const [trending, setTrending] = useState<TrendingResult[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    loadTrending();
  }, [limit]);

  const loadTrending = async () => {
    try {
      setLoading(true);
      setError('');

      const response = await fetch(`/api/search/trending?limit=${limit}`);
      const data = await response.json();

      if (data.success) {
        setTrending(data.trending || []);
      } else {
        throw new Error(data.error || 'Failed to load trending');
      }
    } catch (err) {
      console.error('Error loading trending:', err);
      setError('Failed to load trending resources');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className={`bg-white rounded-xl shadow-sm border border-gray-200 p-6 ${className}`}>
        <div className="flex items-center mb-6">
          <TrendingUp className="w-6 h-6 text-orange-500 mr-3" />
          <h3 className="text-xl font-bold text-slate-900">Trending Now</h3>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {Array.from({ length: 6 }).map((_, index) => (
            <div key={index} className="animate-pulse">
              <div className="bg-gray-200 rounded-lg h-32 mb-3"></div>
              <div className="h-4 bg-gray-200 rounded mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-2/3"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (error || trending.length === 0) {
    return null; // Don't show empty trending section
  }

  return (
    <section className={`py-16 bg-white ${className}`}>
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-center mb-12">
          <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mr-4">
            <TrendingUp className="w-6 h-6 text-orange-500" />
          </div>
          <div className="text-center">
            <h2 className="text-3xl font-bold text-slate-900">Trending Resources</h2>
            <p className="text-gray-600">Most popular coaching resources right now</p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {trending.map((item, index) => (
            <div 
              key={item.id}
              className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] cursor-pointer"
              onClick={() => onResourceClick?.(item.id)}
            >
              <div className="p-6">
                {/* Trending Badge */}
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center px-2 py-1 bg-orange-100 text-orange-800 rounded-full text-xs font-semibold">
                    <TrendingUp className="w-3 h-3 mr-1" />
                    #{item.rank_position}
                  </div>
                  <span className="text-lg font-bold text-emerald-600">
                    ${(item.price_cents / 100).toFixed(2)}
                  </span>
                </div>

                <h3 className="text-lg font-bold text-slate-900 mb-2 line-clamp-2">
                  {item.title}
                </h3>

                <div className="flex items-center space-x-4 mb-4 text-sm text-gray-600">
                  <div className="flex items-center">
                    <Award className="w-4 h-4 text-emerald-500 mr-1" />
                    <span>{item.sport}</span>
                  </div>
                </div>

                <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                  <div className="flex items-center">
                    <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center mr-2">
                      <span className="text-xs font-semibold text-gray-600">
                        {item.coach_name?.split(' ').map(n => n[0]).join('') || 'C'}
                      </span>
                    </div>
                    <span className="text-sm text-gray-600">{item.coach_name}</span>
                  </div>
                  
                  <div className="text-xs text-orange-600 font-medium">
                    Score: {item.trending_score.toFixed(1)}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* View All Button */}
        <div className="text-center mt-8">
          <button 
            onClick={() => window.location.href = '/browse?sort=trending'}
            className="bg-orange-600 hover:bg-orange-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors inline-flex items-center"
          >
            <TrendingUp className="w-5 h-5 mr-2" />
            View All Trending Resources
          </button>
        </div>
      </div>
    </section>
  );
};

export default TrendingSection;
import { Users, FileText, ShieldCheck, Download } from 'lucide-react';

export default function TrustBar() {
  const stats = [
    { icon: Users, label: '20+ Creators', ariaLabel: '20 plus creators on platform' },
    { icon: FileText, label: 'Hundreds of drills', ariaLabel: 'Hundreds of drill resources available' },
    { icon: ShieldCheck, label: 'Secure checkout', ariaLabel: 'Secure payment checkout' },
    { icon: Download, label: 'Instant downloads', ariaLabel: 'Instant file downloads' },
  ];

  return (
    <div className="bg-gray-50 border-y border-gray-200 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
          {stats.map((stat, index) => (
            <div
              key={index}
              className="flex flex-col items-center text-center"
              aria-label={stat.ariaLabel}
            >
              <stat.icon className="w-8 h-8 text-emerald-600 mb-2" aria-hidden="true" />
              <span className="text-sm font-medium text-gray-900">{stat.label}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

import React, { useState, useEffect } from 'react';
import { Upload, FileText, Image, Video, X, Plus, ArrowLeft, ArrowRight, DollarSign, Tag, Users, Target, AlertCircle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { useMembership } from '../hooks/useMembership';
import { supabase } from '../lib/supabase';
import { useNavigate } from 'react-router-dom';
import { canUploadOrSell, needsUpgrade } from '../lib/membership';
import FileUploadZone from './FileUploadZone';
import { FILE_VALIDATIONS, UploadResult } from '../lib/fileUpload';
import MembershipGate from './MembershipGate';

const UploadResource: React.FC = () => {
  const { user } = useAuth();
  const { membership, loading: membershipLoading } = useMembership();
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [uploadedFiles, setUploadedFiles] = useState<UploadResult[]>([]);
  const [uploadedImages, setUploadedImages] = useState<UploadResult[]>([]);

  const [formData, setFormData] = useState({
    title: '',
    description: '',
    price: '',
    category: '',
    sports: [] as string[],
    levels: [] as string[],
    tags: [] as string[],
    requirements: '',
    whatYouGet: [''],
    targetAudience: ''
  });

  const totalSteps = 4;

  const categories = [
    'Practice Plans', 'Drill Collections', 'Playbooks', 'Training Programs',
    'Strategy Guides', 'Skill Development', 'Conditioning Plans', 'Game Analysis',
    'Player Development', 'Team Building', 'Mental Training', 'Recruiting Guides'
  ];

  const sportsOptions = [
    'Basketball', 'Football', 'Baseball', 'Soccer', 'Volleyball', 
    'Tennis', 'Track & Field', 'Swimming', 'Wrestling', 'Golf',
    'Softball', 'Cross Country', 'Lacrosse', 'Hockey'
  ];

  const levelOptions = [
    'Youth (Ages 6-12)', 'Middle School', 'High School', 
    'Travel/Club', 'Collegiate', 'Professional', 'Adult Recreation'
  ];

  const [profile, setProfile] = useState<any>(null);
  const [profileLoading, setProfileLoading] = useState(true);

  useEffect(() => {
    async function loadProfile() {
      if (!user) {
        setProfileLoading(false);
        return;
      }
      try {
        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('user_id', user.id)
          .single();

        if (!error && data) {
          setProfile(data);
        }
      } catch (err) {
        console.error('Error loading profile:', err);
      } finally {
        setProfileLoading(false);
      }
    }
    loadProfile();
  }, [user]);

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Please Sign In</h2>
          <p className="text-gray-600">You need to be signed in to upload resources.</p>
        </div>
      </div>
    );
  }

  if (membershipLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <div className="animate-pulse">
            <div className="h-4 bg-gray-200 rounded w-1/2 mb-2 mx-auto"></div>
            <div className="h-3 bg-gray-200 rounded w-3/4 mx-auto"></div>
          </div>
        </div>
      </div>
    );
  }

  // Membership gating
  if (!membership || needsUpgrade(membership, 'upload')) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-2xl mx-auto px-4">
          <MembershipGate 
            membership={membership || { membershipStatus: 'none', isCreatorEnabled: false }}
            action="upload"
          >
            {/* This won't render due to gate */}
            <div></div>
          </MembershipGate>
        </div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Complete Your Profile First</h2>
          <p className="text-gray-600 mb-6">Complete your coach profile to start uploading and selling resources.</p>
          <button 
            onClick={() => navigate('/complete-profile')}
            className="bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
          >
            Complete Profile
          </button>
        </div>
      </div>
    );
  }

  const handleArrayToggle = (array: string[], value: string, field: keyof typeof formData) => {
    const newArray = array.includes(value) 
      ? array.filter(item => item !== value)
      : [...array, value];
    setFormData({ ...formData, [field]: newArray });
  };

  const handleResourceFilesUploaded = (results: UploadResult[]) => {
    const successfulUploads = results.filter(r => r.success);
    setUploadedFiles(prev => [...prev, ...successfulUploads]);
  };

  const handlePreviewImagesUploaded = (results: UploadResult[]) => {
    const successfulUploads = results.filter(r => r.success);
    setUploadedImages(prev => [...prev, ...successfulUploads]);
  };

  const removeUploadedFile = (index: number, type: 'files' | 'images') => {
    if (type === 'files') {
      setUploadedFiles(prev => prev.filter((_, i) => i !== index));
    } else {
      setUploadedImages(prev => prev.filter((_, i) => i !== index));
    }
  };

  const addWhatYouGet = () => {
    setFormData(prev => ({
      ...prev,
      whatYouGet: [...prev.whatYouGet, '']
    }));
  };

  const updateWhatYouGet = (index: number, value: string) => {
    const newItems = [...formData.whatYouGet];
    newItems[index] = value;
    setFormData({ ...formData, whatYouGet: newItems });
  };

  const removeWhatYouGet = (index: number) => {
    const newItems = formData.whatYouGet.filter((_, i) => i !== index);
    setFormData({ ...formData, whatYouGet: newItems });
  };

  const handleTagInput = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' || e.key === ',') {
      e.preventDefault();
      const value = e.currentTarget.value.trim();
      if (value && !formData.tags.includes(value)) {
        setFormData(prev => ({
          ...prev,
          tags: [...prev.tags, value]
        }));
        e.currentTarget.value = '';
      }
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const nextStep = () => {
    if (currentStep < totalSteps) setCurrentStep(currentStep + 1);
  };

  const prevStep = () => {
    if (currentStep > 1) setCurrentStep(currentStep - 1);
  };

  const handleSubmit = async () => {
    // Validation
    if (!formData.title.trim()) {
      setError('Please enter a resource title');
      return;
    }

    if (!formData.description.trim()) {
      setError('Please enter a resource description');
      return;
    }

    const price = parseFloat(formData.price || '0');
    if (price < 0) {
      setError('Please enter a valid price');
      return;
    }

    if (!formData.category) {
      setError('Please select a category');
      return;
    }

    if (formData.sports.length === 0) {
      setError('Please select at least one sport');
      return;
    }

    if (formData.levels.length === 0) {
      setError('Please select at least one coaching level');
      return;
    }

    if (uploadedFiles.length === 0) {
      setError('Please upload at least one resource file');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const priceCents = Math.round(price * 100);
      const isFree = priceCents === 0;

      const mainFile = uploadedFiles[0];

      // Insert directly into Supabase
      const { data, error: insertError } = await supabase
        .from('resources')
        .insert([{
          owner_id: user.id,
          title: formData.title.trim(),
          description: formData.description.trim(),
          price: priceCents / 100,
          is_free: isFree,
          sports: formData.sports,
          levels: formData.levels,
          category: formData.category,
          tags: formData.tags,
          file_url: mainFile.filePath || mainFile.url,
          file_mime: 'application/pdf',
          file_size: 0,
          preview_images: uploadedImages.map(img => img.url).filter(Boolean),
          status: 'active',
          is_listed: true,
          moderation_status: 'pending',
          processing_status: 'completed',
          is_preview_ready: false,
          downloads: 0,
          purchase_count: 0,
          view_count: 0,
          preview_count: 0,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          uploaded_at: new Date().toISOString()
        }])
        .select()
        .maybeSingle();

      if (insertError) {
        throw new Error(insertError.message);
      }

      alert('Resource uploaded successfully!');
      navigate('/browse');
    } catch (error: any) {
      console.error('Upload error:', error);
      setError(error.message || 'Failed to upload resource. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-3xl font-bold text-slate-900">Upload New Resource</h1>
            <span className="text-sm text-gray-600">Step {currentStep} of {totalSteps}</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-emerald-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(currentStep / totalSteps) * 100}%` }}
            ></div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Error Message */}
          {error && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-700">{error}</p>
            </div>
          )}

          {/* Step 1: Basic Information */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <FileText className="w-16 h-16 text-emerald-600 mx-auto mb-4" />
                <h2 className="text-2xl font-bold text-slate-900 mb-2">Basic Information</h2>
                <p className="text-gray-600">Tell coaches about your resource</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Resource Title *</label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => setFormData({...formData, title: e.target.value})}
                  placeholder="e.g., Advanced Ball Handling Drills for Guards"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description *</label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  placeholder="Describe what coaches will get, how it helps their team, and what makes it unique..."
                  rows={5}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  required
                />
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                  <select
                    value={formData.category}
                    onChange={(e) => setFormData({...formData, category: e.target.value})}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    required
                  >
                    <option value="">Select a category</option>
                    {categories.map(category => (
                      <option key={category} value={category}>{category}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Price *</label>
                  <div className="relative">
                    <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={formData.price}
                      onChange={(e) => setFormData({...formData, price: e.target.value})}
                      placeholder="9.99"
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                      required
                    />
                  </div>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Tags</label>
                <input
                  type="text"
                  onKeyDown={handleTagInput}
                  placeholder="Add tags (press Enter or comma to add)"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
                <div className="flex flex-wrap gap-2 mt-2">
                  {formData.tags.map((tag, index) => (
                    <span key={index} className="inline-flex items-center px-3 py-1 bg-emerald-100 text-emerald-800 rounded-full text-sm">
                      <Tag className="w-3 h-3 mr-1" />
                      {tag}
                      <button
                        onClick={() => removeTag(tag)}
                        className="ml-2 text-emerald-600 hover:text-emerald-800"
                      >
                        <X className="w-3 h-3" />
                      </button>
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Step 2: Sports & Levels */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <Target className="w-16 h-16 text-emerald-600 mx-auto mb-4" />
                <h2 className="text-2xl font-bold text-slate-900 mb-2">Target Audience</h2>
                <p className="text-gray-600">Who is this resource designed for?</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Sports *</label>
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                  {sportsOptions.map((sport) => (
                    <label key={sport} className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.sports.includes(sport)}
                        onChange={() => handleArrayToggle(formData.sports, sport, 'sports')}
                        className="sr-only"
                      />
                      <div className={`px-3 py-2 rounded-lg border text-sm font-medium transition-colors ${
                        formData.sports.includes(sport)
                          ? 'bg-emerald-100 border-emerald-500 text-emerald-800'
                          : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}>
                        {sport}
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Levels *</label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {levelOptions.map((level) => (
                    <label key={level} className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={formData.levels.includes(level)}
                        onChange={() => handleArrayToggle(formData.levels, level, 'levels')}
                        className="sr-only"
                      />
                      <div className={`px-3 py-2 rounded-lg border text-sm font-medium transition-colors ${
                        formData.levels.includes(level)
                          ? 'bg-emerald-100 border-emerald-500 text-emerald-800'
                          : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}>
                        {level}
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Target Audience Description</label>
                <textarea
                  value={formData.targetAudience}
                  onChange={(e) => setFormData({...formData, targetAudience: e.target.value})}
                  placeholder="e.g., Perfect for high school basketball coaches looking to improve their team's ball handling skills..."
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
              </div>
            </div>
          )}

          {/* Step 3: File Upload */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <Upload className="w-16 h-16 text-emerald-600 mx-auto mb-4" />
                <h2 className="text-2xl font-bold text-slate-900 mb-2">Upload Files</h2>
                <p className="text-gray-600">Add your resource files and preview images</p>
              </div>

              {/* Main Files */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Resource Files *</label>
                <FileUploadZone
                  onFilesUploaded={handleResourceFilesUploaded}
                  bucket="resources"
                  userId={user.id}
                  validation={FILE_VALIDATIONS.resources}
                  title="Upload Resource Files"
                  description="Upload your coaching materials (PDFs, documents, presentations)"
                />
                
                {/* Show uploaded files */}
                {uploadedFiles.length > 0 && (
                  <div className="mt-4">
                    <h4 className="font-medium text-gray-700 mb-2">Uploaded Files ({uploadedFiles.length})</h4>
                    <div className="space-y-2">
                      {uploadedFiles.map((file, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg">
                          <div className="flex items-center">
                            <FileText className="w-5 h-5 text-green-600 mr-3" />
                            <span className="text-sm font-medium text-green-800">{file.fileName || 'Uploaded file'}</span>
                          </div>
                          <button
                            onClick={() => removeUploadedFile(index, 'files')}
                            className="text-red-500 hover:text-red-700"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Preview Images */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">Preview Images (Optional)</label>
                <FileUploadZone
                  onFilesUploaded={handlePreviewImagesUploaded}
                  bucket="images"
                  userId={user.id}
                  validation={FILE_VALIDATIONS.images}
                  title="Upload Preview Images"
                  description="Add images to showcase your resource (optional)"
                />
                
                {/* Show uploaded images */}
                {uploadedImages.length > 0 && (
                  <div className="mt-4">
                    <h4 className="font-medium text-gray-700 mb-2">Uploaded Images ({uploadedImages.length})</h4>
                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                      {uploadedImages.map((image, index) => (
                        <div key={index} className="relative">
                          <img
                            src={image.url}
                            alt={`Preview ${index + 1}`}
                            className="w-full h-24 object-cover rounded-lg border border-green-200"
                          />
                          <button
                            onClick={() => removeUploadedFile(index, 'images')}
                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                          >
                            <X className="w-3 h-3" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Step 4: Additional Details */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <Users className="w-16 h-16 text-emerald-600 mx-auto mb-4" />
                <h2 className="text-2xl font-bold text-slate-900 mb-2">Final Details</h2>
                <p className="text-gray-600">Help coaches understand what they'll receive</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">What You Get</label>
                <div className="space-y-3">
                  {formData.whatYouGet.map((item, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <input
                        type="text"
                        value={item}
                        onChange={(e) => updateWhatYouGet(index, e.target.value)}
                        placeholder="e.g., 25 detailed drill diagrams with instructions"
                        className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                      />
                      {formData.whatYouGet.length > 1 && (
                        <button
                          onClick={() => removeWhatYouGet(index)}
                          className="p-2 text-red-500 hover:bg-red-50 rounded-lg"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  ))}
                  <button
                    onClick={addWhatYouGet}
                    className="flex items-center text-emerald-600 hover:text-emerald-700"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Add Item
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Requirements (Optional)</label>
                <textarea
                  value={formData.requirements}
                  onChange={(e) => setFormData({...formData, requirements: e.target.value})}
                  placeholder="e.g., Basic understanding of basketball fundamentals, access to a gym with hoops..."
                  rows={3}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                />
              </div>

              {/* Summary */}
              <div className="bg-gray-50 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-slate-900 mb-4">Resource Summary</h3>
                <div className="space-y-2 text-sm">
                  <div><strong>Title:</strong> {formData.title || 'Not set'}</div>
                  <div><strong>Category:</strong> {formData.category || 'Not set'}</div>
                  <div><strong>Price:</strong> ${formData.price || '0.00'}</div>
                  <div><strong>Sports:</strong> {formData.sports.join(', ') || 'None selected'}</div>
                  <div><strong>Levels:</strong> {formData.levels.join(', ') || 'None selected'}</div>
                  <div><strong>Files:</strong> {uploadedFiles.length} file(s)</div>
                  <div><strong>Images:</strong> {uploadedImages.length} image(s)</div>
                </div>
              </div>
            </div>
          )}

          {/* Navigation Buttons */}
          <div className="flex justify-between pt-8 border-t border-gray-200">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`flex items-center px-6 py-3 rounded-lg font-semibold transition-colors ${
                currentStep === 1
                  ? 'text-gray-400 cursor-not-allowed'
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Previous
            </button>

            {currentStep < totalSteps ? (
              <button
                onClick={nextStep}
                className="flex items-center px-6 py-3 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg font-semibold transition-colors"
              >
                Next
                <ArrowRight className="w-4 h-4 ml-2" />
              </button>
            ) : (
              <button
                onClick={handleSubmit}
                disabled={loading}
                className="flex items-center px-6 py-3 bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 text-white rounded-lg font-semibold transition-colors"
              >
                {loading ? 'Uploading...' : 'Upload Resource'}
                <Upload className="w-4 h-4 ml-2" />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default UploadResource;
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import { supabaseClient } from '../lib/supabaseClient';

export default function UserProfilePage() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [formData, setFormData] = useState({
    first_name: '',
    last_name: '',
    email: '',
    bio: '',
    location: '',
    profilePicture: null
  });
  const [previewUrl, setPreviewUrl] = useState('');

  useEffect(() => {
    loadProfile();
  }, []);

  const loadProfile = async () => {
    try {
      const { data: { user: authUser }, error: authError } = await supabaseClient.auth.getUser();

      if (authError || !authUser) {
        navigate('/login');
        return;
      }

      setUser(authUser);

      const { data: profileData, error: profileError } = await supabaseClient
        .from('profiles')
        .select('*')
        .eq('user_id', authUser.id)
        .maybeSingle();

      if (profileError) {
        console.error('Profile load error:', profileError);
        toast.error('Failed to load profile');
        return;
      }

      if (profileData) {
        setProfile(profileData);
        setFormData({
          first_name: profileData.first_name || '',
          last_name: profileData.last_name || '',
          email: profileData.email || authUser.email || '',
          bio: profileData.bio || '',
          location: profileData.location || '',
          profilePicture: null
        });
        if (profileData.avatar_url) {
          setPreviewUrl(profileData.avatar_url);
        }
      }
    } catch (error) {
      console.error('Load profile error:', error);
      toast.error('An error occurred loading your profile');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        toast.error('File is too large (max 5MB)');
        return;
      }
      if (!['image/jpeg', 'image/png', 'image/gif', 'image/webp'].includes(file.type)) {
        toast.error('Only image files are allowed');
        return;
      }
      setFormData(prev => ({ ...prev, profilePicture: file }));
      setPreviewUrl(URL.createObjectURL(file));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);

    try {
      let avatarUrl = profile?.avatar_url || '';

      if (formData.profilePicture) {
        const fileExt = formData.profilePicture.name.split('.').pop();
        const fileName = `${user.id}/${Date.now()}.${fileExt}`;

        if (profile?.avatar_url) {
          const oldPath = profile.avatar_url.split('/').slice(-2).join('/');
          await supabaseClient.storage.from('avatars').remove([oldPath]);
        }

        const { error: uploadError } = await supabaseClient.storage
          .from('avatars')
          .upload(fileName, formData.profilePicture, {
            cacheControl: '3600',
            upsert: false
          });

        if (uploadError) {
          console.error('Upload error:', uploadError);
          toast.error('Failed to upload profile picture');
          setSaving(false);
          return;
        }

        const { data: { publicUrl } } = supabaseClient.storage
          .from('avatars')
          .getPublicUrl(fileName);

        avatarUrl = publicUrl;
      }

      const updateData = {
        first_name: formData.first_name,
        last_name: formData.last_name,
        bio: formData.bio,
        location: formData.location,
        avatar_url: avatarUrl,
        updated_at: new Date().toISOString()
      };

      const { error: updateError } = await supabaseClient
        .from('profiles')
        .update(updateData)
        .eq('user_id', user.id);

      if (updateError) {
        console.error('Update error:', updateError);
        toast.error('Failed to update profile');
        setSaving(false);
        return;
      }

      toast.success('Profile updated successfully!');
      await loadProfile();

    } catch (error) {
      console.error('Save error:', error);
      toast.error('An unexpected error occurred');
    } finally {
      setSaving(false);
    }
  };

  const handleLogout = async () => {
    await supabaseClient.auth.signOut();
    toast.success('Logged out successfully');
    navigate('/');
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading profile...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg p-8">
          <div className="flex justify-between items-center mb-8">
            <h2 className="text-3xl font-bold text-gray-900">My Profile</h2>
            <button
              onClick={handleLogout}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition"
            >
              Logout
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {previewUrl && (
              <div className="flex justify-center mb-6">
                <img
                  src={previewUrl}
                  alt="Profile preview"
                  className="w-32 h-32 rounded-full object-cover border-4 border-blue-100"
                />
              </div>
            )}

            <div>
              <label htmlFor="profilePicture" className="block text-sm font-medium text-gray-700">
                Profile Picture
              </label>
              <input
                id="profilePicture"
                name="profilePicture"
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              />
              <p className="mt-1 text-xs text-gray-500">Max 5MB, image files only</p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label htmlFor="first_name" className="block text-sm font-medium text-gray-700">
                  First Name
                </label>
                <input
                  id="first_name"
                  name="first_name"
                  type="text"
                  required
                  value={formData.first_name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <label htmlFor="last_name" className="block text-sm font-medium text-gray-700">
                  Last Name
                </label>
                <input
                  id="last_name"
                  name="last_name"
                  type="text"
                  required
                  value={formData.last_name}
                  onChange={handleInputChange}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email (read-only)
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                readOnly
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-50 text-gray-500 cursor-not-allowed"
              />
            </div>

            <div>
              <label htmlFor="bio" className="block text-sm font-medium text-gray-700">
                Bio
              </label>
              <textarea
                id="bio"
                name="bio"
                rows="4"
                maxLength="500"
                value={formData.bio}
                onChange={handleInputChange}
                placeholder="Tell us about yourself"
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
              <p className="mt-1 text-xs text-gray-500">
                {formData.bio.length}/500 characters
              </p>
            </div>

            <div>
              <label htmlFor="location" className="block text-sm font-medium text-gray-700">
                Location
              </label>
              <input
                id="location"
                name="location"
                type="text"
                value={formData.location}
                onChange={handleInputChange}
                placeholder="City, Country"
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <button
              type="submit"
              disabled={saving}
              className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                saving
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
              }`}
            >
              {saving ? 'Saving...' : 'Update Profile'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import toast from 'react-hot-toast';
import { supabaseClient } from '../lib/supabaseClient';

const validationSchema = Yup.object({
  firstName: Yup.string()
    .required('First name is required')
    .max(50, 'First name must be 50 characters or less'),
  lastName: Yup.string()
    .required('Last name is required')
    .max(50, 'Last name must be 50 characters or less'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .required('Password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('password'), null], 'Passwords must match')
    .required('Please confirm your password'),
  bio: Yup.string().max(500, 'Bio must be 500 characters or less'),
  age: Yup.number()
    .min(18, 'Must be at least 18 years old')
    .max(100, 'Age must be less than 100')
    .nullable(),
  location: Yup.string().max(100, 'Location must be 100 characters or less'),
  profilePicture: Yup.mixed()
    .test('fileSize', 'File is too large (max 5MB)', (value) => {
      if (!value) return true;
      return value.size <= 5 * 1024 * 1024;
    })
    .test('fileType', 'Only image files are allowed', (value) => {
      if (!value) return true;
      return ['image/jpeg', 'image/png', 'image/gif', 'image/webp'].includes(value.type);
    })
});

export default function UserSignupForm() {
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const formik = useFormik({
    initialValues: {
      firstName: '',
      lastName: '',
      email: '',
      password: '',
      confirmPassword: '',
      bio: '',
      age: '',
      location: '',
      profilePicture: null
    },
    validationSchema,
    onSubmit: async (values) => {
      setIsSubmitting(true);

      try {
        const { data: authData, error: signUpError } = await supabaseClient.auth.signUp({
          email: values.email,
          password: values.password,
          options: {
            data: {
              first_name: values.firstName,
              last_name: values.lastName
            }
          }
        });

        if (signUpError) {
          if (signUpError.message.includes('already registered')) {
            toast.error('This email is already registered. Please sign in instead.');
          } else {
            toast.error(signUpError.message);
          }
          setIsSubmitting(false);
          return;
        }

        const user = authData.user;

        if (!user) {
          toast.error('Failed to create account. Please try again.');
          setIsSubmitting(false);
          return;
        }

        toast.success('Account created! Check your email to verify and log in.');
        navigate('/confirm-email');

      } catch (error) {
        console.error('Signup error:', error);
        toast.error('An unexpected error occurred. Please try again.');
      } finally {
        setIsSubmitting(false);
      }
    }
  });

  const handleFileChange = (event) => {
    const file = event.currentTarget.files[0];
    formik.setFieldValue('profilePicture', file || null);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-900">Create Account</h2>
          <p className="mt-2 text-sm text-gray-600">
            Join us and build your profile
          </p>
        </div>

        <form onSubmit={formik.handleSubmit} className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">
                First Name *
              </label>
              <input
                id="firstName"
                name="firstName"
                type="text"
                aria-label="First name"
                aria-required="true"
                className={`mt-1 block w-full px-3 py-2 border ${
                  formik.touched.firstName && formik.errors.firstName
                    ? 'border-red-500'
                    : 'border-gray-300'
                } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
                {...formik.getFieldProps('firstName')}
              />
              {formik.touched.firstName && formik.errors.firstName && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.firstName}</p>
              )}
            </div>

            <div>
              <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">
                Last Name *
              </label>
              <input
                id="lastName"
                name="lastName"
                type="text"
                aria-label="Last name"
                aria-required="true"
                className={`mt-1 block w-full px-3 py-2 border ${
                  formik.touched.lastName && formik.errors.lastName
                    ? 'border-red-500'
                    : 'border-gray-300'
                } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
                {...formik.getFieldProps('lastName')}
              />
              {formik.touched.lastName && formik.errors.lastName && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.lastName}</p>
              )}
            </div>
          </div>

          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email *
            </label>
            <input
              id="email"
              name="email"
              type="email"
              aria-label="Email address"
              aria-required="true"
              className={`mt-1 block w-full px-3 py-2 border ${
                formik.touched.email && formik.errors.email ? 'border-red-500' : 'border-gray-300'
              } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
              {...formik.getFieldProps('email')}
            />
            {formik.touched.email && formik.errors.email && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.email}</p>
            )}
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Password *
            </label>
            <input
              id="password"
              name="password"
              type="password"
              aria-label="Password"
              aria-required="true"
              className={`mt-1 block w-full px-3 py-2 border ${
                formik.touched.password && formik.errors.password
                  ? 'border-red-500'
                  : 'border-gray-300'
              } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
              {...formik.getFieldProps('password')}
            />
            {formik.touched.password && formik.errors.password && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.password}</p>
            )}
          </div>

          <div>
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
              Confirm Password *
            </label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              aria-label="Confirm password"
              aria-required="true"
              className={`mt-1 block w-full px-3 py-2 border ${
                formik.touched.confirmPassword && formik.errors.confirmPassword
                  ? 'border-red-500'
                  : 'border-gray-300'
              } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
              {...formik.getFieldProps('confirmPassword')}
            />
            {formik.touched.confirmPassword && formik.errors.confirmPassword && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.confirmPassword}</p>
            )}
          </div>

          <div>
            <label htmlFor="bio" className="block text-sm font-medium text-gray-700">
              Bio
            </label>
            <textarea
              id="bio"
              name="bio"
              rows="3"
              aria-label="Bio"
              placeholder="Tell us about yourself (optional)"
              className={`mt-1 block w-full px-3 py-2 border ${
                formik.touched.bio && formik.errors.bio ? 'border-red-500' : 'border-gray-300'
              } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
              {...formik.getFieldProps('bio')}
            />
            {formik.touched.bio && formik.errors.bio && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.bio}</p>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label htmlFor="age" className="block text-sm font-medium text-gray-700">
                Age
              </label>
              <input
                id="age"
                name="age"
                type="number"
                aria-label="Age"
                placeholder="Optional"
                className={`mt-1 block w-full px-3 py-2 border ${
                  formik.touched.age && formik.errors.age ? 'border-red-500' : 'border-gray-300'
                } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
                {...formik.getFieldProps('age')}
              />
              {formik.touched.age && formik.errors.age && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.age}</p>
              )}
            </div>

            <div>
              <label htmlFor="location" className="block text-sm font-medium text-gray-700">
                Location
              </label>
              <input
                id="location"
                name="location"
                type="text"
                aria-label="Location"
                placeholder="Optional"
                className={`mt-1 block w-full px-3 py-2 border ${
                  formik.touched.location && formik.errors.location
                    ? 'border-red-500'
                    : 'border-gray-300'
                } rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500`}
                {...formik.getFieldProps('location')}
              />
              {formik.touched.location && formik.errors.location && (
                <p className="mt-1 text-sm text-red-600">{formik.errors.location}</p>
              )}
            </div>
          </div>

          <div>
            <label htmlFor="profilePicture" className="block text-sm font-medium text-gray-700">
              Profile Picture
            </label>
            <input
              id="profilePicture"
              name="profilePicture"
              type="file"
              accept="image/*"
              aria-label="Profile picture"
              onChange={handleFileChange}
              className={`mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 ${
                formik.touched.profilePicture && formik.errors.profilePicture
                  ? 'border-red-500'
                  : ''
              }`}
            />
            {formik.touched.profilePicture && formik.errors.profilePicture && (
              <p className="mt-1 text-sm text-red-600">{formik.errors.profilePicture}</p>
            )}
            <p className="mt-1 text-xs text-gray-500">Max 5MB, image files only</p>
          </div>

          <button
            type="submit"
            disabled={isSubmitting}
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
              isSubmitting
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
            }`}
          >
            {isSubmitting ? (
              <span className="flex items-center">
                <svg
                  className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  ></path>
                </svg>
                Creating account...
              </span>
            ) : (
              'Sign Up'
            )}
          </button>

          <p className="text-center text-sm text-gray-600">
            Already have an account?{' '}
            <a href="/login" className="font-medium text-blue-600 hover:text-blue-500">
              Sign in
            </a>
          </p>
        </form>
      </div>
    </div>
  );
}

import React from 'react';
import { CheckCircle, Award, Shield } from 'lucide-react';

interface VerificationBadgeProps {
  isVerified: boolean;
  size?: 'sm' | 'md' | 'lg';
  showTooltip?: boolean;
  className?: string;
}

const VerificationBadge: React.FC<VerificationBadgeProps> = ({
  isVerified,
  size = 'md',
  showTooltip = true,
  className = ''
}) => {
  if (!isVerified) return null;

  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-5 h-5',
    lg: 'w-6 h-6'
  };

  const iconSize = sizeClasses[size];

  return (
    <div 
      className={`inline-flex items-center ${className}`}
      title={showTooltip ? 'Verified Coach - Credentials confirmed by Coach2Coach' : undefined}
    >
      <div className="relative">
        <CheckCircle className={`${iconSize} text-blue-600 fill-current`} />
        <div className="absolute inset-0 bg-white rounded-full scale-50"></div>
        <Shield className={`${iconSize} text-blue-600 absolute inset-0 scale-75`} />
      </div>
      {size === 'lg' && (
        <span className="ml-2 text-sm font-medium text-blue-600">Verified Coach</span>
      )}
    </div>
  );
};

export default VerificationBadge;
import React, { useState } from 'react';
import { Award, Upload, CheckCircle, Clock, XCircle, FileText, Camera } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { profileStorage } from '../lib/localStorage';

const VerificationRequest: React.FC = () => {
  const { user } = useAuth();
  const [credentials, setCredentials] = useState('');
  const [proofFiles, setProofFiles] = useState<File[]>([]);
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);

  const profile = user ? profileStorage.getProfileByUserId(user.id) : null;
  
  // Mock verification status - in real app, this would come from Supabase
  const verificationStatus = 'none'; // 'none' | 'pending' | 'approved' | 'rejected'

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setProofFiles(Array.from(e.target.files));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user || !credentials.trim()) return;

    setLoading(true);

    try {
      // In real implementation, upload files to verification-docs bucket first
      const proofDocuments = proofFiles.map(file => `verification-docs/${user.id}/${file.name}`);

      const response = await fetch('/api/verification/request', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user.id,
          credentials: credentials.trim(),
          proofDocuments
        })
      });

      const data = await response.json();

      if (data.success) {
        setSubmitted(true);
      } else {
        throw new Error(data.error || 'Failed to submit verification request');
      }
    } catch (error) {
      console.error('Error submitting verification:', error);
      alert('Failed to submit verification request. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  if (!user || !profile) {
    return (
      <div className="max-w-2xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <h2 className="text-2xl font-bold text-slate-900 mb-4">Complete Your Profile</h2>
          <p className="text-gray-600">You need a complete coach profile before requesting verification.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto p-6">
      <div className="bg-white rounded-xl shadow-lg">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center">
            <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
              <Award className="w-6 h-6 text-blue-600" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-slate-900">Coach Verification</h1>
              <p className="text-gray-600">Get verified to build trust and boost your visibility</p>
            </div>
          </div>
        </div>

        {/* Status Display */}
        <div className="p-6">
          {verificationStatus === 'none' && !submitted && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <h3 className="font-semibold text-blue-800 mb-2">Why Get Verified?</h3>
              <ul className="text-blue-700 text-sm space-y-1">
                <li>• Verified badge on your profile and resources</li>
                <li>• Higher ranking in search results</li>
                <li>• Increased buyer trust and confidence</li>
                <li>• Priority support from our team</li>
              </ul>
            </div>
          )}

          {verificationStatus === 'pending' && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <Clock className="w-5 h-5 text-yellow-600 mr-3" />
                <div>
                  <h3 className="font-semibold text-yellow-800">Verification Pending</h3>
                  <p className="text-yellow-700 text-sm">
                    Your verification request is under review. We'll email you within 3-5 business days.
                  </p>
                </div>
              </div>
            </div>
          )}

          {verificationStatus === 'approved' && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
                <div>
                  <h3 className="font-semibold text-green-800">Verified Coach ✓</h3>
                  <p className="text-green-700 text-sm">
                    Congratulations! Your coaching credentials have been verified.
                  </p>
                </div>
              </div>
            </div>
          )}

          {verificationStatus === 'rejected' && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <XCircle className="w-5 h-5 text-red-600 mr-3" />
                <div>
                  <h3 className="font-semibold text-red-800">Verification Declined</h3>
                  <p className="text-red-700 text-sm">
                    We couldn't verify your credentials. Please review our feedback and resubmit.
                  </p>
                </div>
              </div>
            </div>
          )}

          {submitted && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
                <div>
                  <h3 className="font-semibold text-green-800">Request Submitted!</h3>
                  <p className="text-green-700 text-sm">
                    We've received your verification request and will review it within 3-5 business days.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Verification Form */}
          {verificationStatus === 'none' && !submitted && (
            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Coaching Credentials & Experience *
                </label>
                <textarea
                  value={credentials}
                  onChange={(e) => setCredentials(e.target.value)}
                  placeholder="Please describe your coaching credentials, certifications, experience, and achievements. Include:&#10;• Coaching licenses or certifications&#10;• Years of experience and teams coached&#10;• Notable achievements or championships&#10;• Education background (if relevant)&#10;• Current coaching positions"
                  rows={8}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">
                  Be specific and detailed. This helps us verify your coaching background.
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Supporting Documents (Optional)
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <input
                    type="file"
                    multiple
                    accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
                    onChange={handleFileUpload}
                    className="hidden"
                    id="proof-upload"
                  />
                  <label htmlFor="proof-upload" className="cursor-pointer">
                    <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                    <p className="text-gray-600 mb-1">Upload supporting documents</p>
                    <p className="text-xs text-gray-500">
                      Coaching licenses, certificates, team photos, etc. (PDF, JPG, PNG, DOC)
                    </p>
                  </label>
                </div>
                
                {proofFiles.length > 0 && (
                  <div className="mt-3 space-y-2">
                    <p className="text-sm font-medium text-gray-700">Selected Files:</p>
                    {proofFiles.map((file, index) => (
                      <div key={index} className="flex items-center p-2 bg-gray-50 rounded-lg">
                        <FileText className="w-4 h-4 text-gray-600 mr-2" />
                        <span className="text-sm text-gray-700">{file.name}</span>
                        <span className="text-xs text-gray-500 ml-auto">
                          {(file.size / 1024 / 1024).toFixed(1)} MB
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Requirements */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-semibold text-gray-800 mb-2">Verification Requirements</h4>
                <ul className="text-gray-700 text-sm space-y-1">
                  <li>• Minimum 2 years of coaching experience</li>
                  <li>• Verifiable coaching positions or certifications</li>
                  <li>• Active involvement in coaching community</li>
                  <li>• Professional coaching credentials or education</li>
                  <li>• No history of policy violations</li>
                </ul>
              </div>

              {/* Submit Button */}
              <button
                type="submit"
                disabled={loading || !credentials.trim()}
                className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white py-3 rounded-lg font-semibold transition-colors flex items-center justify-center"
              >
                {loading ? (
                  'Submitting Request...'
                ) : (
                  <>
                    <Award className="w-5 h-5 mr-2" />
                    Submit Verification Request
                  </>
                )}
              </button>
            </form>
          )}

          {/* Resubmit Option for Rejected */}
          {verificationStatus === 'rejected' && (
            <div className="text-center">
              <button className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
                Submit New Request
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VerificationRequest;
